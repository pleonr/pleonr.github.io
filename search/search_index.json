{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"sobre/","title":"Sobre","text":"<p>Ol\u00e1, meu nome \u00e9 Pablo Leon Rodrigues, sou Engenheiro de Software e Professor na Universidade de Passo Fundo.</p> <p>Formado em Ci\u00eancia da Computa\u00e7\u00e3o e com Mestrado em Computa\u00e7\u00e3o Aplicada sempre estou envolvido com a parte de backend, APIs e tecnologias que fazem o mundo digital funcionar por tr\u00e1s dos panos. Tenho um p\u00e9 na academia e outro no desenvolvimento pr\u00e1tico: leciono, crio materiais did\u00e1ticos (provas, slides, exerc\u00edcios) e tamb\u00e9m gosto de p\u00f4r a m\u00e3o na massa com projetos em Golang, Node.js, Python, gRPC, Docker, PostgreSQL e Flutter.</p> <p>Gosto de entender como as coisas funcionam em detalhes... desde protocolos de consenso como Paxos at\u00e9 arquiteturas Algoritmos, APIs, IoT e Computa\u00e7\u00e3o Ub\u00edqua.</p> <p>No fundo, o que mais me motiva \u00e9 pegar um conceito complexo e traduzi-lo de forma clara, seja para alunos, colegas ou para mim mesmo num caderno de anota\u00e7\u00f5es.</p> <p>Fora da tecnologia, gosto de jogos de tabuleiro, D&amp;D, Medivia, caf\u00e9 forte e livros.</p> <p></p>"},{"location":"API%27s/anodejs/","title":"API com Nodejs","text":"<p>Node.js \u00e9 um ambiente de tempo de execu\u00e7\u00e3o JavaScript de c\u00f3digo aberto e multi plataforma . \u00c9 uma ferramenta popular para quase qualquer tipo de projeto!</p> <p>O Node.js executa o mecanismo JavaScript V8, o n\u00facleo do Google Chrome, fora do navegador.</p> <p>Um aplicativo Node.js \u00e9 executado em um \u00fanico processo, sem criar um novo thread para cada solicita\u00e7\u00e3o.</p> <p>O node possibilita criar c\u00f3digo para o servidor usando a mesma linguagem(JavaScript) utilizada no lado do cliente.</p> <p>O nodejs tem utiliza package managers para instala\u00e7\u00e3o do node. Al\u00e9m de existir bin\u00e1rios para os principais SO's e a op\u00e7\u00e3o de compilar o c\u00f3digo fonte.</p> <p>O NVM(Node version manager) \u00e9 um gerenciador de vers\u00f5es do node, possibilitando a utiliza\u00e7\u00e3o de diversas vers\u00f5es.</p>"},{"location":"API%27s/anodejs/#hello-world","title":"Hello World!","text":"<ul> <li>Criar pasta para a api node e entra nela</li> <li>mkdir minhaapi</li> <li>cd minhaapi</li> <li>npm init &gt; seguir default</li> <li>indicar nome do entry point &gt; <code>server.js</code></li> </ul> <p>Isso vai criar o <code>package.json</code>   - criar o arquivo <code>index.js</code>   - <code>console.log(\"Hello World\");</code></p> <p><pre><code>{\n  \"name\": \"minhaapi\",\n  \"version\": \"1.0.0\",\n  \"description\": \"projeto TEDII\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"\"\n  },\n  \"author\": \"\",\n  \"license\": \"GPL 3.0\"\n}\n</code></pre> </p> <p>Execute o programa com <code>node server.js</code></p>"},{"location":"API%27s/anodejs/#npm","title":"NPM","text":"<p>O NPM(Node Package Manager) \u00e9 uma biblioteca para compartilhar c\u00f3digo e um gerenciador de depend\u00eancias.</p> <pre><code>{\n  \"name\" : \"foo\",\n  \"version\" : \"1.2.3\",\n  \"description\" : \"A package\",\n  \"main\" : \"index.js\",\n  \"keywords\" : [\"foo\", \"fool\", \"foolish\"],\n  \"author\" : \"John Doe\",\n  \"licence\" : \"ISC\"\n}\n</code></pre> <p>O comando para instalar um package \u00e9 o <code>--install</code> ele vai fazer download do package e suas depend\u00eancias na pasta <code>node_modules</code>, e adicionar esse package no arquivo <code>package.json</code> dentro da propriedade <code>dependencies</code>.</p> <p>O par\u00e2metro <code>--save-dev</code> vai salvar o package em <code>devDependencies</code> para ser usado apenas no ambiente de desenvolvimento.</p> <p>O par\u00e2metro <code>--save-optional</code> vai salvar o package em <code>optionalDependencies</code> n\u00e3o sendo exclusivamente necess\u00e1ria para a execu\u00e7\u00e3o.</p> <p>O par\u00e2metro <code>--no-save</code> \u00e9 auto-explicativo.</p>"},{"location":"API%27s/anodejs/#iniciando-o-projeto","title":"Iniciando o projeto","text":"<p>Vamos instalar 3 depend\u00eancias para o sistema:</p> <ul> <li>Express:</li> <li><code>npm install express --save</code></li> <li>Nodemon:</li> <li><code>npm install nodemon --save-dev</code></li> <li>Cors:</li> <li><code>npm install cors --save</code></li> </ul> <p>Para instalar esse projeto pela primeira vez, ao executar <code>npm install</code> o <code>npm</code> vai instalar todas as depend\u00eancias que estiverem salvas no <code>package.json</code>.</p> <pre><code>{\n  \"name\": \"detranupf\",\n  \"version\": \"1.0.0\",\n  \"description\": \"projedo TEDII\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.18.2\",\n    \"nodemon\": \"^3.1.0\"\n  }\n}\n</code></pre>"},{"location":"API%27s/anodejs/#cors","title":"CORS","text":"<p>CORS \u00e9 uma lib que funciona como um middleware, ele nos permite \"relaxar\" a seguran\u00e7a aplicada a uma API. Isso \u00e9 feito contornando os cabe\u00e7alhos, que especificam quais podem acessar a API.</p> <ul> <li>Cross-Origin</li> <li>Resource</li> <li>SharingAccess-Control-Allow-Origin</li> <li>origins</li> </ul> <p>Em outras palavras, o CORS \u00e9 um recurso de seguran\u00e7a do navegador que restringe solicita\u00e7\u00f5es HTTP de origem cruzada com outros servidores e espec\u00edfica quais dom\u00ednios acessam seus recursos.</p>"},{"location":"API%27s/anodejs/#nodemon","title":"Nodemon","text":"<p>Nodemon \u00e9 uma lib open source criada para habilitar hot reload no c\u00f3digo, entre outras funcionalidades:</p> <ul> <li>reinicializa\u00e7\u00e3o autom\u00e1tica</li> <li>detectar extens\u00e3o de arquivos monitorados</li> <li>monitorar pastas e altera\u00e7\u00f5es</li> </ul> <pre><code>\"scripts\": {\n  \"test\": \"echo ... &amp;&amp; exit 1\",\n  \"dev\":\"nodemon index.js\"\n},\n</code></pre> <p></p> <pre><code> leon@leon-dev &gt; npm run dev\n\n&gt; detranupf@1.0.0 dev\n&gt; nodemon server.js\n\n[nodemon] 3.1.0\n[nodemon] to restart, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching: js,mjs,cjs,json\n[nodemon] starting `node index.js`\n</code></pre>"},{"location":"API%27s/anodejs/#express","title":"Express","text":"<p>Express \u00e9 um web framework para node. Vamos editar o <code>index.js</code> para utilizar o express.</p> <pre><code>console.log(\"Server UP\");\n\nconst express = require('express');\nconst app = express();\n\nport = 3001;\n\napp.get('/', (req, res) =&gt; {\n  res.send('Requisi\u00e7\u00e3o get')\n});\n\napp.listen(port, () =&gt; {})\n</code></pre> <p>Ao acessar <code>localhost:3001</code></p>"},{"location":"API%27s/anodejs/#es-modules","title":"ES Modules","text":"<p>Modularizar a aplica\u00e7\u00e3o \u00e9 uma abordagem para tornar o c\u00f3digo mais f\u00e1cil para leitura e manuten\u00e7\u00e3o. Ela consiste em transformar scripts em m\u00f3dulos.</p> <p>Ele substitui o <code>require</code> de arquivos pela sintaxe <code>import</code> e <code>export</code>.</p> <p>Primeiro precisamos dizer ao nosso app json que utilizaremos m\u00f3dulos, para isso vamos modificar o <code>package.json</code></p> <pre><code>{\n  \"name\": \"detranupf\",\n  \"version\": \"1.0.0\",\n  \"description\": \"projedo TEDII\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.18.2\",\n    \"nodemon\": \"^3.1.0\"\n  }\n}\n</code></pre> <pre><code>import express from \"express\";\n\nconst app = express();\nconsole.log(\"Server UP\");\n\nport = 3001;\n\napp.get('/', (req, res) =&gt; {\n  res.send('Requisi\u00e7\u00e3o get')\n});\n\napp.listen(port, () =&gt; {})\n</code></pre>"},{"location":"API%27s/anodejs/#crud","title":"CRUD","text":"<p>CRUD(Create, Read, Update, Delete), s\u00e3o as quatro opera\u00e7\u00f5es b\u00e1sicas de bancos de dados relacionais, por\u00e9m esse conceito pode ser aplicado a outros tipos de banco de dados.</p> <p>CRUD's podem ser utilizados para testar software, ou como base para desenvolvimento, criando as estruturas b\u00e1sicas e depois se aprofundando.</p> <p>As opera\u00e7\u00f5es s\u00e3o autoexplicativas...</p> <ul> <li><code>Create</code>: Cria registros</li> <li><code>Read</code>: Lista registros</li> <li><code>Update</code>: Modifica registros</li> <li><code>Delete</code>: Deleta registros</li> </ul>"},{"location":"API%27s/anodejs/#list-read","title":"List (Read)","text":"<p>Vamos ent\u00e3o buscar mais dados da nossa API, criando uma rota chamada <code>items</code>. Vamos criar uma lista em javascript para retornar utilizando um m\u00e9todo <code>get</code>.</p> <p>Para isso vamos criar uma lista de item em <code>app.js</code> <pre><code>var items = [\n  {\n    id:1,\n    item: \"item 1\"\n  },\n  {\n    id:2,\n    item: \"item 2\"\n  }\n]\n</code></pre></p> <p>E vamos criar um m\u00e9todo <code>get</code> serializando os items com o json. Vamos setar um status code 200 de sucesso.</p> <pre><code>app.get(\"/items\", (req, res) =&gt; {\n  res.status(200).json(items);\n});\n</code></pre> <p>E a resposta vai ser algo como:</p> <p><code>result</code> <pre><code>[\n    {\n        \"id\": 1,\n        \"nome\": \"item 1\"\n    },\n    {\n        \"id\": 2,\n        \"nome\": \"item 2\"\n    }\n]\n</code></pre></p>"},{"location":"API%27s/anodejs/#post-create","title":"Post (Create)","text":"<p>Agora vamos adicionar um item a nossa lista de items. Para isso precisamos fazer um <code>post</code> declarando que iremos enviar dados para a API atrav\u00e9s do <code>body</code> da requisi\u00e7\u00e3o.</p> <p>Precisamos tamb\u00e9m adicionar um <code>middleware</code> ao nosso app, para dar acesso ao express e poder trabalhar com a requisi\u00e7\u00e3o.</p> <pre><code>const app = express();\napp.use(express.json())\n\napp.post(\"/items\", (req, res) =&gt; {\n   items.push(req.body);\n   res.status(201).send(\"Adicionado\");\n});\n</code></pre> <p>Mas precisamos enviar os dados do registro que queremos criar. No <code>body</code> da requisi\u00e7\u00e3o vamos adiconar os dados.</p> <p>Aqui <code>app.use(express.json())</code> temos uma  temos aqui uma fun\u00e7\u00e3o executando outra fun\u00e7\u00e3o, isso se chama middleware. No caso do Express, esses middlewares s\u00e3o utilizados para ter acesso \u00e0s requisi\u00e7\u00f5es e \u00e0s respostas no momento em que elas est\u00e3o sendo feitas, e para fazer algumas a\u00e7\u00f5es nelas, como exemplo, modificar o objeto ou enviar mais informa\u00e7\u00f5es.</p> <p>Aqui <code>express.json</code>o serve que qualquer requisi\u00e7\u00e3o cujo corpo \u00e9 um objeto compat\u00edvel com JSON, como um objeto com id e t\u00edtulo ou um array de objetos, passar\u00e1 por esse middleware e ser\u00e1 convertido e analisado (ou 'parseado') para JSON.</p> <p>Toda vez que recebemos dados via o corpo(body) em uma requisi\u00e7\u00e3o, eles chegam convertidos como string. Embora eles tenham o formato JSON, formato de objeto, com pares de chave-valor, eles viajam na conex\u00e3o HTTP no formato string. Para conseguirmos utilizar os dados como JSON, ou seja, acessar as propriedades deles, precisamos converter essa string novamente para JSON.</p>"},{"location":"API%27s/anodejs/#get-read","title":"Get (Read)","text":"<p>Para buscar a informa\u00e7\u00e3o adicionada vamos criar um m\u00e9todo <code>get</code> <pre><code>app.get(\"/items/:id\", (req, res) =&gt; {\n  const index = buscaItem(req.params.id);\n  res.status(200).json(items[index]);\n});\n</code></pre></p> <p>Precisamos de uma fun\u00e7\u00e3o para buscar o item na lista. <pre><code>function buscaItem(id) {\n    return items.findIndex(item =&gt; {\n       return item.id === Number(id);\n    });\n}\n</code></pre></p>"},{"location":"API%27s/anodejs/#update","title":"Update","text":"<p>E para alterar um registro? Precisamos identificar qual registro queremos editar.</p> <pre><code>app.put(\"/items/:id\", (req, res) =&gt; {\n  const index = buscaItem(req.params.id);\n  items[index].nome = req.body.nome;\n  res.status(200).json(items[index]);\n});\n</code></pre>"},{"location":"API%27s/anodejs/#delete","title":"Delete","text":"<p>Para remover um registro a l\u00f3gica \u00e9 muito parecida, precisamos indicar qual registro vai ser removido.</p> <pre><code>app.delete(\"/items/:id\", (req, res) =&gt; {\n  const index = buscaItem(req.params.id);\n  items.splice(index, 1);\n  res.status(200).send(\"item removido\");\n});\n</code></pre>"},{"location":"API%27s/anodejs/#estrutura","title":"Estrutura","text":"<p>Vamos organizar melhor nossa aplica\u00e7\u00e3o. Crie uma pasta <code>src</code> para organizar melhor o c\u00f3digo.</p> <p>Vamos criar um novo arquivo chamado <code>app.js</code> que vai ter a l\u00f3gica de rotas e outras atribui\u00e7\u00f5es e deixar o <code>index.js</code> apenas como servidor.</p> <p></p> <p><code>app.js</code> <pre><code>import express from 'express';\n\nconst app = express();\napp.get(\"/\", (req, res) =&gt; {\n   res.status(200).send(\"home\");\n});\n\nexport default app;\n</code></pre></p> <p><code>index.js</code> <pre><code>import app from \"./src/app.js\";\n\nconst PORT = 3001;\napp.listen(PORT, () =&gt; {\n   console.log(\"Server UP\")\n});\n</code></pre></p> <p>Tamb\u00e9m vamos criar pastas para separar os endpoints e sua l\u00f3gica, para isso dentro da pasta de c\u00f3digo fonte <code>src</code> crie as pastas <code>controllers</code> e <code>routes</code>. Cada \"entidade\" ou \"feature\" do sistema vai ter seu arquivo de controller e rotas.</p> <p>O controller vai ser respons\u00e1vel por armazenar a l\u00f3gica de cada endpoint, pr\u00e1ticamente todo o c\u00f3digo relacionado ao processamento dessa rota.</p> <pre><code>/* usuarioController.js */\nimport pool from \"../db.js\";\n\nexport const getUsuarios = (req, res) =&gt; {\n  try {\n    res.status(200);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Erro ao listar usuarios' });\n  }\n};\n</code></pre> <p>No arquivo de routes(rotas) vamos definir o caminho e qual fun\u00e7\u00e3o do controller vai ser chamado.</p> <pre><code>/* usuarioRoutes.js */\nimport express from 'express';\nimport { getUsuarios } from '../controllers/userController.js';\nconst router = express.Router();\n\nrouter.get('/', getUsuarios);\n\nexport default router;\n</code></pre> <p>E no nosso app vamos chamar os arquivos de rotas.</p> <pre><code>import express from 'express';\nimport usuarioRoutes from './routes/usuarioRoutes.js';\n\nconst app = express();\napp.use(\"/api/usuarios\", usuarioRoutes);\n\nexport default app;\n</code></pre>"},{"location":"API%27s/anodejs/#persistencia-em-bd","title":"Persist\u00eancia em BD","text":"<p>Vamos utilizar o postgres para fazer a persist\u00eancia dos dados. Nas m\u00e1quinas do laborat\u00f3rio utilizamos o usu\u00e1rio <code>postgres</code> com senha <code>masterkey</code>. Lembre que \u00e9 necess\u00e1rio subir o servi\u00e7o do postgres no windows.</p>"},{"location":"API%27s/anodejs/#env","title":"Env","text":"<p>Para utilizar cred\u00eanciais de login em servi\u00e7os uma pr\u00e1tica comum \u00e9 utilizar vari\u00e1veis de ambiente para armazenar, login, senha, url entre outras informa\u00e7\u00f5es sens\u00edveis.</p> <p><code>Dotenv</code> \u00e9 um m\u00f3dulo de depend\u00eancia zero que carrega vari\u00e1veis ambiente de um arquivo <code>.env</code> para <code>process.env.</code>, armazenando a configura\u00e7\u00e3o no ambiente separadamente do c\u00f3digo.</p> <pre><code>DB_NAME=projeto\nDB_USER=postgres\nDB_PASSWORD=masterkey\nDB_HOST=localhost\n</code></pre>"},{"location":"API%27s/anodejs/#lib-pg","title":"Lib PG","text":"<p>A lib <code>pg</code>, \u00e9 uma biblioteca para comunica\u00e7\u00e3o com o Postgresql.</p> <pre><code>import pg from 'pg';\nimport dotenv from 'dotenv/config.js';\n\nconst { Pool } = pg;\nconst dbName = process.env.DB_NAME;\nconst dbUser = process.env.DB_USER;\nconst dbHost = process.env.DB_HOST;\nconst dbPassword = process.env.DB_PASSWORD;\nconst pool = new Pool({\n    user: dbUser,\n    host: dbHost,\n    database: dbName,\n    password: dbPassword,\n    port: 5432\n});\nexport default pool;\n</code></pre> <p>O pool de conex\u00e3o do pg mant\u00e9m um conjunto de conex\u00f5es abertas e as reutiliza conforme necess\u00e1rio ele \u201cempresta\u201d uma conex\u00e3o e a \u201clibera\u201d automaticamente quando a query \u00e9 conclu\u00edda.</p> <pre><code>import pool from \"../db.js\";\nexport const getTodasPessoas = async (req, res) =&gt; {\n    const client = await pool.connect();\n    try {\n        const result = await client.query('SELECT * FROM Usuarios');\n        //const jsonData = result.rows.map(row =&gt; ({\n        //    id: row.id,\n        //    name: row.name\n        //}));\n        res.status(200).json(result.rows);\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ message: 'Erro ao buscar pessoas' });\n    } finally {\n        client.release();\n    }\n};\n</code></pre>"},{"location":"API%27s/anodejs/#refatorando-os-metodos","title":"Refatorando os m\u00e9todos...","text":"<pre><code>export const getUsuario = async (req, res) =&gt; {\ntry {\nconst usuarioId = req.params.id;\nconst client = await pool.connect();\nconst result = await client.query(`\n            SELECT * FROM Usuarios WHERE id_usuario = $1\n        `, [usuarioId]);\n\n        res.status(200).json(result.rows);\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ message: 'Erro ao buscar pessoas' });\n    }\n};\n</code></pre> <pre><code>export const deleteUsuario = async (req, res) =&gt; {\ntry {\nconst usuarioId = req.params.id;\nconst client = await pool.connect();\nconst result = await client.query(`\n            DELETE FROM Usuarios WHERE id_usuario = $1\n        `, [usuarioId]);\n\n        res.status(200).send('usuario deletado');\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ message: 'Erro ao buscar pessoas' });\n    }\n};\n</code></pre> <pre><code>export const postUsuarios = async (req, res) =&gt; {\ntry {\n  const usuario = req.body;\n  const client = await pool.connect();\n  const result = await client.query(`\n      INSERT INTO Usuarios(id_usuario, nome, email, password)\n      VALUES ($1, $2, $3, $4) RETURNING *\n  `, [\n      usuario.id,\n      usuario.nome,\n      usuario.email,\n      usuario.password\n     ]\n  );\n  res.status(201).send('Usu\u00e1rio adicionado com sucesso');\n  } catch (err) {\n  console.error(err);\n  res.status(500).json({ message: 'Erro ao buscar pessoas' });\n  }\n};\n</code></pre> <pre><code>export const putUsuario = async (req, res) =&gt; {\nconst id = req.params.id;\nconst nome = req.body.nome;\nconst client = await pool.connect();\n  try {\n    const result = await client.query(\n    `UPDATE Usuarios SET nome = $2\n     WHERE id_usuario = $1\n     RETURNING *`,\n      [id, nome]\n    );\n    if (result.rows.length === 0) {\n      return res.status(404).json({ message: 'Usu\u00e1rio n\u00e3o encontrado' });\n    }\n    res.json(result.rows);\n  } catch (err) {\n      console.error(err);\n      res.status(400).json({ message: 'Erro ao atualizar usu\u00e1rio' });\n  }\n};\n</code></pre>"},{"location":"API%27s/btypescript/","title":"API com TypeScript","text":"<pre><code>mkdir items-api\ncd items-api\nnpm init -y\n</code></pre>"},{"location":"API%27s/btypescript/#instalar-dependencias","title":"Instalar depend\u00eancias","text":"<p>Essas s\u00e3o as depend\u00eancias b\u00e1sicas do sistema</p> <pre><code>npm install express typeorm reflect-metadata pg dotenv\n</code></pre> <p>Depois vamos instalar as depend\u00eancias de desenvolvimento:</p> <pre><code>npm install -D typescript ts-node-dev @types/node @types/express\n</code></pre>"},{"location":"API%27s/btypescript/#configurar-typescript","title":"Configurar TypeScript","text":"<pre><code>npx tsc --init\n</code></pre> <p>Modifique o <code>tsconfig.json</code>:</p> <pre><code>{\n  \"target\": \"ES2020\",\n  \"module\": \"commonjs\",\n  \"rootDir\": \"src\",\n  \"outDir\": \"dist\",\n  \"esModuleInterop\": true,\n  \"experimentalDecorators\": true,\n  \"emitDecoratorMetadata\": true,\n  \"strict\": true\n}\n</code></pre>"},{"location":"API%27s/btypescript/#estrutura-de-pastas-padrao-mvc","title":"Estrutura de Pastas (Padr\u00e3o MVC)","text":"<pre><code>src/\n\u2502\n\u251c\u2500\u2500 config/          # Configura\u00e7\u00e3o (TypeORM, .env)\n\u251c\u2500\u2500 controllers/     # Lida com requisi\u00e7\u00f5es HTTP\n\u251c\u2500\u2500 entities/        # Entidades do banco (TypeORM)\n\u251c\u2500\u2500 routes/          # Define rotas da aplica\u00e7\u00e3o\n\u251c\u2500\u2500 services/        # Regras de neg\u00f3cio\n\u251c\u2500\u2500 database/        # Conex\u00f5es, migrations (se necess\u00e1rio)\n\u2514\u2500\u2500 index.ts         # Arquivo principal da aplica\u00e7\u00e3o\n</code></pre>"},{"location":"API%27s/btypescript/#arquivo-env","title":"Arquivo <code>.env</code>","text":"<p>Utilizamos o arquivo <code>.env</code> para armazenar secrets durante o desenvolvimento</p> <pre><code>DB_HOST=localhost\nDB_PORT=5432\nDB_USERNAME=postgres\nDB_PASSWORD=postgres\nDB_DATABASE=itemsdb\nPORT=3000\n</code></pre>"},{"location":"API%27s/btypescript/#conexao-com-banco-srcconfigdata-sourcets","title":"Conex\u00e3o com banco <code>src/config/data-source.ts</code>","text":"<pre><code>import { DataSource } from \"typeorm\";\nimport { Item } from \"../entities/Item\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport const AppDataSource = new DataSource({\n  type: \"postgres\",\n  host: process.env.DB_HOST,\n  port: parseInt(process.env.DB_PORT || \"5432\"),\n  username: process.env.DB_USERNAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE,\n  synchronize: true,\n  logging: false,\n  entities: [Item],\n});\n</code></pre>"},{"location":"API%27s/btypescript/#criar-entidade-item","title":"Criar Entidade <code>Item</code>","text":"<p><code>src/entities/Item.ts</code></p> <pre><code>import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class Item {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n}\n</code></pre>"},{"location":"API%27s/btypescript/#service-srcservicesitemservicets","title":"Service <code>src/services/ItemService.ts</code>","text":"<pre><code>import { AppDataSource } from \"../config/data-source\";\nimport { Item } from \"../entities/Item\";\n\nconst itemRepo = AppDataSource.getRepository(Item);\n\nexport class ItemService {\n  static async findAll() {\n    return itemRepo.find();\n  }\n\n  static async findById(id: number) {\n    return itemRepo.findOneBy({ id });\n  }\n\n  static async create(data: Partial&lt;Item&gt;) {\n    const item = itemRepo.create(data);\n    return itemRepo.save(item);\n  }\n\n  static async update(id: number, data: Partial&lt;Item&gt;) {\n    await itemRepo.update(id, data);\n    return itemRepo.findOneBy({ id });\n  }\n\n  static async delete(id: number) {\n    return itemRepo.delete(id);\n  }\n}\n</code></pre>"},{"location":"API%27s/btypescript/#controller-srccontrollersitemcontrollerts","title":"Controller <code>src/controllers/ItemController.ts</code>","text":"<pre><code>import { Request, Response } from \"express\";\nimport { ItemService } from \"../services/ItemService\";\n\nexport class ItemController {\n  static async index(req: Request, res: Response) {\n    const items = await ItemService.findAll();\n    return res.json(items);\n  }\n\n  static async show(req: Request, res: Response) {\n    const item = await ItemService.findById(Number(req.params.id));\n    if (!item) return res.status(404).json({ message: \"Item not found\" });\n    return res.json(item);\n  }\n\n  static async store(req: Request, res: Response) {\n    const item = await ItemService.create(req.body);\n    return res.status(201).json(item);\n  }\n\n  static async update(req: Request, res: Response) {\n    const updated = await ItemService.update(Number(req.params.id), req.body);\n    return res.json(updated);\n  }\n\n  static async destroy(req: Request, res: Response) {\n    await ItemService.delete(Number(req.params.id));\n    return res.status(204).send();\n  }\n}\n</code></pre>"},{"location":"API%27s/btypescript/#rotas-srcroutesitemroutests","title":"Rotas <code>src/routes/item.routes.ts</code>","text":"<pre><code>import { Router } from \"express\";\nimport { ItemController } from \"../controllers/ItemController\";\n\nconst router = Router();\n\nrouter.get(\"/\", ItemController.index);\nrouter.get(\"/:id\", ItemController.show);\nrouter.post(\"/\", ItemController.store);\nrouter.put(\"/:id\", ItemController.update);\nrouter.delete(\"/:id\", ItemController.destroy);\n\nexport default router;\n</code></pre>"},{"location":"API%27s/btypescript/#srcroutesindexts","title":"<code>src/routes/index.ts</code>","text":"<pre><code>import { Router } from \"express\";\nimport itemRoutes from \"./item.routes\";\n\nconst routes = Router();\n\nroutes.use(\"/items\", itemRoutes);\n\nexport default routes;\n</code></pre>"},{"location":"API%27s/btypescript/#arquivo-principal-srcindexts","title":"Arquivo Principal <code>src/index.ts</code>","text":"<pre><code>import express from \"express\";\nimport \"reflect-metadata\";\nimport * as dotenv from \"dotenv\";\nimport { AppDataSource } from \"./config/data-source\";\nimport routes from \"./routes\";\n\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(routes);\n\nconst port = process.env.PORT || 3000;\n\nAppDataSource.initialize()\n  .then(() =&gt; {\n    app.listen(port, () =&gt; {\n      console.log(`API is running on http://localhost:${port}`);\n    });\n  })\n  .catch((error) =&gt; console.log(\"Error during Data Source initialization\", error));\n</code></pre>"},{"location":"API%27s/btypescript/#scripts-no-packagejson","title":"Scripts no <code>package.json</code>","text":"<pre><code>\"scripts\": {\n  \"dev\": \"ts-node-dev --respawn --transpile-only src/index.ts\"\n}\n</code></pre> <p>Execute com:</p> <pre><code>npm run dev\n</code></pre>"},{"location":"API%27s/btypescript/#testando-a-api","title":"Testando a API","text":"<p>Voc\u00ea pode testar os endpoints com Postman, Insomnia ou <code>curl</code>.</p> <ul> <li><code>GET    /items</code> \u2192 Lista todos os itens</li> <li><code>GET    /items/:id</code> \u2192 Detalha um item</li> <li><code>POST   /items</code> \u2192 Cria um novo item</li> <li><code>PUT    /items/:id</code> \u2192 Atualiza um item</li> <li><code>DELETE /items/:id</code> \u2192 Deleta um item</li> </ul>"},{"location":"API%27s/cpython/","title":"API's REST com Python","text":"<p>Existem diversas bibliotecas(ou frameworks) no python para trabalhar com o API's REST, dentre elas podemos citar Django, Flask e FastAPI.</p>"},{"location":"API%27s/cpython/#fastapi","title":"FastAPI","text":"<p>O FastAPI \u00e9 um framework popular para cria\u00e7\u00e3o de APIs RESTful e servi\u00e7os web em Python. Ele foi projetado para oferecer alta performance e facilidade de desenvolvimento, aproveitando os recursos ass\u00edncronos do Python (async/await) e a tipagem est\u00e1tica.</p> <pre><code>mkdir fastapi-dogceo &amp;&amp; cd fastapi-dogceo\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip\npip install \"fastapi[standard]\" httpx\n</code></pre> <p>No arquivo main.py, o FastAPI \u00e9 utilizado para criar a aplica\u00e7\u00e3o principal e definir os endpoints HTTP que respondem a requisi\u00e7\u00f5es do cliente</p> <pre><code>from fastapi import FastAPI, HTTPException\n\napp = FastAPI(\n    title=\"Api que consome API\",\n    description=\"Api que fornece cachorros!\",\n    version=\"0.0.1\"\n)\n</code></pre> <p>O objeto app representa a aplica\u00e7\u00e3o, e cada rota \u00e9 criada com o uso de decoradores, como @app.get(\"/api/health\") e @app.get(\"/api/cachorro\"). Cada decorador indica ao FastAPI que determinada fun\u00e7\u00e3o ser\u00e1 executada quando uma requisi\u00e7\u00e3o for feita ao respectivo endpoint.</p> <p>O FastAPI tamb\u00e9m se destaca pela documenta\u00e7\u00e3o autom\u00e1tica da API: ao executar o servidor, \u00e9 poss\u00edvel acessar /docs (Swagger UI) e /redoc (ReDoc) para visualizar os endpoints, par\u00e2metros e exemplos de resposta.</p>"},{"location":"API%27s/cpython/#httpx","title":"httpx","text":"<p>Para consumir uma API externa vamos utilizar a biblioteca httpx, que \u00e9 uma alternativa moderna e ass\u00edncrona ao tradicional requests.</p> <p>Enquanto requests trabalha de forma s\u00edncrona (bloqueante), o httpx.AsyncClient permite que a aplica\u00e7\u00e3o realize chamadas HTTP sem interromper o fluxo de execu\u00e7\u00e3o de outras tarefas, caracter\u00edstica essencial em aplica\u00e7\u00f5es ass\u00edncronas como as criadas com FastAPI.</p> <pre><code>@app.get(\"/api/cachorro\")\nasync def get_cachorro():\n    async with httpx.AsyncClient(timeout=1000) as client:\n        response = await client.get(f\"{URL_DOGCEO}/breeds/image/random\")\n        if response.status_code != 200:\n            raise HTTPException(status_code=503, detail=\"DogCEO indispon\u00edvel\")\n        data = response.json()\n        return {data[\"message\"]}\n</code></pre>"},{"location":"API%27s/cpython/#uvicorn","title":"Uvicorn","text":"<p>O Uvicorn \u00e9 o servidor respons\u00e1vel por executar a aplica\u00e7\u00e3o FastAPI.</p> <p>Diferente de servidores WSGI (como Gunicorn ou Flask), o Uvicorn \u00e9 baseado em ASGI (Asynchronous Server Gateway Interface), um padr\u00e3o projetado para suportar opera\u00e7\u00f5es ass\u00edncronas nativamente.</p> <pre><code>uvicorn main:app --reload --host 0.0.0.0 --port 8000\n</code></pre> <p>o Uvicorn inicializa o servidor e disponibiliza os endpoints definidos no c\u00f3digo. O par\u00e2metro main:app indica que o servidor deve procurar o objeto app dentro do arquivo main.py.</p>"},{"location":"API%27s/cpython/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.12-slim\n\nWORKDIR /app\n\nCOPY . /app\n\nRUN pip install -r requirements.txt\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"API%27s/cpython/#makefile","title":"Makefile","text":"<pre><code>HOST ?= 0.0.0.0\nPORT ?= 8000\nVENV_DIR ?= .venv\nIMAGE ?= api-cachorros\nTAG ?= latest\n\n.PHONY: install dev run test fmt docker-up docker-down\ninstall:\n    python -m venv .venv &amp;&amp; . .venv/bin/activate &amp;&amp; pip install --upgrade pip &amp;&amp; pip install -r requirements.txt\n\ndev:\n    uvicorn main:app --reload --port $(PORT)\n\nrun:\n    uvicorn main:app --host 0.0.0.0 --port $(PORT)\n\n\n.PHONY: health\nhealth:\n    @curl -fsS http://$(HOST):$(PORT)/api/health | jq . || curl -fsS http://$(HOST):$(PORT)/api/health\n\n.PHONY: cachorro\ncachorro:\n    @curl -fsS http://$(HOST):$(PORT)/api/cachorro | jq . || curl -fsS http://$(HOST):$(PORT)/api/cachorro\n\n.PHONY: docker-build\ndocker-build:\n    @docker build -t $(IMAGE):$(TAG) .\n\n.PHONY: docker-run\ndocker-run:\n    @docker run --rm -p $(PORT):$(PORT) -e PORT=$(PORT) --name $(IMAGE)-ctr $(IMAGE):$(TAG)\n\n.PHONY: docker-shell\ndocker-shell:\n    @docker run --rm -it $(IMAGE):$(TAG) /bin/sh\n</code></pre>"},{"location":"API%27s/cpython/#teste","title":"Teste","text":"<p>Para adicionar mais recursos podemos utilizar o pytest, para testes automatizados e ruff para lint do c\u00f3digo.</p> <p>Adicione as seguintes depend\u00eancias no requirements.txt</p> <pre><code>pytest\npytest-cov\nruff\n</code></pre> <p>No Makefile adicione o alvo:</p> <pre><code>.PHONY: test\ntest: install\n    @echo \"\ud83d\udd0d Executando testes...\"\n    @$(VENV_DIR)/bin/pytest -v --maxfail=1 --disable-warnings -q\n\n.PHONY: lint\nlint: install\n    @$(VENV_DIR)/bin/ruff check .\n\n.PHONY: coverage\ncoverage: install\n    @$(VENV_DIR)/bin/pytest --cov=main --cov-report=term-missing\n</code></pre> <p>E crie a pasta para tests</p> <pre><code>\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_api.py\n</code></pre> <pre><code>from fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef test_health_endpoint():\n    response = client.get(\"/api/health\")\n    assert response.status_code == 200\n    assert response.json() == {\"status\": \"ok\"}\n\ndef test_cachorro_endpoint():\n    response = client.get(\"/api/cachorro\")\n    assert response.status_code == 200\n    assert isinstance(response.json(), set) or isinstance(response.json(), dict)\n</code></pre> <p>Instale e rode: <pre><code>pip install pytest pytest-asyncio\npytest -q\n</code></pre></p> <p>main.py</p> <pre><code>import httpx\nfrom fastapi import FastAPI, HTTPException\n\napp = FastAPI(\n  title=\"Api que consome API\",\n  description=\"Api que fornece cachorros!\",\n  version=\"0.0.1\"\n)\n\nURL_DOGCEO = \"https://dog.ceo/api\"\n\n@app.get(\"/api/health\")\nasync def health():\n  return {\"status\": \"ok\"}\n\n@app.get(\"/api/cachorro\")\nasync def get_cachorro():\n  async with httpx.AsyncClient(timeout=1000) as client:\n    response = await client.get(f\"{URL_DOGCEO}/breeds/image/random\")\n    if response.status_code != 200:\n      print(\"A api de terceiro n\u00e3o retornou corretamente\")\n      raise HTTPException(status_code=503, detail=\"DogCEO indispon\u00edvel\")\n    data = response.json()\n    return {data[\"message\"]}\n</code></pre>"},{"location":"API%27s/eparametros/","title":"Par\u00e2metros em APIs (REST)","text":"<p>Ao consumir ou construir uma API, \u00e9 normal enviar dados para a api. Ao trabalhar com uma API REST podemos enviar par\u00e2metros utilizando URL Params, Query Params, Body Params e Headers. Cada tipo tem uma finalidade e local de transporte distintos.</p>"},{"location":"API%27s/eparametros/#visao-geral","title":"Vis\u00e3o Geral","text":"Tipo Onde aparece Uso principal Exemplo URL Params Parte da rota (<code>/users/:id</code>) Identificar recurso espec\u00edfico <code>/users/42</code> Query Params Ap\u00f3s <code>?</code> na URL Filtros, pagina\u00e7\u00e3o, ordena\u00e7\u00e3o <code>/products?limit=10&amp;page=2&amp;sort=price</code> Body Params Corpo da requisi\u00e7\u00e3o Cria\u00e7\u00e3o/atualiza\u00e7\u00e3o de recursos JSON: <code>{ \"name\": \"Ana\", \"email\": \"a@x.com\" }</code> Headers Cabe\u00e7alho HTTP Metadados (auth, mime, cache) <code>Authorization: Bearer &lt;token&gt;</code>"},{"location":"API%27s/eparametros/#1-url-params-path-params","title":"1) URL Params (Path Params)","text":"<p>Defini\u00e7\u00e3o: Parte obrigat\u00f3ria do caminho da rota, usada para identificar um recurso \u00fanico.</p> <p>Exemplo de rota e chamada</p> <pre><code>GET /users/:id\nGET /users/42\n</code></pre> <p>Express (TypeScript)</p> <pre><code>import { Router, Request, Response } from 'express';\nconst router = Router();\n\nrouter.get('/users/:id', (req: Request, res: Response) =&gt; {\n  const { id } = req.params; // string\n  res.json({ id });\n});\n\nexport default router;\n</code></pre> <p>Com dois URL Params</p> <pre><code>GET /playlists/:playlistId/musics/:musicId\nGET /playlists/10/musics/55\n</code></pre> <pre><code>router.get('/playlists/:playlistId/musics/:musicId', (req, res) =&gt; {\n  const { playlistId, musicId } = req.params;\n  res.json({ playlistId, musicId });\n});\n</code></pre>"},{"location":"API%27s/eparametros/#2-query-params","title":"2) Query Params","text":"<p>Defini\u00e7\u00e3o: Par\u00e2metros opcionais na URL ap\u00f3s <code>?</code>, separados por <code>&amp;</code>. Usados para filtrar, paginar, ordenar etc.</p> <p>Exemplo</p> <pre><code>GET /musics?genre=rock&amp;year=2020&amp;limit=20&amp;page=2\n</code></pre> <p>Express</p> <pre><code>router.get('/musics', (req, res) =&gt; {\n  const { genre, year, limit = '20', page = '1' } = req.query;\n  res.json({ genre, year, limit, page });\n});\n</code></pre> <p>Arrays e m\u00faltiplos valores</p> <pre><code>GET /musics?genre=rock&amp;genre=blues\n# ou\nGET /musics?genre[]=rock&amp;genre[]=blues\n</code></pre> <p>No Express, acesse como <code>req.query.genre</code> (pode ser <code>string | string[]</code>).</p>"},{"location":"API%27s/eparametros/#3-body-params","title":"3) Body Params","text":"<p>Defini\u00e7\u00e3o: Dados enviados no corpo da requisi\u00e7\u00e3o, ideais para criar ou atualizar recursos.</p> <p>Requer middleware no Express: <pre><code>app.use(express.json()); // para application/json\n</code></pre></p> <p>Exemplo (POST JSON)</p> <pre><code>POST /musics\nContent-Type: application/json\n\n{\n  \"title\": \"Back in Black\",\n  \"author\": \"AC/DC\",\n  \"year\": 1980,\n  \"duration\": 255\n}\n</code></pre> <p>Express</p> <pre><code>router.post('/musics', (req, res) =&gt; {\n  const { title, author, year, duration } = req.body;\n  // valida\u00e7\u00e3o, persist\u00eancia...\n  res.status(201).json({ title, author, year, duration });\n});\n</code></pre> <p>Outros formatos de body - <code>multipart/form-data</code> (upload de arquivos) - <code>application/x-www-form-urlencoded</code> (forms) - <code>text/plain</code></p>"},{"location":"API%27s/eparametros/#4-headers","title":"4) Headers","text":"<p>Defini\u00e7\u00e3o: Metadados enviados no cabe\u00e7alho da requisi\u00e7\u00e3o/resposta. N\u00e3o fazem parte do body.</p> <p>Comuns em APIs</p> <ul> <li><code>Authorization: Bearer &lt;jwt&gt;</code> \u2014 autentica\u00e7\u00e3o/autoriza\u00e7\u00e3o</li> <li><code>Content-Type: application/json</code> \u2014 tipo do corpo enviado</li> <li><code>Accept: application/json</code> \u2014 formato aceito na resposta</li> <li><code>Cache-Control: no-cache</code> \u2014 cache</li> <li><code>X-Request-Id: ...</code> \u2014 rastreabilidade</li> </ul> <p>Express</p> <pre><code>router.get('/secure', (req, res) =&gt; {\n  const auth = req.headers['authorization']; // ou req.get('authorization')\n  if (!auth) return res.status(401).json({ error: 'Token n\u00e3o enviado' });\n  res.json({ ok: true });\n});\n</code></pre>"},{"location":"API%27s/eparametros/#5-exemplo-unificado-musicas-por-usuario","title":"5) Exemplo Unificado (M\u00fasicas por Usu\u00e1rio)","text":"<pre><code>GET /users/:userId/musics?genre=rock&amp;year=2020\n</code></pre> <ul> <li>URL Param: <code>:userId</code> \u2192 qual usu\u00e1rio.</li> <li>Query Param: <code>genre</code>, <code>year</code> \u2192 filtros opcionais.</li> <li>Body Param (se fosse POST/PUT): dados complexos (JSON).</li> <li>Headers: <code>Authorization</code>, <code>Accept</code>, <code>Content-Type</code>\u2026</li> </ul> <p>Express</p> <pre><code>router.get('/users/:userId/musics', (req, res) =&gt; {\n  const { userId } = req.params;\n  const { genre, year } = req.query;\n  const auth = req.get('authorization');\n  res.json({ userId, genre, year, auth });\n});\n</code></pre>"},{"location":"API%27s/eparametros/#6-boas-praticas","title":"6) Boas Pr\u00e1ticas","text":"<ul> <li>Consist\u00eancia de nomes (<code>snake_case</code> ou <code>camelCase</code>) e sem\u00e2ntica clara.</li> <li>URL Params para identidade de recurso; Query para filtros; Body para dados.</li> <li>Valida\u00e7\u00e3o de entrada (ex.: <code>zod</code>, <code>joi</code>, <code>class-validator</code>).</li> <li>Documenta\u00e7\u00e3o com OpenAPI/Swagger.</li> <li>Pagina\u00e7\u00e3o previs\u00edvel (<code>limit</code>, <code>page</code> ou <code>cursor</code>).</li> <li>Erros padronizados (status code + payload consistente).</li> <li>Headers: sempre envie <code>Content-Type</code> correto e valide <code>Authorization</code> quando necess\u00e1rio.</li> </ul>"},{"location":"API%27s/finternacionalizacao/","title":"Internacionaliza\u00e7\u00e3o","text":"<p>Internacionaliza\u00e7\u00e3o(internationalization), abreviada como <code>i18n</code> (porque h\u00e1 18 letras entre \u201ci\u201d e \u201cn\u201d), \u00e9 o processo de preparar um software para ser facilmente adaptado a diferentes idiomas e regi\u00f5es, sem modificar o c\u00f3digo-fonte. Ou seja: voc\u00ea \u201cinternacionaliza\u201d uma aplica\u00e7\u00e3o antes de traduzir, tornando-a multil\u00edngue-ready.</p> <p>Tip</p> <p>i18n \u2260 tradu\u00e7\u00e3o. Tradu\u00e7\u00e3o \u00e9 uma parte da localiza\u00e7\u00e3o (l10n), que \u00e9 o ato de adaptar o conte\u00fado a um idioma, cultura e conven\u00e7\u00f5es espec\u00edficas.</p> Conceito Abrevia\u00e7\u00e3o O que \u00e9 Internacionaliza\u00e7\u00e3o i18n Tornar o software pronto para m\u00faltiplos idiomas. Localiza\u00e7\u00e3o l10n Adaptar conte\u00fado (textos, datas, moedas) a um local espec\u00edfico. Globaliza\u00e7\u00e3o g11n Processo geral de projetar, desenvolver e lan\u00e7ar um produto globalmente. <ul> <li>Acesso global: usu\u00e1rios de diferentes pa\u00edses entendem e usam seu app.</li> <li>Conformidade cultural: s\u00edmbolos, unidades e formatos corretos.</li> <li>Expans\u00e3o de mercado: facilita entrada em novos pa\u00edses.</li> <li>Experi\u00eancia do usu\u00e1rio: o idioma nativo aumenta engajamento.</li> <li>Acessibilidade: mensagens e interfaces culturalmente coerentes.</li> </ul> Locale Data N\u00famero Moeda pt-BR 26/10/2025 1.234,56 R$ 1.234,56 en-US 10/26/2025 1,234.56 $ 1,234.56 fr-FR 26/10/2025 1 234,56 1 234,56 \u20ac"},{"location":"API%27s/finternacionalizacao/#adicionando-a-api-rest","title":"Adicionando a API REST","text":"<p>Primeiro vamos instalar as depend\u00eancias ao projeto.</p> <pre><code>npm install i18n\n</code></pre>"},{"location":"API%27s/finternacionalizacao/#estrutura-de-pastas","title":"Estrutura de pastas","text":"<p>Crie uma pasta <code>locales/</code> com subpastas por idioma e arquivos por namespace.</p> <pre><code>.\n\u251c\u2500 locales/\n\u2502  \u251c\u2500 en.json\n\u2502  \u251c\u2500 pt.json\n\u2502  \u251c\u2500 fr.json\n\u2502  \u2514\u2500 es.json\n</code></pre> <p>Exemplo de conte\u00fado</p> <code>locales/en.json</code><code>locales/pt.json</code><code>locales/fr.json</code><code>locales/es.json</code> <pre><code>{\n  \"ok\": \"ok\",\n  \"SERVICE_NAME\": \"rest\",\n  \"MISSING_FIELDS\": \"username, password, and transaction are required\",\n  \"SOAP_FAILURE\": \"Failed to contact SOAP service\",\n  \"HEALTH\": \"API working perfectly.\"\n}\n</code></pre> <pre><code>{\n  \"ok\": \"ok\",\n  \"SERVICE_NAME\": \"rest\",\n  \"MISSING_FIELDS\": \"username, password e transaction s\u00e3o obrigat\u00f3rios\",\n  \"SOAP_FAILURE\": \"Falha ao contatar servi\u00e7o SOAP\",\n  \"HEALTH\": \"API funcionando perfeitamente.\"\n}\n</code></pre> <pre><code>{\n  \"ok\": \"ok\",\n  \"SERVICE_NAME\": \"rest\",\n  \"MISSING_FIELDS\": \"Nom d'utilisateur, mot de passe et transaction requis\",\n  \"SOAP_FAILURE\": \"\u00c9chec de la connexion au service SOAP\",\n  \"HEALTH\": \"L'API fonctionne parfaitement.\"\n}\n</code></pre> <pre><code>{\n  \"ok\": \"ok\",\n  \"SERVICE_NAME\": \"rest\",\n  \"MISSING_FIELDS\": \"Se requieren nombre de usuario, contrase\u00f1a y transacci\u00f3n\",\n  \"SOAP_FAILURE\": \"No se pudo contactar con el servicio SOAP\",\n  \"HEALTH\": \"API funcionando perfectamente.\"\n}\n</code></pre>"},{"location":"API%27s/finternacionalizacao/#adicionando-a-api-rest_1","title":"Adicionando a API rest","text":"<p>Adicionar o import da biblioteca</p> <pre><code>const i18n = require('i18n');\n</code></pre> <p>Adicionar a configura\u00e7\u00e3o do <code>i18n</code></p> <pre><code>i18n.configure({\n  locales: ['pt', 'en'], // Idiomas suportados\n  defaultLocale: 'pt', // Idioma padr\u00e3o\n  directory: path.join(__dirname, 'locales'), // Pasta onde est\u00e3o os arquivos .json\n  extension: '.json',\n  logDebugFn: function (msg) {\n    console.log('i18n debug:', msg);\n  },\n  autoReload: true, // Recarrega arquivos em desenvolvimento\n  updateFiles: false, // N\u00e3o gera novos arquivos automaticamente\n  syncFiles: true, // Garante que todos os arquivos tenham as mesmas chaves\n  cookie: 'lang', // Nome do cookie que pode ser usado para setar a linguagem\n  queryParameter: 'lang', // Par\u00e2metro de query que pode ser usado para setar linguagem\n});\n\napp.use(i18n.init);\n</code></pre>"},{"location":"API%27s/finternacionalizacao/#healthcheck","title":"healthcheck","text":"<pre><code>+app.get('/health', (req, res) =&gt; {\n  const t = req.t || ((k) =&gt; k);\n  res.setHeader('Content-Language', req.language || 'en');\n  res.json({\n    ok: true,\n    service: req.__('SERVICE_NAME'),\n    message: req.__('MESSAGE'),\n    time: new Date().toISOString()\n  });\n});\n</code></pre>"},{"location":"API%27s/finternacionalizacao/#ordem-de-prioridade","title":"Ordem de prioridade:","text":"<p><code>Content-Language</code> reflete o idioma detectado (por <code>?lang=pt-BR</code> ou header <code>Accept-Language</code>).</p> <ol> <li>Querystring: <code>?lang=pt-BR|en|fr|es</code></li> <li>Header: <code>Accept-Language: pt-BR,pt;q=0.9,en;q=0.8</code></li> <li>Fallback: <code>en</code></li> </ol>"},{"location":"API%27s/finternacionalizacao/#testes","title":"Testes","text":"<p>Alguns testes usando curl</p> <pre><code># Sa\u00fade (fallback: en)\ncurl -s http://localhost:4000/health | jq\n\n# Sa\u00fade em pt-BR (header)\ncurl -s -H \"Accept-Language: pt-BR\" http://localhost:4000/health | jq\n\n# Sa\u00fade em fr (query)\ncurl -s \"http://localhost:4000/health?lang=fr\" | jq\n\n# Valida\u00e7\u00e3o ausente em espanhol\ncurl -s -X POST -H \"Content-Type: application/json\" -H \"Accept-Language: es\" \\\n  -d '{}' http://localhost:4000/api/sign | jq\n</code></pre>"},{"location":"API%27s/finternacionalizacao/#localization","title":"Localization","text":"<p>O jeito mais elegante e eficiente de integrar fun\u00e7\u00f5es de formata\u00e7\u00e3o de data e moeda com o <code>i18n</code> \u00e9 criar um middleware o locale injetado na requisi\u00e7\u00e3o (req.locale) pelo i18n.</p> <pre><code>function mapLocale(i18nLocale) {\n  switch (i18nLocale.toLowerCase()) {\n    case 'pt':\n      return 'pt-BR';\n    case 'en':\n      return 'en-US';\n    default:\n      return 'en-US'; // Fallback\n  }\n}\n\nfunction formatCurrency(amount, i18nLocale, currencyCode) {\n  const locale = mapLocale(i18nLocale);\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currencyCode,\n      currencyDisplay: 'symbol',\n    }).format(amount);\n  } catch (e) {\n    console.error(`Erro ao formatar moeda para locale ${locale}:`, e.message);\n    return `${currencyCode} ${amount}`;\n  }\n}\n\nfunction formatDate(dateValue, i18nLocale, options = {}) {\n  const date = (dateValue instanceof Date) ? dateValue : new Date(dateValue);\n  const locale = mapLocale(i18nLocale);\n\n  const defaultOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    timeZone: 'UTC'\n  };\n\n  const finalOptions = Object.keys(options).length &gt; 0 ? options : defaultOptions;\n\n  try {\n    return new Intl.DateTimeFormat(locale, finalOptions).format(date);\n  } catch (e) {\n    console.error(`Erro ao formatar data para locale ${locale}:`, e.message);\n    return date.toISOString();\n  }\n}\n\nmodule.exports = {\n  formatCurrency,\n  formatDate,\n};\n</code></pre>"},{"location":"API%27s/finternacionalizacao/#adicionar-a-api","title":"Adicionar a API","text":"<pre><code>const { formatCurrency, formatDate } = require('./localeHelpers');\n\nfunction localeMiddleware(req, res, next) {\n  const locale = req.locale;\n  res.locale = {\n    formatCurrency: (amount, currencyCode) =&gt; formatCurrency(amount, locale, currencyCode),\n    formatDate: (dateValue, options) =&gt; formatDate(dateValue, locale, options),\n  };\n  next();\n}\n\napp.use(i18n.init);\napp.use(localeMiddleware);\n</code></pre> <p>Endpoint health atualizado para usar o localization</p> <pre><code>app.get('/health', (req, res) =&gt; {\n  const formattedTime = res.locale.formatDate(new Date(), {\n    dateStyle: 'short',\n    timeStyle: 'medium',\n    timeZone: 'America/Sao_Paulo',\n  });\n\n  res.json({\n    ok: res.__('ok'),\n    service: res.__('SERVICE_NAME'),\n    message: res.__('MESSAGE'),\n    time: formattedTime,\n  });\n});\n</code></pre>"},{"location":"API%27s/gswagger/","title":"Swagger","text":"<p>O Swagger \u00e9 um conjunto de ferramentas e especifica\u00e7\u00f5es abertas voltadas para o desenvolvimento, documenta\u00e7\u00e3o e consumo de APIs RESTful. Ele faz parte do OpenAPI Initiative( especifica\u00e7\u00e3o OpenAPI (OAS) ), um padr\u00e3o mantido pela Linux Foundation, que define uma forma padronizada de descrever APIs em um formato leg\u00edvel por humanos e por m\u00e1quinas.</p> <ul> <li>Swagger UI \u2192 Interface gr\u00e1fica para visualizar e testar endpoints.</li> <li>Swagger Editor \u2192 Editor online/local para escrever a documenta\u00e7\u00e3o.</li> <li>Swagger Codegen \u2192 Gera c\u00f3digo cliente/servidor automaticamente.</li> <li>OpenAPI Specification (OAS) \u2192 O formato (YAML/JSON) que define a API.</li> </ul> <p>Embora algumas bibliotecas como <code>fastapi</code> do python, gera a documenta\u00e7\u00e3o automaticamente, outros frameworks como express precisam da configura\u00e7\u00e3o manual.</p> <ul> <li>Documenta\u00e7\u00e3o autom\u00e1tica: gera p\u00e1ginas interativas de refer\u00eancia para as APIs.</li> <li>Teste interativo: voc\u00ea pode testar endpoints diretamente no navegador.</li> <li>Facilita integra\u00e7\u00e3o: clientes e desenvolvedores entendem rapidamente como usar a API.</li> <li>Gera\u00e7\u00e3o de c\u00f3digo: cria automaticamente stubs de servidor e SDKs de cliente em diversas linguagens (Node.js, Java, Go, Python, etc.).</li> <li>Padr\u00e3o amplamente adotado: compat\u00edvel com ferramentas como Postman, Redoc, FastAPI, Express, NestJS, Spring Boot, etc.</li> </ul> <p>O swagger tamb\u00e9m pode ser utilizado com tokens para autentica\u00e7\u00e3o</p>"},{"location":"API%27s/gswagger/#estrutura","title":"Estrutura","text":"<pre><code>openapi: 3.0.3\ninfo:\n  title: API de Pedidos\n  version: 1.0.0\nservers:\n  - url: https://api.exemplo.com\npaths:\n  /pedidos:\n    get:\n      summary: Lista todos os pedidos\n      tags: [Pedidos]\n      responses:\n        '200':\n          description: Lista retornada\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pedido'\n  /pedidos:\n    post:\n      summary: Cria um novo pedido\n      tags: [Pedidos]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pedido'\n      responses:\n        '201':\n          description: Pedido criado\ncomponents:\n  schemas:\n    Pedido:\n      type: object\n      properties:\n        id:\n          type: integer\n        produto:\n          type: string\n        quantidade:\n          type: integer\n        valor:\n          type: number\n</code></pre>"},{"location":"API%27s/gswagger/#instalacao-com-yaml","title":"Instala\u00e7\u00e3o com Yaml","text":"<p>Uma das formas de trabalhar com o swagger no express \u00e9 utilizando o middleware consumindo um arquivo <code>yaml</code></p> <pre><code>npm install express swagger-ui-express yaml\n\nconst swaggerUi = require('swagger-ui-express');\nconst fs = require('fs');\nconst yaml = require('yaml');\n\nconst app = express();\nconst file = fs.readFileSync('./swagger.yaml', 'utf8');\nconst swaggerDoc = yaml.parse(file);\n\napp.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDoc));\n</code></pre> <p>Depois vamos criar o <code>swagger.yaml</code> que vai conter toda a documenta\u00e7\u00e3o, para visualizar esse arquivo podemos utilizar o Swagger editor.</p> <pre><code>openapi: 3.0.3\ninfo:\n  title: Example Service API\n  version: 1.0.0\n  description: |\n    Documenta\u00e7\u00e3o dos endpoints REST do servi\u00e7o.\n    Inclui **GET /health** e **POST /api/sign**.\n\nservers:\n  - url: http://localhost:3000\n    description: Ambiente local\n\npaths:\n  /health:\n    get:\n      tags: [Health]\n      summary: Verifica\u00e7\u00e3o de sa\u00fade (health check)\n      description: Retorna o status b\u00e1sico do servi\u00e7o e o hor\u00e1rio do servidor.\n      responses:\n        \"200\":\n          description: Sucesso\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthResponse\"\n              examples:\n                exemplo:\n                  value:\n                    ok: \"ok\"\n                    service: \"example-service\"\n                    time: \"2025-10-27T22:00:00.000Z\"\n        \"500\":\n          description: Erro interno\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /api/sign:\n    post:\n      tags: [SOAP Bridge]\n      summary: Assinar transa\u00e7\u00e3o via SOAP\n      description: &gt;\n        Recebe `username`, `password` e `transaction`, constr\u00f3i um envelope SOAP\n        e encaminha ao servi\u00e7o remoto. Retorna o XML da resposta SOAP.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SignRequest\"\n            examples:\n              exemplo:\n                summary: Exemplo de requisi\u00e7\u00e3o\n                value:\n                  username: \"john_doe\"\n                  password: \"123456\"\n                  transaction: \"&lt;transaction&gt;data&lt;/transaction&gt;\"\n      responses:\n        \"200\":\n          description: Resposta XML retornada pelo servi\u00e7o SOAP remoto\n          content:\n            application/xml:\n              schema:\n                type: string\n              examples:\n                exemplo:\n                  value: |\n                    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n                    &lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n                      &lt;soap:Body&gt;\n                        &lt;SignResponse&gt;\n                          &lt;status&gt;OK&lt;/status&gt;\n                          &lt;signature&gt;abc123xyz&lt;/signature&gt;\n                        &lt;/SignResponse&gt;\n                      &lt;/soap:Body&gt;\n                    &lt;/soap:Envelope&gt;\n        \"400\":\n          description: Campos obrigat\u00f3rios ausentes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              examples:\n                missing_fields:\n                  value:\n                    error: \"MISSING_FIELDS\"\n        \"502\":\n          description: Falha ao contatar servi\u00e7o SOAP remoto\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              examples:\n                soap_error:\n                  value:\n                    error: \"Falha ao contatar servi\u00e7o SOAP\"\n                    detail: \"ECONNREFUSED\"\n\ncomponents:\n  schemas:\n    HealthResponse:\n      type: object\n      required: [ok, service, time]\n      properties:\n        ok:\n          type: string\n          example: \"ok\"\n        service:\n          type: string\n          example: \"example-service\"\n        time:\n          type: string\n          format: date-time\n          example: \"2025-10-27T22:00:00.000Z\"\n\n    SignRequest:\n      type: object\n      required: [username, password, transaction]\n      properties:\n        username:\n          type: string\n          example: \"john_doe\"\n        password:\n          type: string\n          example: \"123456\"\n        transaction:\n          type: string\n          description: Conte\u00fado XML ou string com dados da transa\u00e7\u00e3o.\n          example: \"&lt;transaction&gt;...&lt;/transaction&gt;\"\n\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n        detail:\n          type: string\n      example:\n        error: \"MISSING_FIELDS\"\n        detail: \"Campo obrigat\u00f3rio ausente\"\n</code></pre>"},{"location":"API%27s/gswagger/#instalacao-jsdoc","title":"Instala\u00e7\u00e3o JSdoc","text":"<p>Outra op\u00e7\u00e3o \u00e9 atrav\u00e9s do <code>jsdoc</code>, o que pode ser mais verboso. Para isso, instale as bibliotecas necess\u00e1rias</p> <pre><code>npm install swagger-ui-express swagger-jsdoc\n</code></pre> <p>Depois criamos um arquivo para a configura\u00e7\u00e3o do swagger no projeto <code>swaggerConfig.js</code></p> <pre><code>const swaggerJsdoc = require('swagger-jsdoc');\n\nconst options = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'REST/SOAP Signer API',\n      version: '1.0.0',\n      description: 'API de gateway para o servi\u00e7o de assinatura de transa\u00e7\u00f5es SOAP. Documenta\u00e7\u00e3o gerada a partir de coment\u00e1rios JSDoc.',\n      contact: {\n        name: 'Seu Nome ou Equipe',\n        email: 'contato@exemplo.com'\n      }\n    },\n    servers: [\n      {\n        url: `http://localhost:${process.env.PORT || 4000}`,\n        description: 'Servidor Local da API'\n      },\n    ],\n  },\n  apis: ['./*.js'],\n};\n\nconst swaggerSpec = swaggerJsdoc(options);\n\nmodule.exports = swaggerSpec;\n</code></pre> <p>Depois adicione a depend\u00eancia do swagger e o arquivo de configura\u00e7\u00e3o ao app.</p> <pre><code>const swaggerUi = require('swagger-ui-express');\nconst swaggerSpec = require('./swaggerConfig');\n\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec))\nconsole.log(`Docs:         GET http://localhost:${PORT}/api-docs`);\n</code></pre>"},{"location":"API%27s/gswagger/#rotas","title":"Rotas","text":"<p>Para isso pode ser utilizado jsdoc ou um arquivo yaml para cada endpoint. No exemplo abaixo, est\u00e1 a configura\u00e7\u00e3o de <code>health</code> e <code>api/sign</code>.</p> <pre><code>/**\n * @openapi\n * /health:\n *   get:\n *     tags:\n *       - Health\n *     summary: Verifica\u00e7\u00e3o de sa\u00fade (health check)\n *     description: Retorna o status b\u00e1sico do servi\u00e7o e o hor\u00e1rio do servidor.\n *     operationId: getHealth\n *     responses:\n *       200:\n *         description: Sucesso\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/HealthResponse'\n *             examples:\n *               exemplo_en:\n *                 summary: Exemplo (ingl\u00eas)\n *                 value:\n *                   ok: \"ok\"\n *                   service: \"users-service\"\n *                   time: \"2025-10-26T22:00:00.000Z\"\n *               exemplo_pt:\n *                 summary: Exemplo (portugu\u00eas)\n *                 value:\n *                   ok: \"ok\"\n *                   service: \"servico-de-usuarios\"\n *                   time: \"2025-10-26T22:00:00.000Z\"\n *       500:\n *         description: Erro interno inesperado\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\n\n/**\n * @openapi\n * components:\n *   schemas:\n *     HealthResponse:\n *       type: object\n *       required: [ok, service, time]\n *       properties:\n *         ok:\n *           type: string\n *           description: Texto traduzido do identificador i18n 'ok'.\n *           example: \"ok\"\n *         service:\n *           type: string\n *           description: Texto traduzido do identificador i18n 'SERVICE_NAME'.\n *           example: \"users-service\"\n *         time:\n *           type: string\n *           format: date-time\n *           description: Hor\u00e1rio do servidor no formato ISO 8601.\n *           example: \"2025-10-26T22:00:00.000Z\"\n *     Error:\n *       type: object\n *       properties:\n *         message:\n *           type: string\n *         code:\n *           type: string\n */\n</code></pre> <pre><code>// Defini\u00e7\u00e3o de Schemas (Modelos) para reuso na documenta\u00e7\u00e3o.\n// Coloque isso no topo do seu arquivo principal ou em um arquivo separado.\n/**\n * @openapi\n * components:\n * schemas:\n * Transaction:\n * type: object\n * required:\n * - id\n * - payer\n * - payee\n * - amount\n * - currency\n * - description\n * properties:\n * id:\n * type: string\n * description: ID \u00fanico da transa\u00e7\u00e3o.\n * example: 'txn-12345'\n * payer:\n * type: string\n * description: Nome/ID do pagador.\n * example: 'Alice Silva'\n * payee:\n * type: string\n * description: Nome/ID do benefici\u00e1rio.\n * example: 'Bob Santos'\n * amount:\n * type: number\n * format: float\n * description: Valor da transa\u00e7\u00e3o.\n * example: 100.50\n * currency:\n * type: string\n * description: Moeda da transa\u00e7\u00e3o (ex: BRL, USD).\n * example: 'BRL'\n * description:\n * type: string\n * description: Descri\u00e7\u00e3o da transa\u00e7\u00e3o.\n * example: 'Pagamento de fatura'\n */\n\n/**\n * @openapi\n * /api/sign:\n * post:\n * summary: Envia uma transa\u00e7\u00e3o para ser assinada pelo servi\u00e7o SOAP\n * tags:\n * - Transactions\n * requestBody:\n * required: true\n * content:\n * application/json:\n * schema:\n * type: object\n * required:\n * - username\n * - password\n * - transaction\n * properties:\n * username:\n * type: string\n * example: 'signerUser'\n * password:\n * type: string\n * format: password\n * example: 'senhaSecreta'\n * transaction:\n * $ref: '#/components/schemas/Transaction'\n * responses:\n * 200:\n * description: Transa\u00e7\u00e3o enviada com sucesso. Retorna o envelope SOAP de resposta.\n * content:\n * application/xml:\n * schema:\n * type: string\n * example: |\n * &lt;soap:Envelope&gt;...&lt;/soap:Envelope&gt;\n * 400:\n * description: Campos obrigat\u00f3rios ausentes.\n * content:\n * application/json:\n * schema:\n * type: object\n * properties:\n * error:\n * type: string\n * example: 'username, password e transaction s\u00e3o obrigat\u00f3rios'\n * 502:\n * description: Falha ao se comunicar com o servi\u00e7o SOAP.\n * content:\n * application/json:\n * schema:\n * type: object\n * properties:\n * error:\n * type: string\n * example: 'Falha ao contatar servi\u00e7o SOAP'\n * detail:\n * type: string\n * example: 'Detalhe: connect ECONNREFUSED 127.0.0.1:8443'\n */\n</code></pre>"},{"location":"Download/","title":"Arquivos para download","text":"<p>Aqui segue uma lista de projetos para download</p> <ul> <li> <p> Gateway de Pagamentos</p> <p>Esse \"projeto\" simula um gateway de pagamentos utilizando rest, soap e uma interface com react. O <code>Makefile</code> pode ser utilizado para subir a estrutura do projeto. Apenas lembre de gerar os certificados antes!</p> <p> Download</p> </li> <li> <p> Login API</p> <p>Essa API utiliza, Alchemy para ORM, Alembic para migrations, Token JWT e bycript, com middleware para auth, SOLID, Dockerfile, compose e Makefile, Cole\u00e7\u00e3o de requisi\u00e7\u00f5es no postman e testes com pytest</p> <p>Eu esqueci de implementar o bearer no swagger fastapi, e ainda queror melhorar o middleware para tratamento de erros. A tamb\u00e9m n\u00e3o implementei i18n</p> <p> Download</p> </li> </ul>"},{"location":"LaTeX/alatex/","title":"LaTeX","text":"<p>O \\(\\LaTeX{}\\),  que \u00e9 pronunciado \u00ablah-tech\u00bb ou \u00ablay-tech\u00bb \u00e9 um sistema de prepara\u00e7\u00e3o de documentos, ele inclui recursos projetados para a produ\u00e7\u00e3o de documenta\u00e7\u00e3o t\u00e9cnica e cient\u00edfica. O LaTeX \u00e9 o padr\u00e3o de fato para a comunica\u00e7\u00e3o e publica\u00e7\u00e3o de documentos cient\u00edficos.</p> <p>O LaTeX est\u00e1 dispon\u00edvel como software livre, voc\u00ea n\u00e3o precisa pagar pelo seu uso, ou seja, n\u00e3o h\u00e1 taxas de licen\u00e7a, etc. Mas, \u00e9 claro, \u00e9 convidado a apoiar os esfor\u00e7os de manuten\u00e7\u00e3o e desenvolvimento por meio de uma doa\u00e7\u00e3o para o grupo de usu\u00e1rios da TEX.</p> <p>O LaTeX n\u00e3o \u00e9 um editor WYSIWYG(What You See Is What You Get), mas sim um sistema de prepara\u00e7\u00e3o de documentos. O usu\u00e1rio escreve um arquivo de texto simples com comandos de marca\u00e7\u00e3o, e o LaTeX processa esse arquivo, gerando documentos tipograficamente refinados (PDF, DVI, PS).</p>"},{"location":"LaTeX/alatex/#historia","title":"Hist\u00f3ria","text":"<p>O LaTeX foi criado na d\u00e9cada de 1980 por Leslie Lamport, baseado no TeX de Donald Knuth desenvolvido em 1978, ambos recipientes do pr\u00eamio Turing.</p> <p>Enquanto o TeX focava na tipografia de alta qualidade, o LaTeX surgiu para simplificar seu uso, fornecendo macros e comandos de alto n\u00edvel que facilitaram a produ\u00e7\u00e3o de documentos cient\u00edficos e acad\u00eamicos.</p> <p></p> <p>Leslie Lamport</p> <p></p> <p>Donald Knuth</p> <p>A principal motiva\u00e7\u00e3o do LaTeX foi oferecer uma ferramenta que garantisse:</p> <ul> <li>Qualidade tipogr\u00e1fica superior, especialmente em f\u00f3rmulas matem\u00e1ticas.</li> <li>Consist\u00eancia em documentos longos, como teses, artigos e livros.</li> <li>Automa\u00e7\u00e3o de refer\u00eancias, cita\u00e7\u00f5es, sum\u00e1rios e listas de figuras/tabelas.</li> <li>Portabilidade e independ\u00eancia de plataforma.</li> </ul>"},{"location":"LaTeX/alatex/#ferramentas","title":"Ferramentas","text":"<p>Para escrever no LaTeX precisamos de uma distribui\u00e7\u00e3o que \u00e9 umo conjunto de programas, compiladores e pacotes necess\u00e1rios para processar documentos <code>.tex</code> e gerar sa\u00eddas (PDF, DVI, PS).</p> <p>Entre os mais populares est\u00e3o</p> <ul> <li>TeX Live multiplataforma, mais utilizado para escrita acad\u00eamica.</li> <li>MiKTeX popular no Windows, faz download autom\u00e1tico de pacotes que faltam.</li> <li>MacTeX adaptada do TeX Live para macOS, inclui o editor TeXShop.</li> </ul> <p>Para editar documentos LaTeX existem diversas IDE's, como o LaTeX \u00e9 baseado em arquivos de texto, qualquer editor pode ser usado por\u00e9m existem editores especializados que facilitam o processo:</p> <ul> <li>TeXstudio</li> <li>TeXworks</li> <li>Overleaf</li> </ul> <p>E para processar os arquivos <code>.tex</code> precisamos de compiladores como:</p> <ul> <li>pdfLaTeX</li> <li>XeLaTeX</li> <li>LuaLaTeX</li> </ul> <p>\u00c9 importante ressaltar que o desenvolvimento do LaTeX pode ser extendido atrav\u00e9s de pacotes como por exemplo:</p> <ul> <li><code>amsmath</code>, amssymb: suporte avan\u00e7ado a matem\u00e1tica.</li> <li><code>graphicx</code>:  inclus\u00e3o de imagens.</li> <li><code>babel</code>, <code>polyglossia</code>: suporte a m\u00faltiplos idiomas.</li> <li><code>biblatex</code>, <code>natbib</code>: gerenciamento de bibliografias.</li> <li><code>tikz/pgfplots</code>: cria\u00e7\u00e3o de gr\u00e1ficos e diagramas vetoriais.</li> </ul>"},{"location":"LaTeX/alatex/#escrevendo","title":"Escrevendo","text":"<p>O primeiro passo \u00e9 criar um novo projeto de l\u00e1tex. Voc\u00ea pode fazer isso no seu pr\u00f3prio computador criando um novo arquivo .tex ou como alternativa, voc\u00ea pode iniciar um novo projeto no overleaf.</p> <pre><code>\\documentclass{article} % Define a classe do documento\n\\usepackage[utf8]{inputenc} % Codifica\u00e7\u00e3o de caracteres\n\n% This line here is a comment. It will not be typeset in the document.\n\n\\begin{document}\nPrimeiro documento.Este \u00e9 um exemplo simples, sem\nPar\u00e2metros ou pacotes extras inclu\u00eddos.\n\\end{document}\n</code></pre> <p>O exemplo anterior mostrou como o conte\u00fado do documento foi inserido ap\u00f3s o comando \\begin{document}. No entanto, tudo no seu arquivo <code>.tex</code> aparecendo antes desse ponto \u00e9 chamado de pre\u00e2mbulo, que atua como a se\u00e7\u00e3o \"Configura\u00e7\u00e3o\" do documento. Dentro do pre\u00e2mbulo, voc\u00ea define a classe de documento(tipo) juntamente com detalhes como idiomas a serem usados \u200b\u200bao escrever o documento, carregando pacotes que voc\u00ea gostaria de usar e \u00e9 onde voc\u00ea aplica outros tipos de configura\u00e7\u00e3o.</p> <pre><code>\\documentclass[12pt, letterpaper]{article}\n\\usepackage{graphicx}\n</code></pre> <p>Onde <code>\\documentclass[12pt, letterpaper]{article}</code> define a classe geral de documento.Par\u00e2metros adicionais, que devem ser separados por v\u00edrgulas, s\u00e3o inclu\u00eddos entre colchetes ([...]) e usados \u200b\u200bpara configurar esta inst\u00e2ncia da classe do artigo;ou seja, configura\u00e7\u00f5es que desejamos usar para este documento baseado em classe de artigo espec\u00edfico.</p> <p>\u00c9 claro que outros tamanhos de fonte, 9pt, 11pt, 12pt, podem ser usados, mas se nenhum for especificado, o tamanho padr\u00e3o ser\u00e1 10pt. Quanto ao tamanho do papel, outros valores poss\u00edveis s\u00e3o <code>a4paper</code> and <code>legalpaper</code>.</p> <pre>\n    \\documentclass[12pt, letterpaper]{article}\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n        comando         opcional     obrigat\u00f3rio\n  </pre>"},{"location":"LaTeX/alatex/#bold-italics-and-underlining","title":"Bold, italics and underlining","text":"<p>Negrito: em negrito no LaTeX est\u00e1 usando o comando \\textbf{...}. It\u00e1lico: o texto em it\u00e1lico \u00e9 produzido usando o comando \\textit{...}. Subline: para sublinhar o texto, use o comando \\sublinhado{...}.</p> <pre><code>Some of the \\textbf{greatest}\ndiscoveries in \\underline{science}\nwere made by \\textbf{\\textit{accident}}.\n</code></pre>"},{"location":"LaTeX/alatex/#listas","title":"Listas","text":"<p>Podemos utilizar diferentes tipos de lista usando ambientes, que s\u00e3o usados \u200b\u200bpara encapsular o c\u00f3digo do LaTeX necess\u00e1rio para implementar um recurso de digita\u00e7\u00e3o espec\u00edfico.</p> <p>As listas n\u00e3o ordenadas s\u00e3o produzidas pelo ambiente itemize. Cada entrada da lista deve ser precedida pelo comando <code>\\item</code>, como mostrado abaixo:</p> <pre><code>\\documentclass{article}\n\\begin{document}\n\\begin{itemize}\n  \\item The individual entries are indicated with a black dot, a so-called bullet.\n  \\item The text in the entries may be of any length.\n\\end{itemize}\n\\end{document}\n</code></pre> <p>As listas ordenadas usam a mesma sintaxe que as listas n\u00e3o ordenadas, mas s\u00e3o criadas usando o ambiente enumerado:</p> <pre><code>\\documentclass{article}\n\\begin{document}\n\\begin{enumerate}\n  \\item This is the first entry in our list.\n  \\item The list numbers increase with each entry we add.\n\\end{enumerate}\n\\end{document}\n</code></pre>"},{"location":"LaTeX/alatex/#math","title":"Math","text":"<p>Podemos adicionar f\u00f3rmulas e nota\u00e7\u00e3o matem\u00e1tica ao documento utilizando <code>bloco</code> ou <code>inline</code>...</p> <pre><code>\\documentclass[12pt, letterpaper]{article}\n\\begin{document}\n\\begin{math}\nE=mc^2\n\\end{math} is typeset in a paragraph using inline math mode---as is $E=mc^2$, and so too is \\(E=mc^2\\).\n\\end{document}\n</code></pre> <p>Outro exemplo \u00e9 a nota\u00e7\u00e3o simples:</p> <p>A f\u00f3rmula de Bhaskara \u00e9 dada por: [ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} ]</p>"},{"location":"LaTeX/alatex/#resumo-abstract","title":"Resumo Abstract","text":"<p>Os artigos cient\u00edficos geralmente fornecem um resumo que \u00e9 uma breve vis\u00e3o geral/resumo de seus t\u00f3picos principais ou argumentos. O pr\u00f3ximo exemplo demonstra digitando um resumo usando o ambiente abstrato do LaTeX:</p> <pre><code>\\documentclass{article}\n\\begin{document}\n\\begin{abstract}\nThis is a simple paragraph at the beginning of the\ndocument. A brief introduction about the main subject.\n\\end{abstract}\n\\end{document}\n</code></pre>"},{"location":"LaTeX/alatex/#paragrafos-e-nova-linha","title":"Paragr\u00e1fos e nova Linha","text":"<p>Com o resumo em vigor, podemos come\u00e7ar a escrever nosso primeiro par\u00e1grafo. O pr\u00f3ximo exemplo demonstra: - Como um novo par\u00e1grafo \u00e9 criado pressionando a tecla \"Enter\" duas vezes, encerrando a linha atual e inserindo uma linha em branco subsequente; - Como iniciar uma nova linha sem iniciar um novo par\u00e1grafo, inserindo uma quebra de linha manual usando o comando <code>\\\\</code>, que \u00e9 uma barra de barragem dupla;Como alternativa, use o comando <code>\\newline</code>.</p> <pre><code>\\documentclass{article}\n\\begin{document}\n\n\\begin{abstract}\nThis is a simple paragraph at the beginning of the\ndocument. A brief introduction about the main subject.\n\\end{abstract}\n\nAfter our abstract we can begin the first paragraph, then press ``enter'' twice to start the second one.\n\nThis line will start a second paragraph.\n\nI will start the third paragraph and then add \\\\ a manual line break which causes this text to start on a new line but remains part of the same paragraph. Alternatively, I can use the \\verb|\\newline|\\newline command to start a new line, which is also part of the same paragraph.\n\\end{document}\n</code></pre>"},{"location":"LaTeX/alatex/#capitulos-e-sessoes","title":"Cap\u00edtulos e sess\u00f5es","text":"<p>Documentos mais longos, geralmente s\u00e3o particionados em pe\u00e7as, cap\u00edtulos, se\u00e7\u00f5es, subse\u00e7\u00f5es e assim por diante. O LATEX tamb\u00e9m fornece comandos de estrutura de documentos, mas os comandos dispon\u00edveis e suas implementa\u00e7\u00f5es (o que eles fazem), podem depender da classe de documentos que est\u00e1 sendo usada. A t\u00edtulo de exemplo, os documentos criados usando a classe do livro podem ser divididos em pe\u00e7as, cap\u00edtulos, se\u00e7\u00f5es, subse\u00e7\u00f5es e assim por diante, mas a classe de letra n\u00e3o fornece (suporta) quaisquer comandos para fazer isso.</p> <pre><code>\\documentclass{book}\n\\begin{document}\n\n\\chapter{First Chapter}\n\n\\section{Introduction}\n\nThis is the first section.\n\nLorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing\nelit. Etiam  lobortisfacilisis sem.  Nullam nec mi et\nneque pharetra sollicitudin.  Praesent imperdietmi nec ante.\nDonec ullamcorper, felis non sodales...\n\n\\section{Second Section}\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit.\nEtiam lobortis facilisissem.  Nullam nec mi et neque pharetra\nsollicitudin.  Praesent imperdiet mi necante...\n\n\\subsection{First Subsection}\nPraesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...\n\n\\section*{Unnumbered Section}\nLorem ipsum dolor sit amet, consectetuer adipiscing elit.\nEtiam lobortis facilisissem...\n\\end{document}\n</code></pre>"},{"location":"LaTeX/alatex/#templates","title":"Templates","text":"<p>Seguem alguns templates de documento para apresenta\u00e7\u00f5es, confer\u00eancias ou publica\u00e7\u00e3o.</p> <p>Sociedade Brasileira de Computa\u00e7\u00e3o - https://www.overleaf.com/latex/templates/sbc-conferences-template/blbxwjwzdngr</p> <p>MIT Thesis Template - https://www.overleaf.com/latex/templates/mit-thesis-template/sgzcswxftpwx</p> <p>THE LATEX PROJECT. The LaTeX Project \u2014 A document preparation system. Dispon\u00edvel em: https://www.latex-project.org/. Acesso em: 30 ago. 2025.</p> <p>LAMPORT, Leslie. LaTeX: a document preparation system: user\u2019s guide and reference manual. 2. ed. Reading, Massachusetts: Addison-Wesley, 1994.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/","title":"Introdu\u00e7\u00e3o ao Java","text":"<p>A linguagem Java foi criada em 1995 pela equipe da Sun Microsystems, em uma equipe liderada por James Gosling. Seu objetivo inicial era desenvolver aplica\u00e7\u00f5es port\u00e1teis para dispositivos eletr\u00f4nicos, sua principal inova\u00e7\u00e3o foi a portabilidade, o que rapidamente a tornou uma das linguagens mais populares para desenvolvimento de sistemas corporativos, web e m\u00f3veis.</p> <p></p> <p>Em 2009, a Oracle Corporation adquiriu a Sun Microsystems, tornando-se a principal mantenedora da linguagem e de seu ecossistema.</p> <p></p> <p>Slogan hist\u00f3rico: \"Write once, run anywhere\" \u2014 \u201cEscreva uma vez, execute em qualquer lugar\u201d.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#funcionamento-do-java","title":"Funcionamento do Java","text":"<p>O Java \u00e9 uma linguagem compilada e interpretada. O processo de execu\u00e7\u00e3o de um programa Java ocorre em duas etapas principais:</p> <p></p> <ol> <li> <p>Compila\u00e7\u00e3o:    O c\u00f3digo-fonte <code>.java</code> \u00e9 compilado pelo compilador <code>javac</code>, que gera um bytecode armazenado em um arquivo <code>.class</code>.</p> </li> <li> <p>Execu\u00e7\u00e3o:    O bytecode \u00e9 interpretado e executado pela Java Virtual Machine (JVM), tornando o programa independente do sistema operacional.</p> </li> </ol> <p></p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#componentes-principais-do-ecossistema-java","title":"Componentes Principais do Ecossistema Java","text":"<p>O ecossistema Java \u00e9 composto por tr\u00eas partes principais:</p> Componente Descri\u00e7\u00e3o JVM (Java Virtual Machine) Respons\u00e1vel por executar o bytecode. \u00c9 a \u201cm\u00e1quina virtual\u201d que abstrai o hardware e o sistema operacional. JRE (Java Runtime Environment) Inclui a JVM + bibliotecas padr\u00f5es e arquivos necess\u00e1rios para executar aplica\u00e7\u00f5es Java. JDK (Java Development Kit) Inclui o JRE + ferramentas de desenvolvimento (como <code>javac</code>, <code>jar</code>, <code>javadoc</code>). Usado por desenvolvedores."},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#openjdk-e-versoes-atuais","title":"OpenJDK e Vers\u00f5es Atuais","text":"<p>O OpenJDK (Open Java Development Kit) \u00e9 a implementa\u00e7\u00e3o oficial de c\u00f3digo aberto da plataforma Java, mantida pela comunidade e pela Oracle. Ele serve como base para outras distribui\u00e7\u00f5es (como Amazon Corretto, Eclipse Temurin, Azul Zulu, entre outras).</p> <p>A vers\u00e3o OpenJDK 21.0.2 \u00e9 uma das vers\u00f5es LTS (Long-Term Support) mais recentes (lan\u00e7ada em 2024). Ela traz melhorias significativas em:</p> <ul> <li>Desempenho da JVM e do Garbage Collector</li> <li>Recursos de linguagem, como record classes, pattern matching, e sealed classes</li> <li>Seguran\u00e7a e compatibilidade de bibliotecas</li> </ul> <p>LTS (Long-Term Support) significa que a vers\u00e3o recebe atualiza\u00e7\u00f5es e corre\u00e7\u00f5es por um per\u00edodo estendido \u2014 ideal para ambientes de produ\u00e7\u00e3o e ensino.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#hello-world","title":"Hello World","text":"<pre><code>public class OlaMundo {\n    public static void main(String[] args) {\n        System.out.println(\"Ol\u00e1, mundo!\");\n    }\n}\n</code></pre> <p>Ao compilar e executar: <pre><code>javac OlaMundo.java\njava OlaMundo\n</code></pre></p> <p>Sa\u00edda: <pre><code>Ol\u00e1, mundo!\n</code></pre></p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#metodo-main","title":"M\u00e9todo Main","text":"<p>O m\u00e9todo main \u00e9 o ponto de entrada de qualquer aplica\u00e7\u00e3o Java, ou seja, \u00e9 onde a execu\u00e7\u00e3o come\u00e7a. Quando voc\u00ea executa:</p> <pre><code>java NomeDaClasse\n</code></pre> <p>a JVM procura exatamente por esse m\u00e9todo para iniciar o programa.</p> <pre><code>public static void main(String[] args)\n</code></pre> <p>Sendo que...</p> Palavra-chave / elemento Significado <code>public</code> O m\u00e9todo \u00e9 p\u00fablico, ou seja, pode ser acessado por qualquer classe. A JVM precisa conseguir cham\u00e1-lo de fora da classe, ent\u00e3o ele deve ser p\u00fablico. <code>static</code> O m\u00e9todo pertence \u00e0 classe e n\u00e3o a uma inst\u00e2ncia. Isso significa que a JVM pode cham\u00e1-lo sem criar um objeto da classe. <code>void</code> O m\u00e9todo n\u00e3o retorna nenhum valor. Ele apenas executa comandos. <code>main</code> Nome fixo do m\u00e9todo que serve como ponto de entrada da aplica\u00e7\u00e3o Java. \u00c9 obrigat\u00f3rio ter exatamente esse nome (min\u00fasculo). <code>String[] args</code> Par\u00e2metro que recebe argumentos de linha de comando. \u00c9 um vetor de strings passado ao programa na execu\u00e7\u00e3o."},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#codigo","title":"C\u00f3digo:","text":"<pre><code>public class Exemplo {\n    public static void main(String[] args) {\n        System.out.println(\"Primeiro argumento: \" + args[0]);\n    }\n}\n</code></pre> <p>A classe acima mostra uma mensagem concatenando um par\u00e2metro enviado na chamada do programa.</p> <pre><code>javac Exemplo.java\njava Exemplo Ol\u00e1\n</code></pre> <p>Primeiro argumento: Ol\u00e1</p> <p>Onde <code>args[0]</code> cont\u00e9m o primeiro argumento digitado ap\u00f3s o nome da classe.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#variaveis","title":"Vari\u00e1veis","text":"<p>Em Java, vari\u00e1veis s\u00e3o espa\u00e7os na mem\u00f3ria usados para armazenar valores que podem ser manipulados durante a execu\u00e7\u00e3o do programa. Cada vari\u00e1vel possui um tipo, um nome e um valor (que pode mudar ao longo do tempo, dependendo do escopo).</p> <pre><code>int idade = 20;\ndouble salario = 3500.50;\nString nome = \"Maria\";\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#declaracao-de-variaveis","title":"Declara\u00e7\u00e3o de Vari\u00e1veis","text":"<p>A sintaxe b\u00e1sica \u00e9:</p> <pre><code>tipo nomeDaVariavel = valorInicial;\n</code></pre> <p>Exemplo:</p> <pre><code>int numero = 10;\nchar letra = 'A';\nboolean ativo = true;\n</code></pre> <p>Tamb\u00e9m \u00e9 poss\u00edvel declarar sem inicializar:</p> <pre><code>int contador;\ncontador = 1;\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#tipos-de-dados-em-java","title":"Tipos de Dados em Java","text":"<p>Java \u00e9 uma linguagem fortemente tipada, ou seja, toda vari\u00e1vel deve ter um tipo definido.</p> <p>Os tipos de dados se dividem em:</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#tipos-primitivos","title":"Tipos Primitivos","text":"Tipo Tamanho (bits) Valor padr\u00e3o Exemplo <code>byte</code> 8 0 <code>byte idade = 25;</code> <code>short</code> 16 0 <code>short ano = 2025;</code> <code>int</code> 32 0 <code>int numero = 100;</code> <code>long</code> 64 0L <code>long populacao = 8000000L;</code> <code>float</code> 32 0.0f <code>float peso = 75.5f;</code> <code>double</code> 64 0.0d <code>double altura = 1.75;</code> <code>char</code> 16 '\\u0000' <code>char letra = 'A';</code> <code>boolean</code> 1 (te\u00f3rico) false <code>boolean ativo = true;</code> <p>O <code>float</code> deve terminar com <code>f</code> e o <code>long</code> com <code>L</code>.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#tipos-de-referencia","title":"Tipos de Refer\u00eancia","text":"<p>Usados para armazenar objetos ou arrays. Exemplos: <code>String</code>, <code>ArrayList</code>, <code>Scanner</code>, <code>Pessoa</code> (classe criada pelo usu\u00e1rio).</p> <pre><code>String nome = \"Jo\u00e3o\";\nPessoa p = new Pessoa();\nint[] numeros = {1, 2, 3};\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#conversao-de-tipos","title":"Convers\u00e3o de Tipos","text":"<p>A Convers\u00e3o Impl\u00edcita (Widening Casting), ocorre automaticamente quando um tipo menor \u00e9 atribu\u00eddo a um tipo maior.</p> <pre><code>int x = 10;\ndouble y = x; // convers\u00e3o autom\u00e1tica (int \u2192 double)\n</code></pre> <p>J\u00e1 a convers\u00e3o Expl\u00edcita (Narrowing Casting) necessita de casting manual, pois pode haver perda de dados.</p> <pre><code>double valor = 9.78;\nint inteiro = (int) valor; // convers\u00e3o manual\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#constantes","title":"Constantes","text":"<p>Usam o modificador <code>final</code> e n\u00e3o podem ser alteradas ap\u00f3s a inicializa\u00e7\u00e3o.</p> <pre><code>final double PI = 3.14159;\n</code></pre> <p>Por conven\u00e7\u00e3o, constantes s\u00e3o escritas em letras mai\u00fasculas.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#entrada-e-saida-de-dados-em-java","title":"Entrada e Sa\u00edda de Dados em Java","text":"<p>A entrada e sa\u00edda de dados (I/O \u2013 Input/Output) permite intera\u00e7\u00e3o entre o programa, o usu\u00e1rio e o sistema.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#saida-de-dados","title":"Sa\u00edda de Dados","text":"<p>O objeto <code>System.out.</code> \u00e9 usado para exibir informa\u00e7\u00f5es no console.</p> M\u00e9todo Descri\u00e7\u00e3o <code>print()</code> Exibe texto sem quebrar linha <code>println()</code> Exibe texto e adiciona uma quebra de linha <code>printf()</code> Exibe texto formatado, semelhante ao <code>printf</code> da linguagem C <pre><code>public class Saida {\n    public static void main(String[] args) {\n        System.out.print(\"Sem quebra de linha \");\n        System.out.println(\"Com quebra de linha\" + \"5\");\n        System.out.printf(\"Valor formatado: %.2f%n\", 3.14159);\n    }\n}\n</code></pre> <p>Sem quebra de linha Com quebra de linha 5 Valor formatado: 3.14</p> <p>O m\u00e9todo <code>printf()</code> permite formata\u00e7\u00e3o avan\u00e7ada, \u00fatil para exibir n\u00fameros, textos e alinhamentos.</p> <pre><code>double valor = 1234.56789;\nSystem.out.printf(\"Valor com duas casas decimais: %.2f%n\", valor);\nSystem.out.printf(\"Valor em nota\u00e7\u00e3o cient\u00edfica: %e%n\", valor);\n</code></pre> <p>Valor com duas casas decimais: 1234.57 Valor em nota\u00e7\u00e3o cient\u00edfica: 1.234568e+03</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#entrada-de-dados","title":"Entrada de Dados","text":"<p>Para capturar dados digitados pelo usu\u00e1rio, utiliza-se a classe <code>Scanner</code>, que pertence ao pacote <code>java.util</code>.</p> <pre><code>import java.util.Scanner;\n\npublic class Entrada {\n    public static void main(String[] args) {\n        Scanner entrada = new Scanner(System.in);\n\n        System.out.print(\"Digite seu nome: \");\n        String nome = entrada.nextLine();\n\n        System.out.print(\"Digite sua idade: \");\n        int idade = entrada.nextInt();\n\n        System.out.println(\"Ol\u00e1, \" + nome + \"! Voc\u00ea tem \" + idade + \" anos.\");\n\n        entrada.close();\n    }\n}\n</code></pre> <p>Digite seu nome: Ana Digite sua idade: 22 Ol\u00e1, Ana! Voc\u00ea tem 22 anos.</p> M\u00e9todo Tipo de dado Exemplo de uso <code>nextLine()</code> String (linha completa) <code>String nome = entrada.nextLine();</code> <code>next()</code> String (at\u00e9 o espa\u00e7o) <code>String palavra = entrada.next();</code> <code>nextInt()</code> Inteiro <code>int idade = entrada.nextInt();</code> <code>nextDouble()</code> Decimal (double) <code>double salario = entrada.nextDouble();</code> <code>nextBoolean()</code> L\u00f3gico <code>boolean ativo = entrada.nextBoolean();</code> <p>Sempre feche o objeto <code>Scanner</code> com <code>entrada.close()</code> para liberar o recurso de entrada.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#joptionpane","title":"JOptionPane","text":"<p>O <code>JOptionPane</code> \u00e9 uma classe da biblioteca Swing do Java, usada para criar caixas de di\u00e1logo (pop-ups) simples e interativas. Ela permite exibir mensagens, pedir entrada de dados e obter confirma\u00e7\u00f5es de maneira f\u00e1cil e r\u00e1pida.</p> <p>Est\u00e1 localizada no pacote:</p> <pre><code>import javax.swing.JOptionPane;\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#tipos-de-caixas-de-dialogo","title":"Tipos de Caixas de Di\u00e1logo","text":"<p>O <code>JOptionPane</code> possui quatro tipos principais de janelas:</p> <ol> <li>Mensagens (<code>showMessageDialog</code>)</li> <li>Entrada de dados (<code>showInputDialog</code>)</li> <li>Confirma\u00e7\u00e3o (<code>showConfirmDialog</code>)</li> <li>Op\u00e7\u00f5es personalizadas (<code>showOptionDialog</code>)</li> </ol>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#showmessagedialog-exibir-mensagens","title":"<code>showMessageDialog</code> \u2014 Exibir Mensagens","text":"<p>Usado para mostrar uma mensagem informativa ao usu\u00e1rio.</p> <pre><code>import javax.swing.JOptionPane;\n\npublic class ExemploMensagem {\n    public static void main(String[] args) {\n        JOptionPane.showMessageDialog(null, \"Bem-vindo ao sistema!\");\n    }\n}\n</code></pre> <ul> <li>O primeiro par\u00e2metro (<code>null</code>) indica que a janela n\u00e3o est\u00e1 vinculada a nenhum frame principal.</li> <li>O segundo \u00e9 a mensagem que ser\u00e1 exibida.</li> </ul>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#tipos-de-icones-disponiveis","title":"Tipos de \u00edcones dispon\u00edveis:","text":"Tipo Constante Exemplo Informa\u00e7\u00e3o <code>JOptionPane.INFORMATION_MESSAGE</code> \u2139\ufe0f Aviso <code>JOptionPane.WARNING_MESSAGE</code> \u26a0\ufe0f Erro <code>JOptionPane.ERROR_MESSAGE</code> \u274c Pergunta <code>JOptionPane.QUESTION_MESSAGE</code> \u2753 Sem \u00edcone <code>JOptionPane.PLAIN_MESSAGE</code> \u2014 <pre><code>JOptionPane.showMessageDialog(null, \"Opera\u00e7\u00e3o realizada com sucesso!\", \"Sucesso\", JOptionPane.INFORMATION_MESSAGE);\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#showinputdialog-entrada-de-dados","title":"<code>showInputDialog</code> \u2014 Entrada de Dados","text":"<p>Permite coletar uma entrada do usu\u00e1rio por meio de um campo de texto.</p> <pre><code>String nome = JOptionPane.showInputDialog(\"Digite seu nome:\");\nJOptionPane.showMessageDialog(null, \"Ol\u00e1, \" + nome + \"!\");\n</code></pre> <p>Voc\u00ea tamb\u00e9m pode solicitar n\u00fameros, convertendo o texto:</p> <pre><code>String idadeStr = JOptionPane.showInputDialog(\"Digite sua idade:\");\nint idade = Integer.parseInt(idadeStr);\nJOptionPane.showMessageDialog(null, \"Voc\u00ea tem \" + idade + \" anos.\");\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#showconfirmdialog-confirmacoes","title":"<code>showConfirmDialog</code> \u2014 Confirma\u00e7\u00f5es","text":"<p>Usado para perguntar ao usu\u00e1rio sim/n\u00e3o/cancelar e obter o resultado.</p> <pre><code>int resposta = JOptionPane.showConfirmDialog(null, \"Deseja continuar?\");\n\nif (resposta == JOptionPane.YES_OPTION) {\n    JOptionPane.showMessageDialog(null, \"Voc\u00ea escolheu SIM.\");\n} else if (resposta == JOptionPane.NO_OPTION) {\n    JOptionPane.showMessageDialog(null, \"Voc\u00ea escolheu N\u00c3O.\");\n} else {\n    JOptionPane.showMessageDialog(null, \"Opera\u00e7\u00e3o cancelada.\");\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#retornos-possiveis","title":"Retornos poss\u00edveis","text":"Constante Valor Significado <code>JOptionPane.YES_OPTION</code> 0 Usu\u00e1rio clicou Sim <code>JOptionPane.NO_OPTION</code> 1 Usu\u00e1rio clicou N\u00e3o <code>JOptionPane.CANCEL_OPTION</code> 2 Usu\u00e1rio clicou Cancelar <code>JOptionPane.CLOSED_OPTION</code> -1 Usu\u00e1rio fechou a janela"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#showoptiondialog-opcoes-personalizadas","title":"<code>showOptionDialog</code> \u2014 Op\u00e7\u00f5es Personalizadas","text":"<p>Permite criar uma janela com bot\u00f5es personalizados.</p> <pre><code>Object[] opcoes = {\"Salvar\", \"N\u00e3o salvar\", \"Cancelar\"};\n\nint escolha = JOptionPane.showOptionDialog(\n    null,\n    \"Deseja salvar as altera\u00e7\u00f5es?\",\n    \"Confirma\u00e7\u00e3o\",\n    JOptionPane.YES_NO_CANCEL_OPTION,\n    JOptionPane.QUESTION_MESSAGE,\n    null,\n    opcoes,\n    opcoes[0]\n);\n\nJOptionPane.showMessageDialog(null, \"Voc\u00ea escolheu: \" + opcoes[escolha]);\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>import javax.swing.JOptionPane;\n\npublic class SistemaLogin {\n    public static void main(String[] args) {\n        String usuario = JOptionPane.showInputDialog(\"Usu\u00e1rio:\");\n        String senha = JOptionPane.showInputDialog(\"Senha:\");\n\n        if (usuario.equals(\"admin\") &amp;&amp; senha.equals(\"1234\")) {\n            JOptionPane.showMessageDialog(null, \"Acesso permitido!\", \"Login\", JOptionPane.INFORMATION_MESSAGE);\n        } else {\n            JOptionPane.showMessageDialog(null, \"Usu\u00e1rio ou senha inv\u00e1lidos!\", \"Erro\", JOptionPane.ERROR_MESSAGE);\n        }\n    }\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<p>Operadores l\u00f3gicos s\u00e3o utilizados para comparar valores de vari\u00e1veis.</p> Operador Nome Exemplo Descri\u00e7\u00e3o <code>&amp;&amp;</code> E l\u00f3gico (AND) <code>(a &gt; 0 &amp;&amp; b &lt; 10)</code> Retorna <code>true</code> somente se ambas as express\u00f5es forem verdadeiras. <code>\\|\\|</code> OU l\u00f3gico (OR) <code>(x == 5 \\|\\| y == 10)</code> Retorna <code>true</code> se pelo menos uma das express\u00f5es for verdadeira. <code>!</code> N\u00c3O l\u00f3gico (NOT) <code>!(idade &gt; 18)</code> Inverte o valor l\u00f3gico da express\u00e3o. Se for <code>true</code>, torna-se <code>false</code>, e vice-versa. <pre><code>public class OperadoresLogicos {\n    public static void main(String[] args) {\n        int idade = 20;\n        boolean possuiCarteira = true;\n\n        if (idade &gt;= 18 &amp;&amp; possuiCarteira) {\n            System.out.println(\"Pode dirigir!\");\n        } else {\n            System.out.println(\"N\u00e3o pode dirigir!\");\n        }\n    }\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#estruturas-condicionais","title":"Estruturas Condicionais","text":"<p>As estruturas condicionais na programa\u00e7\u00e3o visam oferecer ao programador maneiras de tomar decis\u00f5es dentro de um programa, executando diferentes blocos de c\u00f3digo com base em condi\u00e7\u00f5es espec\u00edficas.</p> <p>Elas permitem que o fluxo de execu\u00e7\u00e3o do programa seja alterado de acordo com a avalia\u00e7\u00e3o de condi\u00e7\u00f5es l\u00f3gicas, cujo valor poder ser verdadeiro ou falso, a depender do estado da execu\u00e7\u00e3o.</p> <p>Condi\u00e7\u00f5es L\u00f3gicas</p> <p>Uma condi\u00e7\u00e3o l\u00f3gica \u00e9 uma express\u00e3o cujo resultado de sua avalia\u00e7\u00e3o ser\u00e1 verdadeiro (True) ou falso (False). Utilizam-se operadores de compara\u00e7\u00e3o e operadores l\u00f3gicos na composi\u00e7\u00e3o das express\u00f5es.</p> <p></p> <p></p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#if-e-else","title":"<code>if</code> e <code>else</code>","text":"<p>O comando condicional mais b\u00e1sico em Java \u00e9 o if, que permite verificar se uma condi\u00e7\u00e3o l\u00f3gica \u00e9 verdadeira e ent\u00e3o executar um bloco de c\u00f3digo associado a ela.</p> <pre><code>if (condicao) {\n    // bloco executado se a condi\u00e7\u00e3o for verdadeira\n} else {\n    // bloco executado se a condi\u00e7\u00e3o for falsa\n}\n</code></pre> <p>Ao utilizar o comando o if, temos a disposi\u00e7\u00e3o o else, utilizado para executar um bloco de c\u00f3digo quando a condi\u00e7\u00e3o especificada N\u00c3O \u00e9 verdadeira.</p> <pre><code>int nota = 85;\n\nif (nota &gt;= 90) {\n    System.out.println(\"A\");\n} else if (nota &gt;= 80) {\n    System.out.println(\"B\");\n} else if (nota &gt;= 70) {\n    System.out.println(\"C\");\n} else {\n    System.out.println(\"D\");\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#switch","title":"<code>switch</code>","text":"<p>O <code>switch</code> \u00e9 uma estrutura usada para testar o valor exato de uma vari\u00e1vel.</p> <pre><code>int opcao = 2;\n\nswitch (opcao) {\n    case 1:\n        System.out.println(\"Op\u00e7\u00e3o 1 selecionada\");\n        break;\n    case 2:\n        System.out.println(\"Op\u00e7\u00e3o 2 selecionada\");\n        break;\n    case 3:\n        System.out.println(\"Op\u00e7\u00e3o 3 selecionada\");\n        break;\n    default:\n        System.out.println(\"Op\u00e7\u00e3o inv\u00e1lida\");\n        break;\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#estruturas-de-repeticao","title":"Estruturas de Repeti\u00e7\u00e3o","text":"<p>La\u00e7os de repeti\u00e7\u00e3o s\u00e3o estruturas de controle que permitem criar itera\u00e7\u00f5es, ou seja, repeti\u00e7\u00e3o de uma ou mais intru\u00e7\u00f5es.</p> <p>As estruturas de repeti\u00e7\u00e3o (ou la\u00e7os, ou loops) servem para executar um bloco de c\u00f3digo v\u00e1rias vezes, sem que voc\u00ea precise repetir o c\u00f3digo manualmente.</p> <p>Imagine que voc\u00ea precisa imprimir \u201cOl\u00e1!\u201d 10 vezes. Em vez de escrever print(\"Ol\u00e1!\") dez vezes, voc\u00ea usa um loop para automatizar isso.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#while","title":"<code>while</code>","text":"<p>Repete enquanto a condi\u00e7\u00e3o for verdadeira.</p> <pre><code>int contador = 1;\n\nwhile (contador &lt;= 5) {\n    System.out.println(\"Contagem: \" + contador);\n    contador++;\n}\n</code></pre> <p>Importante</p> <p>Cuidado com loops infinitos! Se a condi\u00e7\u00e3o nunca se tornar falsa, o programa n\u00e3o terminar\u00e1.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#do-while","title":"<code>do... while</code>","text":"<p>Semelhante ao <code>while</code>, mas executa pelo menos uma vez, pois a condi\u00e7\u00e3o \u00e9 testada ap\u00f3s o bloco.</p> <pre><code>int numero = 1;\n\ndo {\n    System.out.println(\"N\u00famero: \" + numero);\n    numero++;\n} while (numero &lt;= 3);\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#for","title":"<code>for</code>","text":"<p>Usado quando se conhece previamente o n\u00famero de repeti\u00e7\u00f5es.</p> <pre><code>for (int i = 0; i &lt; 5; i++) {\n    System.out.println(\"i = \" + i);\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#for-each","title":"<code>for-each</code>","text":"<p>Usado para percorrer cole\u00e7\u00f5es ou arrays.</p> <pre><code>String[] nomes = {\"Ana\", \"Bruno\", \"Carlos\"};\n\nfor (String nome : nomes) {\n    System.out.println(\"Nome: \" + nome);\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#break","title":"<code>break</code>","text":"<p>Interrompe a execu\u00e7\u00e3o do loop.</p> <pre><code>for (int i = 1; i &lt;= 10; i++) {\n    if (i == 5) break;\n    System.out.println(i);\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/a-java/#continue","title":"<code>continue</code>","text":"<p>Pula a itera\u00e7\u00e3o atual e vai para a pr\u00f3xima.</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) continue;\n    System.out.println(i);\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/","title":"B java","text":""},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#identidade-de-objetos-equals-e-hashcode","title":"Identidade de Objetos (<code>equals</code> e <code>hashCode</code>)","text":"<p>Em Programa\u00e7\u00e3o Orientada a Objetos (POO), cada objeto \u00e9 uma inst\u00e2ncia \u00fanica de uma classe. Mesmo que dois objetos possuam os mesmos valores em seus atributos, eles podem representar entidades diferentes na mem\u00f3ria.</p> <p>A identidade de objetos \u00e9 o conceito que distingue se duas refer\u00eancias apontam para o mesmo objeto (mesma posi\u00e7\u00e3o de mem\u00f3ria) ou apenas para objetos equivalentes em conte\u00fado.</p> <p>Em Java, isso \u00e9 tratado principalmente por dois m\u00e9todos herdados da classe Object:</p> <ul> <li><code>equals(Object obj)</code></li> <li><code>hashCode()</code></li> </ul>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#o-metodo-equals","title":"O m\u00e9todo <code>equals()</code>","text":"<p>O m\u00e9todo <code>equals()</code> \u00e9 utilizado para comparar o conte\u00fado l\u00f3gico de dois objetos. Por padr\u00e3o, o m\u00e9todo <code>equals()</code> da classe compara refer\u00eancias de mem\u00f3ria.</p> <p><pre><code>Conta c1 = new Conta(\"001\", \"12345-6\");\nConta c2 = new Conta(\"001\", \"12345-6\");\n\nSystem.out.println(c1 == c2);       // false (refer\u00eancias diferentes)\nSystem.out.println(c1.equals(c2));  // false (ainda compara refer\u00eancias, se n\u00e3o for sobrescrito)\n</code></pre> Nesse caso, c1 e c2 possuem o mesmo conte\u00fado, mas s\u00e3o objetos diferentes na mem\u00f3ria. Para que equals() considere o conte\u00fado, precisamos sobrescrev\u00ea-lo.</p> <pre><code>@Override\npublic boolean equals(Object obj) {\n    if (this == obj)\n        return true;\n    if (obj == null || getClass() != obj.getClass())\n        return false;\n    Conta conta = (Conta) obj;\n    return agencia.equals(conta.agencia) &amp;&amp; numero.equals(conta.numero);\n}\n</code></pre> <p>Agora, o m\u00e9todo compara os atributos agencia e n\u00famero, ou seja, o conte\u00fado l\u00f3gico que define a igualdade de duas contas.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#o-metodo-hashcode","title":"O m\u00e9todo <code>hashCode()</code>","text":"<p>O m\u00e9todo hashCode() retorna um inteiro que representa o c\u00f3digo hash do objeto. Esse c\u00f3digo \u00e9 usado por estruturas de dados baseadas em hash, como:</p> <ul> <li>HashSet</li> <li>HashMap</li> <li>HashTable</li> </ul> <p>Essas cole\u00e7\u00f5es utilizam o valor de hashCode() para organizar e localizar rapidamente objetos. Quando equals() \u00e9 sobrescrito, hashCode() tamb\u00e9m deve ser sobrescrito. Isso \u00e9 obrigat\u00f3rio para manter o contrato de igualdade entre objetos em cole\u00e7\u00f5es baseadas em hash.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#classe-conta","title":"Classe Conta","text":"<pre><code>public class Conta {\n    private String agencia;\n    private String numero;\n    private double saldo;\n\n    public Conta(String agencia, String numero, double saldo) {\n        this.agencia = agencia;\n        this.numero = numero;\n        this.saldo = saldo;\n    }\n\n    public String getNumero() { return numero; }\n    public void setSaldo(double saldo) { this.saldo = saldo; }\n\n    @Override\n    public String toString() {\n        return String.format(\"Conta [Ag\u00eancia=%s, N\u00famero=%s, Saldo=R$ %.2f]\",\n                             agencia, numero, saldo);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        Conta conta = (Conta) obj;\n        return numero.equals(conta.numero) &amp;&amp; agencia.equals(conta.agencia);\n    }\n\n    @Override\n    public int hashCode() {\n        return java.util.Objects.hash(agencia, numero);\n    }\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#substituicao-de-tostring","title":"Substitui\u00e7\u00e3o de <code>toString()</code>","text":"<p>O m\u00e9todo <code>toString()</code> \u00e9 um dos m\u00e9todos mais importantes herdados da classe <code>Object</code> em Java. Ele \u00e9 utilizado para obter uma representa\u00e7\u00e3o textual de um objeto, geralmente com o objetivo de exibir informa\u00e7\u00f5es de forma leg\u00edvel ao usu\u00e1rio, registrar logs ou depurar o c\u00f3digo.</p> <p>A implementa\u00e7\u00e3o padr\u00e3o de <code>toString()</code> na classe Object retorna uma string com <code>nomeClasse@codigoHexadecimal</code>.</p> <pre><code>Conta c1 = new Conta(\"001\", \"12345-6\");\nSystem.out.println(c1.toString());\n</code></pre> <p>Conta@5e2de80c</p> <p>Para tornar a sa\u00edda mais significativa, \u00e9 recomendado sobrescrever o m\u00e9todo <code>toString()</code> em suas classes.</p> <p>A sobrescrita deve retornar uma representa\u00e7\u00e3o textual contendo os principais atributos do objeto, de forma leg\u00edvel e contextualizada.</p> <pre><code>public class Conta {\n    private String agencia;\n    private String numero;\n    private double saldo;\n\n    public Conta(String agencia, String numero, double saldo) {\n        this.agencia = agencia;\n        this.numero = numero;\n        this.saldo = saldo;\n    }\n\n    @Override\n    public String toString() {\n        return \"Conta [agencia=\" + agencia + \", numero=\" + numero + \", saldo=\" + saldo + \"]\";\n    }\n}\n</code></pre> <p>A classe acima funciona da seguinte forma:</p> <pre><code>Conta c1 = new Conta(\"001\", \"12345-6\", 2500.00);\nSystem.out.println(c1.toString());\n</code></pre> <p>Conta [agencia=001, numero=12345-6, saldo=2500.0]</p> <p>Tente tamb\u00e9m utilizando <code>String.format</code></p> <pre><code>@Override\npublic String toString() {\n    return String.format(\"Conta: Ag\u00eancia %s | N\u00famero %s | Saldo: R$ %.2f\",\n                          agencia, numero, saldo);\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#colecoes-de-objetos","title":"Cole\u00e7\u00f5es de objetos","text":"<p>Em aplica\u00e7\u00f5es orientadas a objetos, \u00e9 comum precisar manter v\u00e1rios objetos do mesmo tipo, por exemplo, v\u00e1rias contas banc\u00e1rias, produtos, alunos, ou clientes. Para isso, o Java oferece a API de Collections, que cont\u00e9m classes e interfaces para manipula\u00e7\u00e3o de conjuntos din\u00e2micos de dados.</p> <p>A classe mais utilizada \u00e9 ArrayList, que faz parte do pacote java.util.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#arraylist","title":"ArrayList","text":"<p>O ArrayList \u00e9 uma lista din\u00e2mica que armazena objetos de forma sequencial, permitindo inserir, remover, acessar, alterar e percorrer elementos da lista.</p> <p>Ao contr\u00e1rio de um array tradicional, o ArrayList ajusta automaticamente o tamanho conforme novos elementos s\u00e3o adicionados facilitando opera\u00e7\u00f5es de busca, filtragem e itera\u00e7\u00e3o.</p> <pre><code>import java.util.ArrayList;\n\nArrayList&lt;Conta&gt; contas = new ArrayList&lt;&gt;();\n</code></pre> <p>Tip</p> <p>A sintaxe  \u00e9 um par\u00e2metro gen\u00e9rico, garantindo que apenas objetos Conta possam ser inseridos na lista."},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#incluir-objetos","title":"Incluir objetos","text":"<p>Para adicionar um objeto \u00e0 lista, utilizamos o m\u00e9todo add().</p> <pre><code>Conta c1 = new Conta(\"001\", \"12345-6\", 3500.00);\ncontas.add(c1);\n\ncontas.add(new Conta(\"001\", \"65432-1\", 1200.00));\n</code></pre> <p>Tamb\u00e9m \u00e9 comum implementar um m\u00e9todo auxiliar que encapsula essa inclus\u00e3o:</p> <pre><code>public void incluirConta(Conta conta) {\n    contas.add(conta);\n    System.out.println(\"Conta adicionada com sucesso!\");\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#listar-objetos","title":"Listar objetos","text":"<p>Para exibir todos os elementos, utiliza-se o loop for-each, que percorre toda a lista.</p> <pre><code>for (Conta c : contas) {\n    System.out.println(c);\n}\n</code></pre> <p>Se a classe <code>Conta</code> tiver o m\u00e9todo <code>toString()</code> sobrescrito... ele ser\u00e1 exibido de forma autom\u00e1tica.</p>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#remover-objetos","title":"Remover objetos","text":"<p>Podemos remover um objeto de uma lista utilizando seu \u00edndice ou removendo o objeto.</p> <pre><code>contas.remove(0); // remove o primeiro elemento da lista\n</code></pre> <p>Para que a remo\u00e7\u00e3o por objeto funcione corretamente, \u00e9 necess\u00e1rio que a classe Conta tenha os m\u00e9todos equals() e hashCode() sobrescritos.</p> <pre><code>Conta c = new Conta(\"001\", \"65432-1\", 1200.00);\ncontas.remove(c);\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#alterar-objetos","title":"Alterar objetos","text":"<p>Para modificar um objeto armazenado, primeiro localizamos sua posi\u00e7\u00e3o (\u00edndice) e depois usamos o m\u00e9todo <code>set()</code>.</p> <pre><code>Conta c = contas.get(1);  // obt\u00e9m o objeto no \u00edndice 1\nc.setSaldo(5000.00);      // altera um atributo\ncontas.set(1, c);         // atualiza o objeto na lista\n</code></pre> <p>Ou, usando um loop para localizar uma conta espec\u00edfica:</p> <pre><code>for (Conta c : contas) {\n    if (c.getNumero().equals(\"12345-6\")) {\n        c.setSaldo(7000.00);\n        System.out.println(\"Saldo atualizado com sucesso!\");\n        break;\n    }\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#exemplo-classe-banco","title":"Exemplo classe Banco","text":"<pre><code>import java.util.ArrayList;\n\npublic class Banco {\n    private ArrayList&lt;Conta&gt; contas = new ArrayList&lt;&gt;();\n\n    public void incluir(Conta c) {\n        contas.add(c);\n        System.out.println(\"Conta inclu\u00edda!\");\n    }\n\n    public void listar() {\n        for (Conta c : contas) {\n            System.out.println(c);\n        }\n    }\n\n    public void excluir(String numero) {\n        Conta encontrada = null;\n        for (Conta c : contas) {\n            if (c.getNumero().equals(numero)) {\n                encontrada = c;\n                break;\n            }\n        }\n        if (encontrada != null) {\n            contas.remove(encontrada);\n            System.out.println(\"Conta removida!\");\n        } else {\n            System.out.println(\"Conta n\u00e3o encontrada!\");\n        }\n    }\n\n    public void alterar(String numero, double novoSaldo) {\n        for (Conta c : contas) {\n            if (c.getNumero().equals(numero)) {\n                c.setSaldo(novoSaldo);\n                System.out.println(\"Saldo alterado!\");\n                return;\n            }\n        }\n        System.out.println(\"Conta n\u00e3o encontrada!\");\n    }\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#classe-main","title":"Classe main","text":"<pre><code>public class TesteBanco {\n    public static void main(String[] args) {\n        Banco banco = new Banco();\n        banco.incluir(new Conta(\"001\", \"12345-6\", 2500.0));\n        banco.incluir(new Conta(\"001\", \"65432-1\", 1000.0));\n\n        System.out.println(\"Listando contas:\");\n        banco.listar();\n\n        banco.alterar(\"12345-6\", 5000.0);\n        banco.excluir(\"65432-1\");\n\n        System.out.println(\"Ap\u00f3s altera\u00e7\u00f5es:\");\n        banco.listar();\n    }\n}\n</code></pre>"},{"location":"Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos/b-java/#diagrama-uml","title":"Diagrama UML","text":"<pre><code>classDiagram\n    class Conta {\n        -String agencia\n        -String numero\n        -double saldo\n        +Conta(String, String, double)\n        +getNumero() String\n        +setSaldo(double)\n        +toString() String\n        +equals(Object) boolean\n        +hashCode() int\n    }\n\n    class Banco {\n        -ArrayList&lt;Conta&gt; contas\n        +incluir(Conta)\n        +listar()\n        +excluir(String)\n        +alterar(String, double)\n    }\n\n    Banco --&gt; Conta</code></pre>"},{"location":"Python/python_1/","title":"Linguagem de Programa\u00e7\u00e3o Python","text":"<p>Python \u00e9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, interpretada, de prop\u00f3sito geral e com forte \u00eanfase na legibilidade do c\u00f3digo.</p> <p>\u00c9 uma das linguagens mais populares do mundo, usada em \u00e1reas como desenvolvimento web, automa\u00e7\u00e3o, an\u00e1lise de dados, intelig\u00eancia artificial, ci\u00eancia de dados, computa\u00e7\u00e3o cient\u00edfica e ensino de programa\u00e7\u00e3o.</p> <ul> <li> <p>Sintaxe limpa e leg\u00edvel: o uso de indenta\u00e7\u00e3o (espa\u00e7os) define blocos de c\u00f3digo ao inv\u00e9s de chaves ou palavras-chave, o que torna o c\u00f3digo mais leg\u00edvel.</p> </li> <li> <p>Multiparadigma: suporta programa\u00e7\u00e3o imperativa, orientada a objetos e funcional.</p> </li> <li>Tipagem din\u00e2mica e forte: as vari\u00e1veis n\u00e3o precisam de declara\u00e7\u00e3o de tipo, mas os tipos s\u00e3o respeitados em tempo de execu\u00e7\u00e3o.</li> <li>Grande biblioteca padr\u00e3o: inclui m\u00f3dulos para lidar com arquivos, express\u00f5es regulares, protocolos de rede, JSON, datas, entre outros.</li> <li>Grande ecossistema de pacotes: com ferramentas como pip e o reposit\u00f3rio PyPI, \u00e9 f\u00e1cil instalar bibliotecas para quase qualquer necessidade, como NumPy, pandas, Flask, TensorFlow, etc.</li> <li>Portabilidade: programas em Python rodam em m\u00faltiplas plataformas com pouca ou nenhuma modifica\u00e7\u00e3o.</li> <li>Interatividade: \u00e9 poss\u00edvel usar o interpretador de forma interativa (REPL) facilitando testes e aprendizado.</li> </ul> <p> </p> <p>Guido van Rossum(Haarlem, 31 de janeiro de 1956) \u00e9 um matem\u00e1tico e programador de computadores holand\u00eas, mais conhecido por ser o autor da linguagem de programa\u00e7\u00e3o Python. Guido Van Rossum publicou a primeira vers\u00e3o do c\u00f3digo Python (vers\u00e3o 0.9.0) em 1991. Vers\u00e3o 2.0 em 2000 e 3.0 em 2008.</p> <p>Na comunidade Python, ele \u00e9 conhecido como Benevolent Dictator for Life (BDFL), o que significa que ele continua a supervisionar o processo de desenvolvimento do Python, tomando decis\u00f5es quando necess\u00e1rio.</p> <p>Entretanto, em julho de 2018, ele anunciou que estaria se afastando desta fun\u00e7\u00e3o.</p> <p>Zen of Python</p> <p>O Document\u00e1rio Python: The Documentary | An origin story pelo canal CultRepo conta parte da hist\u00f3ria da cria\u00e7\u00e3o do Python e de seu desenvolvimento.</p> <p>Na documenta\u00e7\u00e3o oficial do Python voc\u00ea encontra o material abordado em nossas aulas.</p>"},{"location":"Python/python_2/","title":"Instrumentaliza\u00e7\u00e3o","text":"<p>O Python pode ser utilizado com diversos sistemas operacionais e arquiteturas. Fa\u00e7a o download em Python.org e siga o passo a passo de acordo com o seu sistema operacional.</p> <p>Um ger\u00eanciador de runtimes como asdf ou mise pode facilitar a utiliza\u00e7\u00e3o de diferentes vers\u00f5es.</p> <p>Se a instala\u00e7\u00e3o finalizou corretamente ao utilizar o comando:</p> <pre><code>python --version\n</code></pre> <p>Deve exibir como sa\u00edda a vers\u00e3o instalada do python.</p>"},{"location":"Python/python_2/#console-python-repl","title":"Console Python (REPL)","text":"<p>No python temos um ferramenta chamada terminal interativo, tamb\u00e9m chamado de REPL(Read, Evaluate, Print, Loop)</p> <p>O console interativo do Python pode ser acessado com: <pre><code>python\n</code></pre> No console, \u00e9 poss\u00edvel testar comandos rapidamente: <pre><code>&gt;&gt;&gt; print(\"Ol\u00e1, Mundo!\")\nOl\u00e1, Mundo!\n</code></pre></p> <p>Voc\u00ea pode usar o comando <code>exit</code> para sair do REPL.</p>"},{"location":"Python/python_2/#visual-studio-code","title":"Visual Studio Code","text":"<p>O Visual Studio Code \u00e9 um Ambiente de Desenvolvimento Integrado(Integrated Development Environment - IDE) da Micrsoft que em partes \u00e9 open source.</p> <p>\u00c9 a ide mais utilizada no mundo.</p> <p>Com o VScode instalado, adicione a extens\u00e3o do Python no VS Code</p> <ul> <li>V\u00e1 em Extens\u00f5es (Ctrl+Shift+X).</li> <li>Busque por Python (desenvolvida pela Microsoft) e instale.</li> </ul> <p></p>"},{"location":"Python/python_2/#venv","title":"VENV","text":"<p>O <code>venv</code>(virtual environment) \u00e9 o m\u00f3dulo padr\u00e3o do Python (desde a vers\u00e3o 3.3) para criar ambientes virtuais isolados.</p> <p>Ele permite que voc\u00ea tenha um ambiente Python separado para cada projeto, com suas pr\u00f3prias bibliotecas e depend\u00eancias.</p> <p>Para criar o ambiente em um projeto digite no terminal, dentro da pasta do seu projeto:</p> <pre><code>python -m venv venv\n</code></pre> <p>Com a pasta criada precisamos ativar esse venv</p> <ul> <li> <p>Windows: <pre><code>.\\venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Linux/macOS: <pre><code>source venv/bin/activate\n</code></pre></p> </li> </ul> <p>Quando ativado, voc\u00ea ver\u00e1 algo assim no terminal: <pre><code>(venv) C:\\Users\\seu-usuario\\meu-projeto&gt;\n</code></pre></p> <p>No VScode voc\u00ea precisa selecionar o interpretador Python. Pressione <code>Ctrl+Shift+P</code> para abrir a paleta de comandos.</p> <p>Depois digite <code>\"Python: Select Interpreter\".</code></p> <p></p> <p>(deve mostrar <code>./venv/bin/python</code> ou <code>.\\venv\\Scripts\\python.exe</code>)</p>"},{"location":"Python/python_3/","title":"Python","text":"<p>Ao escrever c\u00f3digo em python podemos executar esse c\u00f3digo de algumas formas. A mais comum \u00e9 criar um arquivo <code>.py</code> por exemplo <code>hello.py</code> e no terminal executar o comando:</p> <pre><code>python hello.py\n</code></pre> <p>Quando voc\u00ea executa esse comando, voc\u00ea est\u00e1 instruindo o interpretador Python a:</p> <ul> <li>Carregar o arquivo hello.py</li> <li>Interpretar e executar linha por linha o conte\u00fado desse arquivo</li> <li>Exibir no terminal qualquer sa\u00edda gerada (como chamadas print() ou mensagens de erro)</li> </ul>"},{"location":"Python/python_3/#declaracao-de-variaveis","title":"Declara\u00e7\u00e3o de Vari\u00e1veis","text":"<p>Em Python, as vari\u00e1veis s\u00e3o utilizadas para armazenar valores e s\u00e3o declaradas atribuindo um valor a um nome espec\u00edfico. Ao contr\u00e1rio de outras linguagens, Python n\u00e3o exige a declara\u00e7\u00e3o expl\u00edcita de tipos de dados, pois opera sob o princ\u00edpio da tipagem din\u00e2mica (o tipo de dado \u00e9 inferido pelo intepretador na medida que o c\u00f3digo \u00e9 analisado).</p> <p>No exemplo abaixo estamos declarando algumas vari\u00e1veis. Em Python, n\u00e3o \u00e9 necess\u00e1rio especificar o tipo da vari\u00e1vel, ele \u00e9 din\u00e2micamente tipado.</p> <pre><code>nome = \"Alice\"   # Texto, string\nafirmacao = True # Booleano, bool\nidade = 25       # Inteiro, int\naltura = 1.70    # Ponto flutuante, float\nPI = 3.14159     # Constante\nGRAVIDADE = 9.8  # Constante\n</code></pre>"},{"location":"Python/python_3/#comentarios-em-python","title":"Coment\u00e1rios em Python","text":"<p>Coment\u00e1rios s\u00e3o trechos de texto dentro do c\u00f3digo-fonte que s\u00e3o ignorados pelo interpretador Python durante a execu\u00e7\u00e3o do programa. Eles s\u00e3o utilizados para explicar o c\u00f3digo, fazer anota\u00e7\u00f5es, fornecer documenta\u00e7\u00e3o ou desativar temporariamente partes do c\u00f3digo. Seu uso \u00e9 altamente recomend\u00e1vel, pois auxilia na documenta\u00e7\u00e3o do c\u00f3digo.</p> <p>Temos a disposi\u00e7\u00e3o diferentes duas maneiras distintas de comentar c\u00f3digo: coment\u00e1rio de linha e coment\u00e1rio de bloco. Coment\u00e1rios de linha come\u00e7am com o s\u00edmbolo # e continuam at\u00e9 o final da linha. S\u00e3o \u00fateis para adicionar breves explica\u00e7\u00f5es ou notas em uma \u00fanica linha de c\u00f3digo.</p> <pre><code># Este \u00e9 um coment\u00e1rio de linha \u00fanica\n</code></pre> <pre><code>\"\"\"\nEste \u00e9 um coment\u00e1rio de m\u00faltiplas linhas.\nPode ser \u00fatil para documenta\u00e7\u00e3o.\n\"\"\"\n</code></pre> <p>Quando pensamos em coment\u00e1rios devemos levar em considera\u00e7\u00e3o alguns crit\u00e9rios importantes para torn\u00e1-los realmente \u00fateis no processo de desenvolvimento. Os principais deles s\u00e3o:</p> <ul> <li>Escrever coment\u00e1rios suficientemente descritivos que ir\u00e3o apoiar o entendimento do algoritmo</li> <li>N\u00e3o comentar situa\u00e7\u00f5es \u00f3bvias</li> <li>Padronizar a escrita de coment\u00e1rios no c\u00f3digo-fonte.</li> </ul>"},{"location":"Python/python_3/#tipos-de-dados-e-conversoes","title":"Tipos de Dados e Convers\u00f5es","text":"<p>No Python, os tipos de dados definem a natureza dos valores armazenados em vari\u00e1veis.</p> Tipo Descri\u00e7\u00e3o Exemplo int N\u00fameros inteiros, positivos ou negativos, sem casas decimais. x = 10, y = -5 float N\u00fameros reais, com casas decimais. Tamb\u00e9m pode representar nota\u00e7\u00e3o cient\u00edfica. pi = 3.14, e = 2.7e3 str Cadeia de caracteres (texto). Deve ser delimitada por aspas simples ou duplas. nome = \"Python\", s = 'Oi' bool Valores booleanos que representam verdadeiro (True) ou falso (False). ativo = True, erro = False list Cole\u00e7\u00e3o ordenada e mut\u00e1vel de itens, que pode conter diferentes tipos de dados. Definida entre colchetes. nums = [1, 2, 3] tuple Cole\u00e7\u00e3o ordenada e imut\u00e1vel de itens. Definida entre par\u00eanteses. cores = (\"azul\", \"vermelho\") set Cole\u00e7\u00e3o desordenada de itens \u00fanicos. Definida entre chaves. vogais = dict Estrutura que armazena pares chave-valor. Definida entre chaves com dois pontos separando chave e valor. aluno = None NoneType, Representa a aus\u00eancia de valor vazio = None"},{"location":"Python/python_3/#entradas-e-saidas","title":"Entradas e sa\u00eddas","text":"<p>Para receber entrada do usu\u00e1rio, Python oferece a fun\u00e7\u00e3o <code>input()</code>. O valor retornado ap\u00f3s executar a fun\u00e7\u00e3o foi o que o usu\u00e1rio digitou no terminal. Aqui estamos falando de entrada em terminal, ou seja, sem uso de interface gr\u00e1fica.</p> <p>No trecho de c\u00f3digo que segue, a mensagem <code>Digite seu nome:</code> \u00e9 impressa na tela e o cursor fica aguardando a entrada do usu\u00e1rio. Ap\u00f3s o usu\u00e1rio digitar os dados e pressionar ENTER, o valor \u00e9 armazenado na vari\u00e1vel <code>nome</code>.</p> <pre><code>nome = input(\"Digite seu nome: \")\n</code></pre> <p>J\u00e1 para exibir informa\u00e7\u00f5es para o usu\u00e1rio, podemos usar a fun\u00e7\u00e3o <code>print()</code>, conforme o exemplo a seguir. No c\u00f3digo em quest\u00e3o, ser\u00e1 impresso na tela a mensagem <code>Ol\u00e1,</code> acompanhada do valor da vari\u00e1vel <code>nome</code>.</p> <pre><code>print(\"Ol\u00e1,\", nome)\n</code></pre> <p>N\u00e3o necess\u00e1riamente precisamos enviar uma mensagem com o input.</p> <pre><code>print(\"Digite seu nome\")\nnome = input()\n</code></pre>"},{"location":"Python/python_3/#conversoes","title":"Convers\u00f5es","text":"<p>Importante</p> <p>O <code>input()</code> SEMPRE retorna uma string, convers\u00f5es podem ser necess\u00e1rias. O Python permite a convers\u00e3o de tipos com fun\u00e7\u00f5es como:</p> <pre><code>int(\"10\")       # Converte string para inteiro \u2192 10\nfloat(5)        # Converte inteiro para float \u2192 5.0\nstr(3.14)       # Converte n\u00famero para string \u2192 \"3.14\"\n</code></pre> <p>Outras fun\u00e7\u00f5es para convers\u00e3o de tipos s\u00e3o mostradas na tabela abaixo:</p> <p>Fun\u00e7\u00f5es de convers\u00e3o</p> Fun\u00e7\u00e3o Descri\u00e7\u00e3o <code>int(x)</code> Converte para inteiro <code>float(x)</code> Converte para ponto flutuante <code>str(x)</code> Converte para string <code>bool(x)</code> Converte para booleano <code>list(x)</code> Converte para lista <code>tuple(x)</code> Converte para tupla <code>set(x)</code> Converte para conjunto <code>dict(x)</code> Converte para dicion\u00e1rio (se a estrutura for compat\u00edvel) <p>Essas fun\u00e7\u00f5es recebem um valor e convertem para o tipo desejado. Podemos converter por exemplo o valor de um <code>input</code>:</p> <pre><code>idade = int(input(\"Digite sua idade: \"))\n</code></pre> <p>O c\u00f3digo acima vai:</p> <ol> <li>mostrar a mensagem <code>\"Digite sua idade: \"</code> para o usu\u00e1rio</li> <li>o valor enviado pelo usu\u00e1rio \u00e9 uma <code>string</code></li> <li>a fun\u00e7\u00e3o <code>int</code> vai tentar converter o valor do input para um inteiro</li> </ol> <p>Nesse exemplo se o valor enviado pelo usu\u00e1rio for um inteiro v\u00e1lido a vari\u00e1vel <code>idade</code> vai receber esse valor.</p>"},{"location":"Python/python_3/#strings","title":"Strings","text":"<p>As strings s\u00e3o usadas para representar texto e s\u00e3o imut\u00e1veis, o que significa que uma vez que uma string \u00e9 criada, ela n\u00e3o pode ser alterada. O Python fornece uma grande variedade de m\u00e9todos embutidos para manipular e operar em strings de maneira eficiente.</p> <pre><code>s1 = \"aspas duplas\"\ns2 = 'aspas simples'\ns3 = \"\"\"string\nmultilinha\"\"\"\n</code></pre> <p>Com uma string podemos fazer algumas opera\u00e7\u00f5es...</p> Opera\u00e7\u00e3o Exemplo Resultado Concatena\u00e7\u00e3o <code>\"Ol\u00e1, \" + \"mundo\"</code> <code>\"Ol\u00e1, mundo\"</code> Repeti\u00e7\u00e3o <code>\"ha\" * 3</code> <code>\"hahaha\"</code> Indexa\u00e7\u00e3o <code>\"Python\"[0]</code> <code>'P'</code> Fatiamento <code>\"Python\"[1:4]</code> <code>'yth'</code> Comprimento <code>len(\"Python\")</code> <code>6</code> Verifica\u00e7\u00e3o <code>\"Py\" in \"Python\"</code> <code>True</code> <p>Ou usar algumas fun\u00e7\u00f5es como <code>len()</code> que retorna o comprimento da string, ou seja, o n\u00famero de caracteres presentes nela.</p> <pre><code>string = \"Ol\u00e1, mundo!\"\nprint(len(string))\n</code></pre> <p>Podemos usar a <code>upper()</code> para converter todos os caracteres da string para mai\u00fasculo, enquanto <code>lower()</code> os converte para min\u00fasculo.</p> <pre><code>string = \"Ol\u00e1, Mundo!\"\nprint(string.upper())\nprint(string.lower())\n</code></pre> <p>As fun\u00e7\u00f5es <code>strip()</code>, <code>lstrip()</code> e <code>rstrip()</code> removem espa\u00e7os em branco e caracteres especiais do in\u00edcio e/ou final da string.</p> <pre><code>string = \"   Ol\u00e1, Mundo!   \"\nprint(string.strip())\nprint(string.lstrip())\nprint(string.rstrip())\n</code></pre> <p>A fun\u00e7\u00e3o <code>split()</code> divide a string em uma lista de substrings com base em um separador, enquanto <code>join()</code> junta uma lista de strings em uma \u00fanica string.</p> <pre><code>string = \"Python \u00e9 lindo\"\nstring = \"Python.lindo\"\nlista = string.split()\nlista2 = string.split(\".\")\nprint(lista)\nprint(lista2)\n\nstring_nova = \"-\".join(lista)\nprint(string_nova)\n</code></pre> <p>A fun\u00e7\u00e3o <code>replace()</code> substitui todas as ocorr\u00eancias de uma substring por outra.</p> <pre><code>string = \"Python \u00e9 incr\u00edvel!\"\nnova_string = string.replace(\"incr\u00edvel\", \"fant\u00e1stico\")\nprint(nova_string)\n</code></pre> <p>As fun\u00e7\u00f5es <code>startswith()</code> e <code>endswith()</code> verificam se a string come\u00e7a ou termina com uma determinada substring, respectivamente.</p> <pre><code>string = \"Ol\u00e1, Mundo!\"\nprint(string.startswith(\"Ol\u00e1\"))\nprint(string.endswith(\"!\"))\n</code></pre> <p>Enquanto a fun\u00e7\u00e3o <code>find()</code> retorna a primeira ocorr\u00eancia de uma substring na string, j\u00e1 a fun\u00e7\u00e3o <code>index()</code> retorna o \u00edndice da primeira ocorr\u00eancia. A diferen\u00e7a \u00e9 que <code>index()</code> gera uma exce\u00e7\u00e3o se a substring n\u00e3o for encontrada.</p> <pre><code>string = \"Python \u00e9 uma linguagem de programa\u00e7\u00e3o\"\nprint(string.find(\"linguagem\"))\nprint(string.index(\"linguagem\"))\n</code></pre> <p>Tamb\u00e9m temos a fun\u00e7\u00e3o <code>count()</code> que conta o n\u00famero de ocorr\u00eancias de uma substring na string.</p> <pre><code>string = \"Python \u00e9 uma linguagem de programa\u00e7\u00e3o, e Python \u00e9 incr\u00edvel!\"\nprint(string.count(\"Python\"))\n</code></pre>"},{"location":"Python/python_3/#identificando-tipos","title":"Identificando tipos","text":"<p>Na incerteza de que tipo de valor uma vari\u00e1vel armazena, podemos encontrar e testar o tipo de uma vari\u00e1vel usando as fun\u00e7\u00f5es <code>type()</code> e <code>instanceOf()</code>. A a fun\u00e7\u00e3o <code>type()</code> recebe um valor e mostra o tipo correspondente.</p> <pre><code>x = 10\ny = 3.14\ntexto = \"Ol\u00e1, Python!\"\nlista = [1, 2, 3]\ndicionario = {\"nome\": \"Alice\", \"idade\": 25}\n\nprint(type(x))          # &lt;class 'int'&gt;\nprint(type(y))          # &lt;class 'float'&gt;\nprint(type(texto))      # &lt;class 'str'&gt;\nprint(type(lista))      # &lt;class 'list'&gt;\nprint(type(dicionario)) # &lt;class 'dict'&gt;\n</code></pre>"},{"location":"Python/python_3/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Os operadores aritm\u00e9ticos s\u00e3o utilizados para realizar opera\u00e7\u00f5es matem\u00e1ticas em valores num\u00e9ricos.</p> <p>Em sua grande maioria, s\u00e3o os mesmo da Matem\u00e1tica e representam opera\u00e7\u00f5es como adi\u00e7\u00e3o, subtra\u00e7\u00e3o, multiplica\u00e7\u00e3o, divis\u00e3o, por exemplo. Na sequ\u00eancia vamos apresentar eles.</p> <pre><code>resultado = 5 + 3     # Soma\nresultado = 10 - 7    # Subtra\u00e7\u00e3o\nresultado = 4 * 6     # Multiplica\u00e7\u00e3o\nresultado = 20 / 5    # Divis\u00e3o\nresultado = 20 // 6   # Divis\u00e3o inteira\nresultado = 20 % 6    # Resto da Divis\u00e3o\nresultado = 2 ** 3    # Exponencia\u00e7\u00e3o\n</code></pre>"},{"location":"Python/python_3/#saida-de-dados-print","title":"Sa\u00edda de Dados print()","text":"<p>A fun\u00e7\u00e3o <code>print()</code> exibe valores no console do REPL, \u00e9 utilizada para mostrar algo, e pode ser utilizada como ferramenta de depura\u00e7\u00e3o.</p> <pre><code>print(\"Ol\u00e1, mundo!\")  # Simples string\nprint(10 + 5)         # Opera\u00e7\u00e3o matem\u00e1tica\nprint(\"Python\", 3.11) # V\u00e1rios valores separados por espa\u00e7o\n</code></pre> <p>Podemos personalizar a sa\u00edda com sep (separador) e end (finalizador).</p> <pre><code>print(\"Python\", \"\u00e9\", \"incr\u00edvel\", sep=\"-\")\nprint(\"Linha 1\", end=\" \")\nprint(\"Linha 2\")\n</code></pre> <p>Ainda podemos formatar a sa\u00edda de dados</p> <pre><code>print(\"Meu nome \u00e9 %s e tenho %d anos.\" % (nome, idade))\n</code></pre>"},{"location":"Python/python_3/#f-strings","title":"f-strings","text":"<p>As f-strings s\u00e3o a forma recomendada atualmente para formata\u00e7\u00e3o de strings no Python moderno.</p> <pre><code>nome = \"Alice\"\nidade = 25\nprint(f\"Meu nome \u00e9 {nome} e tenho {idade} anos.\")\n\nprint(\"Meu nome \u00e9 {} e tenho {} anos.\".format(nome, idade))\n</code></pre> <p>No caso de n\u00fameros <code>float</code>. Podemos definir o tamanho de casas decimais a ser mostrado.</p> <pre><code>pi = 3.14159265359\nprint(f\"O valor de pi com 4 casas decimais \u00e9: {pi:.4f}\")\n</code></pre> Estilo Exemplo Observa\u00e7\u00e3o <code>f-string</code> <code>f\"Ol\u00e1, {nome}\"</code> Moderno e claro <code>.format()</code> <code>\"Ol\u00e1, {}\".format(nome)</code> Mais verboso <code>%</code> <code>\"Ol\u00e1, %s\" % nome</code> Antigo, estilo C"},{"location":"Python/python_3/#indentacao","title":"Indenta\u00e7\u00e3o","text":"<p>Em Python, a <code>indenta\u00e7\u00e3o</code> \u00e9 um conceito fundamental e parte integrante da sintaxe da linguagem. Diferentemente de muitas outras linguagens de programa\u00e7\u00e3o, que utilizam chaves <code>{}</code> para delimitar blocos de c\u00f3digo, Python utiliza a indenta\u00e7\u00e3o para definir a estrutura e a organiza\u00e7\u00e3o do c\u00f3digo.</p> <p>A indenta\u00e7\u00e3o \u00e9 utilizada para indicar a estrutura hier\u00e1rquica do c\u00f3digo, especialmente em constru\u00e7\u00f5es como loops, condicionais, fun\u00e7\u00f5es e classes. Ela define quais linhas de c\u00f3digo est\u00e3o dentro de um determinado bloco e quais est\u00e3o fora.</p> <p>Por conven\u00e7\u00e3o, \u00e9 recomendado utilizar quatro espa\u00e7os para cada n\u00edvel de indenta\u00e7\u00e3o. Embora o uso de tabula\u00e7\u00f5es (tab) seja permitido. Spaces over Tabs \u00e9 uma discuss\u00e3o sem fim na programa\u00e7\u00e3o...</p> <pre><code>if idade &gt;= 18:\n    print(\"Voc\u00ea \u00e9 maior de idade.\")\nelse:\n    print(\"Voc\u00ea \u00e9 menor de idade.\")\n</code></pre> <p>No exemplo acima, as linhas de c\u00f3digo dentro do bloco <code>if</code> e <code>else</code> est\u00e3o indentadas com quatro espa\u00e7os, indicando que elas pertencem a esses blocos condicionais.</p> <pre><code>def saudacao():\n    print(\"Ol\u00e1, Mundo!\")\n\nsaudacao()\n</code></pre> <p>Importante</p> <p>O uso incorreto da indenta\u00e7\u00e3o resulta em erro!</p>"},{"location":"Python/python_3/#operadores-de-comparacao","title":"Operadores de compara\u00e7\u00e3o","text":"<p>Conforme voc\u00ea deve ter observado, o comando <code>if</code> avalia uma express\u00e3o l\u00f3gica, cujos \u00fanicos valores poss\u00edveis s\u00e3o <code>VERDADEIRO</code> ou <code>FALSO</code>. Express\u00f5es nem sempre s\u00e3o simples, contendo apenas uma premissa. Tipicamente, temos duas ou mais premissas l\u00f3gicas compondo as express\u00f5es. Neste caso, precisamos dos operadores l\u00f3gicos para unir as partes.</p> <p>Operadores de compara\u00e7\u00e3o s\u00e3o usados para comparar valores e express\u00f5es, resultando em valores booleanos (True ou False) que indicam se a compara\u00e7\u00e3o \u00e9 verdadeira ou falsa.</p> Operador Descri\u00e7\u00e3o Exemplo Retorno <code>==</code> Igual a <code>5 == 5</code> <code>True</code> <code>!=</code> Diferente de <code>5 != 3</code> <code>True</code> <code>&gt;</code> Maior que <code>7 &gt; 3</code> <code>True</code> <code>&lt;</code> Menor que <code>2 &lt; 5</code> <code>True</code> <code>&gt;=</code> Maior ou igual a <code>4 &gt;= 4</code> <code>True</code> <code>&lt;=</code> Menor ou igual a <code>3 &lt;= 5</code> <code>True</code> <p>Esses operadores s\u00e3o frequentemente usados em instru\u00e7\u00f5es condicionais (como <code>if</code>, <code>elif</code>, <code>else</code>), onde o fluxo do programa depende do resultado das compara\u00e7\u00f5es.</p> <p>Operadores de Compara\u00e7\u00e3o</p> IgualdadeDiferen\u00e7aMenor queMaior queMenor ou igual aMaior ou igual a <p>O operador == (igual a) verifica se dois valores s\u00e3o iguais. N\u00e3o confunda com <code>=</code>, que indica atribui\u00e7\u00e3o. <pre><code>    a = 5\n    b = 10\n    print(a == b)\n</code></pre></p> <p>O operador != (diferente de) verifica se dois valores s\u00e3o diferentes. <pre><code>    a = 5\n    b = 10\n    print(a != b)\n</code></pre></p> <p>O operador &lt; (menor que) verifica se o valor \u00e0 esquerda \u00e9 menor que o valor \u00e0 direita. <pre><code>    a = 5\n    b = 10\n    print(a &lt; b)\n</code></pre></p> <p>O operador &gt; (maior que) verifica se o valor \u00e0 esquerda \u00e9 maior que o valor \u00e0 direita. <pre><code>    a = 5\n    b = 10\n    print(a &gt; b)\n</code></pre></p> <p>O operador &lt;= (menor ou igual a) verifica se o valor \u00e0 esquerda \u00e9 menor ou igual ao valor \u00e0 direita. <pre><code>    a = 5\n    b = 10\n    print(a &lt;= b)\n</code></pre></p> <p>O operador &gt;= (maior ou igual a) verifica se o valor \u00e0 esquerda \u00e9 maior ou igual ao valor \u00e0 direita. <pre><code>    a = 5\n    b = 10\n    print(a &gt;= b)\n</code></pre></p> <p>Tamb\u00e9m \u00e9 importante mencionar que os operadores de compara\u00e7\u00e3o podem ser combinados com operadores l\u00f3gicos (<code>and</code>, <code>or</code>, <code>not</code>) para criar condi\u00e7\u00f5es mais complexas. Isso permite construir l\u00f3gicas de decis\u00e3o mais elaboradas em um programa.</p>"},{"location":"Python/python_3/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Operadores l\u00f3gicos s\u00e3o elementos fundamentais em linguagens de programa\u00e7\u00e3o que permitem combinar e avaliar condi\u00e7\u00f5es booleanas. Eles s\u00e3o essenciais para controlar o fluxo de execu\u00e7\u00e3o de um programa com base em diversas situa\u00e7\u00f5es e crit\u00e9rios.</p>"},{"location":"Python/python_3/#operador-and","title":"Operador <code>and</code>","text":"<p>Este operador retorna <code>True</code> se ambas as express\u00f5es que ele conecta forem verdadeiras e <code>False</code> caso contr\u00e1rio.</p> <p>Ele \u00e9 frequentemente utilizado para verificar se m\u00faltiplas condi\u00e7\u00f5es devem ser atendidas para que uma determinada a\u00e7\u00e3o seja tomada.</p> <pre><code>idade = 25\nif idade &gt;= 18 and idade &lt;= 30:\n    print(\"Voc\u00ea \u00e9 um adulto.\")\n</code></pre> <p>Tabela verdade do operador <code>and</code></p> A B A and B True True True True False False False True False False False False"},{"location":"Python/python_3/#operador-or","title":"Operador <code>or</code>","text":"<p>Este operador retorna <code>True</code> se pelo menos uma das express\u00f5es que ele conecta for verdadeira e <code>False</code> apenas se ambas as express\u00f5es forem falsas.</p> <p>Ele \u00e9 \u00fatil quando pelo menos uma de v\u00e1rias condi\u00e7\u00f5es precisa ser verdadeira para que uma a\u00e7\u00e3o seja executada.</p> <pre><code>peso = 200\nif peso &gt;=190 or peso &lt;= 210:\n    print(\"Peso v\u00e1lido.\")\n</code></pre> <p>Tabela verdade do operador <code>or</code></p> A B A or B True True True True False True False True True False False False"},{"location":"Python/python_3/#operador-not","title":"Operador <code>not</code>","text":"<p>Este operador \u00e9 utilizado para inverter o valor de uma express\u00e3o booleana. Se a express\u00e3o original for True, o <code>not</code> a transformar\u00e1 em False, e vice-versa.</p> <p>Ele \u00e9 frequentemente utilizado para verificar se uma condi\u00e7\u00e3o n\u00e3o \u00e9 verdadeira.</p> <pre><code>idade = 15\nif not idade &gt;= 18:\n  print(\"Voc\u00ea \u00e9 menor de idade.\")\n</code></pre> <p>Tabela verdade para o operador <code>not</code></p> A not A True False False True"},{"location":"Python/python_3/#estruturas-condicionais","title":"Estruturas Condicionais","text":"<p>As estruturas condicionais na programa\u00e7\u00e3o visam oferecer ao programador maneiras de tomar decis\u00f5es dentro de um programa, executando diferentes blocos de c\u00f3digo com base em condi\u00e7\u00f5es espec\u00edficas.</p> <p>Elas permitem que o fluxo de execu\u00e7\u00e3o do programa seja alterado de acordo com a avalia\u00e7\u00e3o de condi\u00e7\u00f5es l\u00f3gicas, cujo valor poder ser verdadeiro ou falso, a depender do estado da execu\u00e7\u00e3o.</p> <p>Condi\u00e7\u00f5es L\u00f3gicas</p> <p>Uma condi\u00e7\u00e3o l\u00f3gica \u00e9 uma express\u00e3o cujo resultado de sua avalia\u00e7\u00e3o ser\u00e1 verdadeiro (True) ou falso (False). Utilizam-se operadores de compara\u00e7\u00e3o e operadores l\u00f3gicos na composi\u00e7\u00e3o das express\u00f5es.</p> <p></p> <p></p>"},{"location":"Python/python_3/#if","title":"if","text":"<p>O comando condicional mais b\u00e1sico em Python \u00e9 o if, que permite verificar se uma condi\u00e7\u00e3o l\u00f3gica \u00e9 verdadeira e ent\u00e3o executar um bloco de c\u00f3digo associado a ela.</p> <pre><code>idade = 18\n\nif idade &gt;= 18:\n  print(\"Idade igual maior que 18\")\n</code></pre> <p>No exemplo acima, o c\u00f3digo verifica se a vari\u00e1vel idade \u00e9 maior ou igual a 18. Se for, imprime a mensagem <code>Idade igual ou superior a 18 anos</code>.</p> <p>O bloco do if s\u00f3 vai ser executado nesse caso se o resultado da condi\u00e7\u00e3o l\u00f3gica for verdadeiro, ap\u00f3s isso o c\u00f3digo \u00e9 interpretado normalmente.</p> <p></p>"},{"location":"Python/python_3/#conversao-para-boolean","title":"Convers\u00e3o para Boolean","text":"<p>Nas condi\u00e7\u00f5es l\u00f3gicas podemos receber valores e fazer a convers\u00e3o para booleanos <code>True</code> ou <code>False</code>:</p> <pre><code>print(bool(0))         # False\nprint(bool(1))         # True\nprint(bool(\"\"))        # False\nprint(bool(\"Python\"))  # True\nprint(bool([]))        # False\nprint(bool([1, 2]))    # True\n</code></pre> <p></p> <p></p>"},{"location":"Python/python_3/#else","title":"else","text":"<p>Ao utilizar o comando o if, temos a disposi\u00e7\u00e3o o else, utilizado para executar um bloco de c\u00f3digo quando a condi\u00e7\u00e3o especificada N\u00c3O \u00e9 verdadeira.</p> <pre><code>idade = 16\n\nif idade &gt;= 18:\n    print(\"Maior  de idade.\")\nelse:\n    print(\"Menor de idade.\")\n</code></pre> <p>No exemplo acima, a condi\u00e7\u00e3o l\u00f3gica do <code>if</code> \u00e9 falsa, o interpretador ent\u00e3o vai executar o bloco do <code>else</code>.</p> <p>Tamb\u00e9m podemos testar mais casos que apenas um <code>if</code> e um <code>else</code>, usando o operador <code>elif</code>.</p> <p></p> <p></p>"},{"location":"Python/python_3/#elif","title":"elif","text":"<p>H\u00e1 casos em que temos a necessidade de m\u00faltiplas condi\u00e7\u00f5es. Para isso, utilizamos o comando <code>elif</code> (abrevia\u00e7\u00e3o de else if), que permite verificar condi\u00e7\u00f5es adicionais ap\u00f3s a condi\u00e7\u00e3o inicial <code>if</code>. Tal constru\u00e7\u00e3o permite a cria\u00e7\u00e3o de uma cadeia de testes para avaliar v\u00e1rias condi\u00e7\u00f5es em uma \u00fanica instru\u00e7\u00e3o.</p> <pre><code>idade = 20\n\nif idade &lt; 18:\n    print(\"Menor de idade.\")\nelif idade == 18:\n    print(\"Voc\u00ea acabou de atingir a maioridade.\")\nelse:\n    print(\"Voc\u00ea \u00e9 maior de idade.\")\n</code></pre> <p>Neste caso, se a idade for igual a 18, o programa imprime <code>Voc\u00ea acabou de atingir a maioridade.</code> Se a idade for maior que 18, ele imprime <code>Voc\u00ea \u00e9 maior de idade.</code> Se nenhuma das condi\u00e7\u00f5es anteriores for verdadeira, o programa imprime <code>Voc\u00ea \u00e9 menor de idade.</code></p> <p>Os comandos condicionais em Python tamb\u00e9m podem ser aninhados, ou seja, podem conter outros comandos condicionais dentro deles. Contudo, n\u00e3o \u00e9 boa pr\u00e1tica aplicar v\u00e1rios n\u00edveis de aninhamento, pois isso aumenta a complexidade e reduz a legibilidade do c\u00f3digo.</p>"},{"location":"Python/python_3/#match","title":"match","text":"<p>O comando <code>match</code> foi introduzido no Python a partir da vers\u00e3o 3.10 e oferece uma nova forma de realizar m\u00faltiplas compara\u00e7\u00f5es de padr\u00f5es de forma mais leg\u00edvel e concisa do que as estruturas condicionais tradicionais.</p> <p>Ele \u00e9 especialmente \u00fatil quando se tem m\u00faltiplas condi\u00e7\u00f5es a serem verificadas e quando cada condi\u00e7\u00e3o envolve uma express\u00e3o de padr\u00e3o espec\u00edfica.</p> <p>O <code>match</code> funciona de maneira semelhante ao <code>switch</code> em outras linguagens de programa\u00e7\u00e3o. Observe o exemplo:</p> <pre><code>def dia_da_semana(numero):\n  match numero:\n    case 1:\n      print(\"Domingo\")\n    case 2:\n      print(\"Segunda-feira\")\n    case 3:\n      print(\"Ter\u00e7a-feira\")\n    case 4:\n      print(\"Quarta-feira\")\n    case 5:\n      print(\"Quinta-feira\")\n    case 6:\n      print(\"Sexta-feira\")\n    case 7:\n      print(\"S\u00e1bado\")\n    case _:\n      print(\"N\u00famero inv\u00e1lido\")\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>dia_da_semana</code> recebe um n\u00famero e utiliza o comando <code>match</code> para verificar qual dia da semana corresponde a esse n\u00famero. Se o n\u00famero corresponder a um dos casos especificados (de 1 a 7), o programa imprime o nome do dia correspondente. Caso contr\u00e1rio, imprime <code>N\u00famero inv\u00e1lido</code>.</p> <p>O <code>match</code> permite a combina\u00e7\u00e3o de padr\u00f5es mais complexos usando a sintaxe <code>case &lt;padr\u00e3o&gt; if &lt;condi\u00e7\u00e3o&gt;:</code>, onde <code>&lt;padr\u00e3o&gt;</code> \u00e9 um padr\u00e3o a ser verificado e <code>&lt;condi\u00e7\u00e3o&gt;</code> \u00e9 uma express\u00e3o booleana que tamb\u00e9m deve ser verdadeira para que a correspond\u00eancia seja feita.</p> <pre><code>match valor:\n  case valor if valor&gt;0 and valor%2==0:\n    print(\"PAR e POSITIVO\")\n  case valor if valor&gt;0 and valor%2!=0:\n    print(\"\u00cdMPAR e POSITIVO\")\n  case valor if valor&lt;0 and valor%2==0:\n    print(\"PAR e NEGATIVO\")\n  case valor if valor&lt;0 and valor%2!=0:\n    print(\"\u00cdMPAR e NEGATIVO\")\n  case _:\n    print(\"ZERO\")\n</code></pre> <p>Tamb\u00e9m podemos testar v\u00e1rios valores em cada caso utilizando o operador <code>|</code>.</p> <p>Isso por vezes \u00e9 necess\u00e1rio quando o mesmo tratamento deve ser aplicado a mais de um valor da vari\u00e1vel em avalia\u00e7\u00e3o.</p> <pre><code>match codigo:\n  case 0 | -1:\n    print(\"Valor 0 ou -1\")\n  case 1 | 2 | 3:\n    print(\"Valor 1, 2, ou 3.\")\n  case _:\n    print(\"Algum outro valor\")\n</code></pre>"},{"location":"Python/python_3/#colecoes-de-dados","title":"Cole\u00e7\u00f5es de dados","text":"<p>As cole\u00e7\u00f5es de dados s\u00e3o estruturas fundamentais em programa\u00e7\u00e3o utilizadas para armazenar e organizar m\u00faltiplos valores de maneira eficiente. Elas permitem a manipula\u00e7\u00e3o de grandes volumes de informa\u00e7\u00e3o, possibilitando opera\u00e7\u00f5es como inser\u00e7\u00e3o, remo\u00e7\u00e3o, pesquisa e itera\u00e7\u00e3o de elementos.</p> <p>Em Python, as cole\u00e7\u00f5es mais comuns s\u00e3o listas, tuplas, conjuntos e dicion\u00e1rios. As listas s\u00e3o estruturas ordenadas e mut\u00e1veis, permitindo a adi\u00e7\u00e3o e remo\u00e7\u00e3o de elementos conforme necess\u00e1rio. J\u00e1 as tuplas s\u00e3o semelhantes \u00e0s listas, por\u00e9m imut\u00e1veis, o que garante maior seguran\u00e7a e efici\u00eancia quando os dados n\u00e3o precisam ser alterados.</p> <p>Os conjuntos s\u00e3o cole\u00e7\u00f5es n\u00e3o ordenadas que n\u00e3o permitem elementos duplicados, sendo \u00fateis para opera\u00e7\u00f5es como uni\u00e3o e interse\u00e7\u00e3o. Por outro lado, os qdicion\u00e1rios armazenam pares de chave e valor, possibilitando acesso r\u00e1pido aos dados por meio de uma chave \u00fanica, em vez de um \u00edndice num\u00e9rico.</p> <p>Cada tipo de cole\u00e7\u00e3o possui caracter\u00edsticas espec\u00edficas que se adaptam a diferentes necessidades. O uso adequado dessas estruturas melhora o desempenho do c\u00f3digo e facilita a manipula\u00e7\u00e3o de informa\u00e7\u00f5es em diversas aplica\u00e7\u00f5es.</p> Cole\u00e7\u00e3o Descri\u00e7\u00e3o Caracter\u00edsticas principais Exemplo list Cole\u00e7\u00e3o ordenada e mut\u00e1vel de elementos - Ordenada- Mut\u00e1vel- Permite elementos duplicados <code>lista = [1, 2, 3, 4, 2]</code> tuple Cole\u00e7\u00e3o ordenada e imut\u00e1vel de elementos - Ordenada- Imut\u00e1vel- Permite elementos duplicados <code>tupla = (1, 2, 3, 4, 2)</code> set Cole\u00e7\u00e3o n\u00e3o ordenada, mut\u00e1vel e n\u00e3o permite elementos duplicados - N\u00e3o ordenada- Mut\u00e1vel- N\u00e3o permite duplicados <code>conjunto = {1, 2, 3, 4}</code> dict Cole\u00e7\u00e3o de pares chave-valor, mut\u00e1vel e ordenada - Chaves \u00fanicas- Mut\u00e1vel- Permite busca r\u00e1pida por chave <code>dicionario = {'a': 1, 'b': 2}</code>"},{"location":"Python/python_3/#listas","title":"Listas","text":"<p>As listas s\u00e3o uma estrutura de dados vers\u00e1til que permite armazenar cole\u00e7\u00f5es de itens em uma ordem espec\u00edfica.</p> <p>S\u00e3o mut\u00e1veis, o que significa que voc\u00ea pode adicionar, remover e modificar itens conforme necess\u00e1rio sem gerar uma c\u00f3pia do objeto. Normalmente, as listas s\u00e3o utilizadas para armazenar dados de forma homog\u00eanea, ou seja, todos os items apresentam mesmo tipo. Contudo, \u00e9 poss\u00edvel criar listas com elementos de tipos distintos, pois o Python n\u00e3o imp\u00f5e a necessidade de homogeneidade.</p> <p>Para criar uma lista, podemos especificar os valores entre colchetes. Cada elemento deve ser separado dos demais com v\u00edrgulas. Caso a lista deva estar vazia, basta utilizar <code>[]</code>.</p> <pre><code>minha_lista = [1, 2, 3, 4, 5]\noutra_lista = [\"teste1\", \"teste2\"]\n</code></pre> <p>O acesso aos elementos se d\u00e1 por meio de um \u00edndice num\u00e9rico (inteiro), que come\u00e7a SEMPRE em 0. O \u00edndice deve ser aplicado utilizando o operador de slicing ([]).</p> <pre><code>print(minha_lista[0])\nprint(outra_lista[2])\n</code></pre> <p>O mesmo se aplica ao modificar o valor de uma posi\u00e7\u00e3o, basta atribuir ao \u00edndice desejado um novo valor.</p> <pre><code>minha_lista[0] = 100\nprint(minha_lista)\n</code></pre> <p>As principais opera\u00e7\u00f5es que podem ser realizadas com listas s\u00e3o:</p> <p>Adi\u00e7\u00e3o de elementos: <code>append()</code>, <code>insert()</code> <pre><code>minha_lista = [1,2,3,4]\nminha_lista.append(5)\nminha_lista.insert(0,0)\nminha_lista.insert(5,6)\n</code></pre></p> <p>Remo\u00e7\u00e3o de elementos: <code>remove()</code>, <code>pop()</code> </p> <pre><code>minha_lista = [1,2,3,4]\nminha_lista.remove(1)   # Indica qual valor deve ser removido\nminha_lista.pop(0)      # remove o primeiro valor\nminha_lista.pop()       # remove o \u00faltimo valor\n</code></pre> <p>Resumo</p> <ul> <li>Adicionar elemento ao final: <code>lista.append(5)</code></li> <li>Inserir em posi\u00e7\u00e3o espec\u00edfica: <code>lista.insert(1, 15)</code></li> <li>Remover por valor: <code>lista.remove(3)</code></li> <li>Remover por \u00edndice: <code>lista.pop(2)</code></li> <li>Ordenar: <code>lista.sort()</code></li> <li>Reverter: <code>lista.reverse()</code></li> <li>Comprimento: <code>len(lista)</code></li> </ul> <p>J\u00e1 em termos de fun\u00e7\u00f5es, relacionam-se \u00e0s listas as fun\u00e7\u00f5es:</p> <p><code>len()</code>: Retorna o n\u00famero de elementos em uma lista.  <pre><code>minha_lista = [1,2,3,4]\nlen(minha_lista)\n</code></pre></p> <p><code>sum()</code>: Retorna a soma de todos os elementos em uma lista.  <pre><code>minha_lista = [1,2,3,4]\nsum(minha_lista)\n</code></pre></p> <p><code>max()</code> e <code>min()</code>: m\u00e1ximo e m\u00ednimo em uma lista.  <pre><code>minha_lista = [1,2,3,4]\nmin(minha_lista)\nmax(minha_lista)\n</code></pre></p>"},{"location":"Python/python_3/#list-comprehension","title":"List Comprehension","text":"<p>List comprehension \u00e9 uma maneira concisa e elegante de criar listas em Python. Ela permite criar listas de forma mais eficiente e leg\u00edvel, muitas vezes em uma \u00fanica linha de c\u00f3digo.</p> <p>A sintaxe utilizada \u00e9 apresentada na sequ\u00eancia. Observe que <code>express\u00e3o</code> define cada elemento da nova lista, enquanto <code>item</code> corresponde ao elemento presente em <code>iter\u00e1vel</code> (origem dos dados para cria\u00e7\u00e3o da nova lista).</p> <pre><code>[express\u00e3o for item in iter\u00e1vel]\n</code></pre> <p>O recurso de list comprehension \u00e9 muito utilizado na programa\u00e7\u00e3o, n\u00e3o somente para criar listas, mas tamb\u00e9m dicion\u00e1rios e conjuntos. Conhecer bem a sintaxe e aplica\u00e7\u00e3o certamente \u00e9 um diferencial importante.</p> <p>Vejamos alguns exemplos concretos:</p> <pre><code># Lista contendo o quadrado dos valores de 1 a 6\nquadrados = [x ** 2 for x in range(1, 6)]\n\n# Lista contendo apenas os n\u00fameros pares da vari\u00e1vel `numeros`\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npares = [x for x in numeros if x % 2 == 0]\n\n# Lista contendo tuplas do resultado das combina\u00e7\u00f5es de valores poss\u00edveis entre 1 e 4 (produto cartesiano)\ntuplas = [(x, y) for x in range(1, 4) for y in range(1, 4)]\n</code></pre>"},{"location":"Python/python_3/#slicing","title":"Slicing","text":"<p>Slicing \u00e9 uma t\u00e9cnica que permite extrair partes espec\u00edficas de uma cole\u00e7\u00e3o de dados (string, lista, tupla, etc). O operador de slicing \u00e9 de grande valia para manipula\u00e7\u00e3o eficiente e flex\u00edvel de dados. A sintaxe b\u00e1sica \u00e9  <code>string[in\u00edcio:fim:passo]</code>, onde:</p> <ul> <li><code>in\u00edcio</code>: \u00cdndice onde o slicing come\u00e7a. Se n\u00e3o especificado, \u00e9 considerado o in\u00edcio da string.</li> <li><code>fim</code>: \u00cdndice onde o slicing termina. Este \u00edndice n\u00e3o \u00e9 inclu\u00eddo na substring resultante. Se n\u00e3o especificado, \u00e9 considerado o final da string.</li> <li><code>passo</code>: Opcional. Define o intervalo entre os caracteres a serem considerados durante o slicing. Se n\u00e3o especificado, o padr\u00e3o \u00e9 1.</li> </ul> <p>Observe alguns exemplos de uso do <code>slicing</code>.</p> <pre><code>numeros = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Pegando do \u00edndice 1 ao 4 (o \u00edndice 5 n\u00e3o \u00e9 inclu\u00eddo)\nsublista = numeros[1:5]\nprint(sublista)\n\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Omiss\u00e3o do \u00edndice de in\u00edcio (come\u00e7a do in\u00edcio da lista)\nprint(numeros[:4])  # [1, 2, 3, 4]\n\n# Omiss\u00e3o do \u00edndice de fim (vai at\u00e9 o final da lista)\nprint(numeros[5:])  # [6, 7, 8, 9]\n\nnumeros = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Pegando de 2 em 2\nprint(numeros[::2])  # [0, 2, 4, 6, 8]\n\n# Pegando de 3 em 3\nprint(numeros[::3])  # [0, 3, 6, 9]\n\nletras = ['A', 'B', 'C', 'D', 'E']\n\n# Invertendo com slicing\nprint(letras[::-1])  # ['E', 'D', 'C', 'B', 'A']\n\nnumeros = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n# Pegando os elementos de tr\u00e1s para frente de 2 em 2\nprint(numeros[::-2])  # [90, 70, 50, 30, 10]\n</code></pre>"},{"location":"Python/python_3/#tuplas","title":"Tuplas","text":"<p>Uma tupla \u00e9 uma estrutura de dados semelhante a uma lista, mas com a diferen\u00e7a crucial de que ela \u00e9 imut\u00e1vel. Isso significa que uma vez criada, seus elementos n\u00e3o podem ser alterados. As tuplas s\u00e3o definidas utilizando par\u00eanteses <code>()</code>.</p> <p>Geralmente tuplas s\u00e3o utilizadas para agregar dados diversos, mantendo-os imut\u00e1veis e dispostos de uma determinada ordem. Se houver apenas um elemento na tupla, \u00e9 necess\u00e1rio incluir uma v\u00edrgula ap\u00f3s o elemento para diferenci\u00e1-lo de uma express\u00e3o entre par\u00eanteses. O acesso aos dados \u00e9 feito por \u00edndices e a maneira mais comum de iterar sobre os dados \u00e9 atrav\u00e9s do la\u00e7o <code>for</code>.</p> <pre><code>tupla_com_um_elemento = (10,)\nminha_tupla = (1, 2, 3, 4, 5)\ntupla_vazia = ()\nprint(minha_tupla[0])  # Sa\u00edda: 1\nprint(minha_tupla[2])  # Sa\u00edda: 3\n\nfor e in minha_tupla:\n    print(e)\n</code></pre> <pre><code>tupla = (1, 2, 3, 4)\n</code></pre> <ul> <li>Acesso por \u00edndice: <code>tupla[0]</code> \u2192 <code>1</code></li> <li>Fatiamento: <code>tupla[1:3]</code> \u2192 <code>(2, 3)</code></li> <li>Desempacotamento:</li> </ul> <pre><code>a, b, c, d = tupla\n</code></pre> <ul> <li>Contagem de elementos: <code>tupla.count(2)</code> \u2192 <code>1</code></li> <li>\u00cdndice de elemento: <code>tupla.index(3)</code> \u2192 <code>2</code></li> <li>Comprimento: <code>len(tupla)</code> \u2192 <code>4</code></li> </ul>"},{"location":"Python/python_3/#dicionarios","title":"Dicion\u00e1rios","text":"<p>Um dicion\u00e1rio \u00e9 uma estrutura de dados que armazena pares chave-valor. \u00c9 uma das estruturas de dados mais utilizadas devido \u00e0 sua efici\u00eancia e flexibilidade. Os dicion\u00e1rios s\u00e3o mut\u00e1veis, o que significa que voc\u00ea pode adicionar, modificar e remover itens conforme necess\u00e1rio. Cada chave em um dicion\u00e1rio deve ser \u00fanica e associada a um \u00fanico valor. As chaves podem ser de qualquer tipo, como strings, n\u00fameros, tuplas, listas, outros dicion\u00e1rios, etc.</p> <p>Dicion\u00e1rios s\u00e3o sempre constru\u00eddos na premissa de <code>chave</code> e <code>valor</code></p> <p><code>key</code> e <code>value</code></p> <p>Com dicion\u00e1rios podemos criar estruturas mais complexas de dados.</p> <pre><code>dicionario = {'a': 1, 'b': 2, 'c': 3}\n</code></pre> <ul> <li>Acesso por chave: <code>dicionario['a']</code></li> <li>Modifica\u00e7\u00e3o:</li> </ul> <pre><code>dicionario['a'] = 10\n\nfor key in dicionario.keys():\n  print(key)\n\nfor key, value in dicionario.items():\n  print(f\"{key}: {value}\")\n</code></pre> <p>Para criar um dicion\u00e1rio, devemos utilizar a sintaxe de chaves <code>{}</code> e especificar os pares chave-valor separados por v\u00edrgulas. O acesso aos valores armazenados \u00e9 feito por meio da chave informada entre <code>[]</code>.</p> <pre><code>meu_dicionario = {\"nome\": \"Alice\", \"idade\": 30, \"cidade\": \"Nova York\"}\noutro_dicionario = {}\noutro_dicionario[\"marca\"] = \"Toyota\"\noutro_dicionario[\"modelo\"] = \"Corolla\"\n</code></pre> <p>Se a chave n\u00e3o existir no dicion\u00e1rio, ser\u00e1 lan\u00e7ada uma exce\u00e7\u00e3o <code>KeyError</code>. Para evitar isso, podemos utilizar usar o m\u00e9todo <code>get()</code>, que permite indicar um valor padr\u00e3o caso a chave n\u00e3o exista.</p> <pre><code>print(meu_dicionario.get(\"cidade\", \"N\u00e3o encontrado\"))  # Sa\u00edda: Nova York\nprint(meu_dicionario.get(\"profiss\u00e3o\", \"N\u00e3o encontrado\"))  # Sa\u00edda: N\u00e3o encontrado\n</code></pre> <p>Os principais m\u00e9todos dispon\u00edveis em objetos de dicion\u00e1rio s\u00e3o:</p> <ul> <li><code>keys()</code>: Retorna uma lista contendo todas as chaves do dicion\u00e1rio.</li> <li><code>values()</code>: Retorna uma lista contendo todos os valores do dicion\u00e1rio.</li> <li><code>items()</code>: Retorna uma lista de tuplas contendo todos os pares chave-valor do dicion\u00e1rio.</li> <li> <p><code>update()</code>: Atualiza o dicion\u00e1rio com os pares chave-valor de outro dicion\u00e1rio ou de uma sequ\u00eancia de pares chave-valor.</p> </li> <li> <p>Adicionar novo par: <code>dicionario['d'] = 4 ou dicionario.update({\"d\": 4})</code></p> </li> <li>Remover chave: <code>del dicionario['b']</code> ou <code>dicionario.pop('a')</code></li> <li>Atualizar o valor de uma chave: <code>dicionario.update({\"a\": 10})</code></li> <li>Obter todas as chaves: <code>dicionario.keys()</code></li> <li>Obter todos os valores: <code>dicionario.values()</code></li> <li>Obter todos os itens: <code>dicionario.items()</code></li> <li>Verificar chave: <code>'a' in dicionario</code></li> <li>Comprimento: <code>len(dicionario)</code></li> <li>Limpar dicionario: <code>dicionario.clear()</code></li> </ul>"},{"location":"Python/python_3/#conjuntos","title":"Conjuntos","text":"<p>Um conjunto \u00e9 uma estrutura de dados que armazena elementos \u00fanicos e n\u00e3o ordenados. Os conjuntos s\u00e3o muito \u00fateis para realizar opera\u00e7\u00f5es de conjunto oriundos da Matem\u00e1tica, como uni\u00e3o, interse\u00e7\u00e3o, diferen\u00e7a e teste de pertencimento. Os conjuntos s\u00e3o mut\u00e1veis, assim como listas e dicion\u00e1rios.</p> <p>Para criar um conjunto utilizamos a fun\u00e7\u00e3o <code>set()</code> ou a sintaxe de chaves <code>{}</code>. Se o objetivo for criar um conjunto vazio, ent\u00e3o ser\u00e1 necess\u00e1rio utilizar <code>set()</code>.</p> <pre><code>meu_conjunto = {1, 2, 3, 4, 5}\nconjunto_vazio = set()\n</code></pre> <p>Para adicionar elementos, utilizamos o m\u00e9todo <code>add()</code>. J\u00e1 para remover um elemento, temos a disposi\u00e7\u00e3o os m\u00e9todos <code>remove()</code> ou <code>discard()</code>. A diferen\u00e7a \u00e9 que <code>remove()</code> gera um erro se o elemento n\u00e3o estiver presente no conjunto, enquanto <code>discard()</code> n\u00e3o gera nenhum erro.</p> <pre><code>meu_conjunto.add(6)\nmeu_conjunto.remove(5)\nmeu_conjunto.discard(2)\n</code></pre> <p>Tal qual ocorre na Matem\u00e1tica, o uso de conjuntos no Python oferece suporte \u00e0s mesmas opera\u00e7\u00f5es. Para fins did\u00e1ticos, vamos utilizar como exemplo dois conjuntos de n\u00fameros inteiros, identificados pelas vari\u00e1veis <code>conjunto_a</code> e <code>conjunto_b</code>. Tais conjuntos cont\u00e9m os seguintes valores:</p> <pre><code>conjunto_a = {1, 3, 5, 7, 9}\nconjunto_b = {2, 4, 6, 8, 10}\n\nprint(\"Conjunto A:\", conjunto_a)\nprint(\"Conjunto B:\", conjunto_b)\n</code></pre> <p>Opera\u00e7\u00f5es sobre conjuntos</p> <code>union()</code>, <code>|</code><code>intersection()</code>, <code>&amp;</code>:<code>difference()</code>, <code>-</code><code>symmetric_difference()</code>, <code>^</code><code>issuperset()</code>, <code>&gt;=</code><code>issubset()</code>, <code>&lt;=</code> <p>Retorna um novo conjunto com todos os elementos de ambos os conjuntos.</p> <pre><code>conjunto_uniao = conjunto_a | conjunto_b\nprint(\"Conjunto Uni\u00e3o:\", conjunto_uniao)\n</code></pre> <p>Retorna o que h\u00e1 de comum entre ambos os conjuntos.</p> <pre><code>conjunto_inserseccao = conjunto_a &amp; conjunto_b\nprint(\"Conjunto Intersec\u00e7\u00e3o:\", conjunto_inserseccao)\n</code></pre> <p>Retorna um novo conjunto com os elementos presentes no primeiro conjunto que n\u00e3o est\u00e3o no segundo.</p> <pre><code>conjunto_diferenca = conjunto_a - conjunto_b\nprint(\"Conjunto Diferen\u00e7a:\", conjunto_diferenca)\n</code></pre> <p>Retorna um novo conjunto contendo os elementos que est\u00e3o em apenas um dos conjuntos, nunca em ambos.</p> <pre><code>conjunto_diferenca = conjunto_a ^ conjunto_b\nprint(\"Conjunto Diferen\u00e7a:\", conjunto_diferenca)\n</code></pre> <p>Verifica se um conjunto \u00e9 superconjunto de outro. Para ser superconjunto, \u00e9 necess\u00e1rio ter todos os elementos do outro conjunto avaliado, sendo poss\u00edvel ter elementos adicionais.</p> <pre><code>conjunto_a &gt;= conjunto_b\n</code></pre> <p>Verifica se um conjunto \u00e9 subconjunto de outro. Para ser subconjunto \u00e9 preciso que todos os elementos do conjunto estejam contidos no outro avaliado.</p> <pre><code>conjunto_a &lt;= conjunto_b\n</code></pre> <ul> <li>Adicionar elemento: <code>conjunto.add(5)</code></li> <li>Remover elemento: <code>conjunto.remove(3)</code></li> <li>Verificar exist\u00eancia: <code>2 in conjunto</code></li> <li>Uni\u00e3o: <code>conjunto | {6, 7}</code></li> <li>Interse\u00e7\u00e3o: <code>conjunto &amp; {2, 4, 6}</code></li> <li>Diferen\u00e7a: <code>conjunto - {2, 4}</code></li> <li>Comprimento: <code>len(conjunto)</code></li> </ul>"},{"location":"Python/python_3/#estruturas-de-repeticao","title":"Estruturas de repeti\u00e7\u00e3o","text":"<p>La\u00e7os de repeti\u00e7\u00e3o s\u00e3o estruturas de controle que permitem criar itera\u00e7\u00f5es, ou seja, repeti\u00e7\u00e3o de uma ou mais intru\u00e7\u00f5es.</p> <p>As estruturas de repeti\u00e7\u00e3o (ou la\u00e7os, ou loops) servem para executar um bloco de c\u00f3digo v\u00e1rias vezes, sem que voc\u00ea precise repetir o c\u00f3digo manualmente.</p> <p>Imagine que voc\u00ea precisa imprimir \u201cOl\u00e1!\u201d 10 vezes. Em vez de escrever print(\"Ol\u00e1!\") dez vezes, voc\u00ea usa um loop para automatizar isso.</p> <p>No Python, as principais estruturas s\u00e3o o <code>for</code> e o <code>while</code>.</p>"},{"location":"Python/python_3/#for-laco","title":"For (la\u00e7o)","text":"<p>O la\u00e7o <code>for</code> pode ser usado para iterar sobre uma sequ\u00eancia (como uma lista, tupla, dicion\u00e1rio, conjunto ou string) ou outro objeto iter\u00e1vel qualquer. Ele executa um bloco de c\u00f3digo para cada item da sequ\u00eancia. Seu uso \u00e9 destinado justamente para situa\u00e7\u00f5es em que conhecemos de antem\u00e3o a quantidade de ciclos (itera\u00e7\u00f5es) necess\u00e1rias.</p> <pre><code># Lista de valores\nlista = [1, 2, 3, 4, 5]\nfor numero in lista:\n  print(numero)\n\n# Caracteres de uma string\npalavra = \"Python\"\nfor letra in palavra:\n  print(letra)\n</code></pre> <pre><code># Dicion\u00e1rios\ndicionario = {'a': 1, 'b': 2, 'c': 3}\nfor chave, valor in dicionario.items():\n  print(chave, valor)\n\n# Intervalo de valores\nfor i in range(1, 6):\n  print(i)\n\nfor par in range(0, 10, 2):\n  print(par)\n</code></pre> <p>A fun\u00e7\u00e3o <code>range()</code> gera uma sequ\u00eancia de n\u00fameros inteiros em um intervalo especificado. Esta fun\u00e7\u00e3o \u00e9 comumente utilizada conjuntamente com o la\u00e7o for para iterar sobre uma sequ\u00eancia de n\u00fameros. O uso da fun\u00e7\u00e3o range() \u00e9 simples, pois compreende informar apenas o valor final da sequ\u00eancia. H\u00e1 tamb\u00e9m op\u00e7\u00f5es para modificar o valor de in\u00edcio e o incremento.</p> <p>Considerando que a assinatura da fun\u00e7\u00e3o \u00e9 range(start, stop, step), temos que:</p> <ul> <li>start: O valor inicial da sequ\u00eancia (opcional). Se n\u00e3o especificado, o padr\u00e3o \u00e9 0.</li> <li>stop: O valor final da sequ\u00eancia (obrigat\u00f3rio). A sequ\u00eancia gerada n\u00e3o inclui este valor.</li> <li>step: O incremento entre os n\u00fameros na sequ\u00eancia (opcional). Se n\u00e3o especificado, o padr\u00e3o \u00e9 1.</li> </ul> <pre><code>for i in range(1, 10, 2):\n  print(i)\n</code></pre>"},{"location":"Python/python_3/#while-enquanto","title":"While (enquanto)","text":"<p>O la\u00e7o <code>while</code> serve ao mesmo prop\u00f3sito do for: repetir instru\u00e7\u00f5es. Contudo, \u00e9 usado especialmente para repetir um bloco de c\u00f3digo enquanto uma condi\u00e7\u00e3o especificada for verdadeira. Em boa parte dos casos, a quantidade de itera\u00e7\u00f5es n\u00e3o pode ser determinada com exatid\u00e3o antecipadamente.</p> <pre><code># Imprimindo n\u00fameros de 1 a 5 usando while\ncontador = 1\nwhile contador &lt;= 5:\n  print(contador)\n  contador += 1\n\n# Pedindo entrada ao usu\u00e1rio at\u00e9 que ele insira \"sair\"\nwhile True:\n  entrada = input(\"Digite algo (ou 'sair' para sair): \")\n  if entrada == 'sair':\n    break  # Sai do la\u00e7o\n  print(\"Voc\u00ea digitou:\", entrada)\n</code></pre>"},{"location":"Python/python_3/#break-continue-e-else","title":"break, continue e else","text":"<p>Tanto o la\u00e7o for quanto while podem conter um bloco <code>else</code> em sua defini\u00e7\u00e3o. O uso assemelha-se ao else da constru\u00e7\u00e3o try except. No caso dos la\u00e7os, o bloco else ser\u00e1 executado sempre que o la\u00e7o concluir suas itera\u00e7\u00f5es normalmente, ou seja, sem o uso de break internamente.</p> <p>O comando <code>continue</code> \u00e9 utilizado para interromper a itera\u00e7\u00e3o atual de um loop e passar para a pr\u00f3xima itera\u00e7\u00e3o, ignorando o restante do c\u00f3digo que segue at\u00e9 o final do bloco. No c\u00f3digo abaixo, quando i tiver valor igual a 3, o comando <code>print(i)</code> n\u00e3o ser\u00e1 executado. Isso porque, executar a instru\u00e7\u00e3o continue, o interpretador ir\u00e1 retornar para o in\u00edcio do la\u00e7o, iniciando uma pr\u00f3xima itera\u00e7\u00e3o sem considerar as instru\u00e7\u00f5es que est\u00e3o na sequ\u00eancia.</p> <pre><code>for i in range(1, 6):\n  if i == 3:\n    continue\n  print(i)\n</code></pre> <p>O comando <code>break</code> \u00e9 utilizado para interromper completamente a execu\u00e7\u00e3o de la\u00e7o de repeti\u00e7\u00e3o. Quando o break \u00e9 encontrado dentro de um la\u00e7o, o controle do programa \u00e9 transferido para a instru\u00e7\u00e3o imediatamente ap\u00f3s o bloco. Em nosso exemplo apresentado abaixo, quando i alcan\u00e7ar o valor 3, o la\u00e7o ser\u00e1 interrompido e o interpretador seguir\u00e1 com o pr\u00f3ximo comando ap\u00f3s o bloco for () (no caso \u00e9 x = 10).</p> <pre><code>for i in range(1, 6):\n  if i == 3:\n    break\n  print(i)\nx = 10\n</code></pre>"},{"location":"Python/python_3/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>Uma fun\u00e7\u00e3o \u00e9 um bloco de c\u00f3digo reutiliz\u00e1vel que realiza uma tarefa espec\u00edfica, geralmente encapsulando um conjunto de instru\u00e7\u00f5es para evitar a repeti\u00e7\u00e3o de c\u00f3digo e modularizar um programa. O conceito de fun\u00e7\u00e3o \u00e9 fundamental na programa\u00e7\u00e3o, pois facilita a escrita, leitura, manuten\u00e7\u00e3o ea reutiliza\u00e7\u00e3o do c\u00f3digo ao longo do tempo. Al\u00e9m disso, utilizar fun\u00e7\u00f5es melhora a testabilidade do c\u00f3digo, uma propriedade muito importante para processos que buscam garantir a qualidade do c\u00f3digo produzido.</p> <p>Toda fun\u00e7\u00e3o deve ser declarada para ent\u00e3o ser utilizada em outras partes do c\u00f3digo. A declara\u00e7\u00e3o da fun\u00e7\u00e3o compreende definir seu nome, uma lista de par\u00e2metros (ou deixar em branco) e um corpo que cont\u00e9m as instru\u00e7\u00f5es a serem executadas. Em Python, isso \u00e9 feito usando a palavra reservada <code>def</code>.</p> <pre><code>def saudacao():\n    print(\"Ol\u00e1, seja bem-vindo!\")\n</code></pre> <p>Depois de uma fun\u00e7\u00e3o ser declarada ela pode ser usada ou \"chamada\" em outro lugar no c\u00f3digo.</p> <pre><code>saudacao()\n</code></pre>"},{"location":"Python/python_3/#parametros","title":"Par\u00e2metros","text":"<p>Os par\u00e2metros funcionam como vari\u00e1veis locais, tendo visibilidade apenas no escopo das instru\u00e7\u00f5es que pertencem ao bloco da fun\u00e7\u00e3o. Definimos par\u00e2metros sempre que precisamos receber do contexto externo \u00e0 fun\u00e7\u00e3o valores necess\u00e1rios ao seu processamento. Isso oferece maior amplitude de uso da fun\u00e7\u00e3o, tornando-a mais gen\u00e9rica (e este \u00e9 o objetivo!).</p> <p>Fun\u00e7\u00f5es tamb\u00e9m podem retornar valores a quem as chamou. A palavra reservada <code>return</code> aplicada nestes casos. Nossa func\u00e3o de exemplo utiliza tal recurso, pois retorna a soma dos valores informados por par\u00e2metro.</p> <pre><code>def minha_funcao(param1, param2):\n    return param1 + param2\n</code></pre> <p>Uma vez definida, a fun\u00e7\u00e3o pode ser chamada (invocada) em qualquer parte do programa, passando os argumentos necess\u00e1rios, quando estes tiverem sido definidos.</p> <pre><code>    resultado = minha_funcao(10, 5)\n    print(resultado)\n</code></pre> <p>Quais s\u00e3o os componentes de uma func\u00e3o</p> Nome da fun\u00e7\u00e3oPar\u00e2metrosArgumentosCorpo da fun\u00e7\u00e3oValor de retorno <p>Identificador \u00fanico que diferencia uma fun\u00e7\u00e3o das outras. Segue as regras de nomenclatura de vari\u00e1veis na linguagem de programa\u00e7\u00e3o.</p> <p>Vari\u00e1veis listadas na defini\u00e7\u00e3o da fun\u00e7\u00e3o, que recebem os valores dos argumentos passados durante a chamada da fun\u00e7\u00e3o. S\u00e3o valores que a fun\u00e7\u00e3o ir\u00e1 receber do mundo externo e s\u00e3o utilizados para torn\u00e1-la gen\u00e9rica em prop\u00f3sito de uso. Lembre-se que par\u00e2metros s\u00e3o opcionais, assim como podem ser definidos com valores padr\u00e3o.</p> <p>Nome formal dado aos valores passados para os respectivos par\u00e2metros da fun\u00e7\u00e3o quando ela \u00e9 chamada.</p> <p>Corresponde ao bloco de c\u00f3digo que define as opera\u00e7\u00f5es realizadas pela fun\u00e7\u00e3o. Esse bloco \u00e9 executado quando a fun\u00e7\u00e3o \u00e9 chamada. \u00c9 sua implementa\u00e7\u00e3o.</p> <p>O resultado que a fun\u00e7\u00e3o devolve ao ponto onde foi chamada, usando a palavra-chave <code>return</code>. Uma fun\u00e7\u00e3o pode n\u00e3o retornar nenhum valor. Neste caso, em Python, o valor <code>None</code> \u00e9 implicitamente retornado. Outras linguagens chamam de <code>void</code>.</p> <p>O <code>return</code> pode finalizar uma fun\u00e7\u00e3o, mesmo que existam linhas abaixo.</p> <pre><code>def teste():\n    print(\"Antes do return\")\n    return \"Saindo da fun\u00e7\u00e3o\"\n    print(\"Depois do return\")  # Nunca ser\u00e1 executado\n</code></pre> <p>O <code>return</code> pode retornar m\u00faltiplos valores tamb\u00e9m.</p> <p><pre><code>def operacoes(a, b):\n    return a + b, a - b, a * b\n\nsoma, sub, mult = operacoes(5, 3)\nprint(soma, sub, mult)  # 8 2 15\n</code></pre> O pde n\u00e3o retornar nada (retornar <code>None</code>), se voc\u00ea n\u00e3o usar return, ou usar return sozinho, a fun\u00e7\u00e3o retorna None por padr\u00e3o.</p> <pre><code>def sem_retorno():\n    print(\"Executando...\")\n\nresultado = sem_retorno()\nprint(resultado)  # None\n</code></pre>"},{"location":"Python/python_3/#funcoes-com-numero-de-argumentos-variaveis","title":"Fun\u00e7\u00f5es com n\u00famero de argumentos vari\u00e1veis","text":"<p>H\u00e1 casos espec\u00edficos onde \u00e9 conveniente permitir que uma fun\u00e7\u00e3o possa receber uma quantidade indeterminada de argumentos. Para este fim, a linguagem Python oferece dois recursos distintos: usando <code>*args</code> para argumentos posicionais vari\u00e1veis e <code>**kwargs</code> para argumentos nomeados vari\u00e1veis.</p> <p>Como funcionam par\u00e2metros de quantidade vari\u00e1vel?</p> Argumentos Posicionais Vari\u00e1veis (<code>*args</code>)Argumentos Nomeados Vari\u00e1veis (<code>**kwargs</code>)Combina\u00e7\u00e3o de <code>*args</code> e <code>**kwargs</code> <p>Quando n\u00e3o sabemos de antem\u00e3o quantos argumentos ser\u00e3o passados para uma fun\u00e7\u00e3o, \u00e9 poss\u00edvel usar <code>*args</code> na defini\u00e7\u00e3o da fun\u00e7\u00e3o. <code>*args</code> permite que a fun\u00e7\u00e3o receba um n\u00famero arbitr\u00e1rio de argumentos posicionais, que s\u00e3o recebidos internamente como uma tupla.</p> <pre><code>def soma(*args):\n    return sum(args)\n\nprint(soma(1, 2, 3))\nprint(soma(10, 20, 30, 40))\n</code></pre> <p>Para o case de uma quantidade vari\u00e1vel de argumentos nomeados, utilizamos <code>**kwargs</code>. <code>**kwargs</code> permite que a fun\u00e7\u00e3o receba um n\u00famero arbitr\u00e1rio de argumentos nomeados, que s\u00e3o recebidos internamente como um dicion\u00e1rio.</p> <pre><code>def imprimir_dados(**kwargs):\n    for chave, valor in kwargs.items():\n        print(f\"{chave}: {valor}\")\n\nimprimir_dados(nome=\"Alice\", idade=30, cidade=\"S\u00e3o Paulo\")\n</code></pre> <p>\u00c9 poss\u00edvel combinar <code>*args</code> e <code>**kwargs</code> na mesma fun\u00e7\u00e3o para aceitar uma quantidade vari\u00e1vel de argumentos posicionais e nomeados. Quando usados juntos, <code>*args</code> deve vir antes de <code>**kwargs</code> na defini\u00e7\u00e3o da fun\u00e7\u00e3o.</p> <pre><code>def misturar_argumentos(a, b, *args, **kwargs):\n    print(f\"a: {a}, b: {b}\")\n    print(\"args:\", args)\n    print(\"kwargs:\", kwargs)\nmisturar_argumentos(1, 2, 3, 4, 5, x=10, y=20)\n</code></pre>"},{"location":"Python/python_3/#escopo-e-ciclo-de-vida-de-variaveis","title":"Escopo e ciclo de vida de vari\u00e1veis","text":"<p>Quando trabalhamos com fun\u00e7\u00f5es, assim como ocorre com outros comandos de bloco, devemos estar cientes do escopo de visibilidade das vari\u00e1veis e de seu ciclo de vida. O escopo de uma vari\u00e1vel refere-se ao contexto dentro do qual essa vari\u00e1vel \u00e9 reconhecida e pode ser utilizada na programa\u00e7\u00e3o. J\u00e1 o ciclo de vida diz respeito ao per\u00edodo de exist\u00eancia em mem\u00f3ria, desde a cria\u00e7\u00e3o at\u00e9 sua destrui\u00e7\u00e3o.</p> <p>No escopo local, vari\u00e1veis ali definidas existem somente naquele contexto. S\u00e3o vari\u00e1veis dispon\u00edveis apenas \u00e0s instru\u00e7\u00f5es do escopo e seus subn\u00edveis.  \u00c9 o caso de vari\u00e1veis criadas dentro de fun\u00e7\u00f5es, cuja exist\u00eancia se restringe ao corpo da mesma. Utilizar vari\u00e1veis locais \u00e9 uma boa pr\u00e1tica de programa\u00e7\u00e3o. Outro ponto importante \u00e9 que a vari\u00e1vel somente est\u00e1 dispon\u00edvel para uso ap\u00f3s a sua declara\u00e7\u00e3o. Isso significa que, em instru\u00e7\u00f5es anteriores, mesmo estando no escopo de visibilidade, a vari\u00e1vel estar\u00e1 indispon\u00edvel.</p> <pre><code>def minha_funcao():\n    x = 10  # X s\u00f3 existe no contexto desta fun\u00e7\u00e3o\n    print(x)\n</code></pre> <p>O escopo global, por sua vez, compreende as vari\u00e1veis definidas fora de qualquer fun\u00e7\u00e3o. Estas vari\u00e1veis s\u00e3o acess\u00edveis em qualquer parte do programa. Sempre que poss\u00edvel, o escopo global deve ser evitado. Isso porque o uso deste tipo de vari\u00e1vel cria depend\u00eancias desnecess\u00e1rias entre os componentes e aumenta a probabilidade de ocorr\u00eancia de bugs. A regra de ouro \u00e9 evitar vari\u00e1veis globais.</p> <pre><code>x = 10  # Esta vari\u00e1vel vale para todo o programa\n\ndef minha_funcao1():\n    x = x + 1\n\ndef minha_funcao2():\n    print(x)\n</code></pre> <p>Para certas situa\u00e7\u00f5es, \u00e9 necess\u00e1rio utilizar as palavras reservadas <code>global</code> e <code>nonlocal</code> para resolver quest\u00f5es associadas com escopo de vari\u00e1veis no Python.</p>"},{"location":"Python/python_3/#imports-e-modulos","title":"Imports e M\u00f3dulos","text":"<p>O <code>import</code> serve para carregar m\u00f3dulos (bibliotecas) em Python. Um m\u00f3dulo pode ser um arquivo .py com fun\u00e7\u00f5es, ou uma biblioteca mais complexa (como o <code>math</code>, <code>random</code>, ou bibliotecas externas como <code>pandas</code>, <code>requests</code>).</p> <pre><code>import math\nprint(math.sqrt(16))  # 4.0\n</code></pre> <p>Podemos importar uma \u00fanica fun\u00e7\u00e3o se necess\u00e1rio:</p> <pre><code>from math import sqrt\nprint(sqrt(25))  # 5.0\n</code></pre> <p>Ou adicionar um apelid para um import, mas saiba que isso pode deixar o c\u00f3digo mais \"sujo\" se n\u00e3o utilizado de forma adequada.</p> <pre><code>import math as m\nprint(m.pi)  # 3.14159...\n</code></pre> <p>O m\u00f3dulo <code>math</code> faz parte da biblioteca padr\u00e3o do Python (n\u00e3o precisa instalar), j\u00e1 outros m\u00f3dulos externos precisam de uma instala\u00e7\u00e3o para funcionar.</p>"},{"location":"Python/python_3/#pip","title":"PIP","text":"<p><code>pip</code> \u00e9 o gerenciador de pacotes do Python, ele serve para instalar bibliotecas externas que n\u00e3o v\u00eam com o Python.</p> <pre><code>pip install requests\n</code></pre> <p>Isso instala a biblioteca requests (para fazer requisi\u00e7\u00f5es HTTP), depois de instalar, voc\u00ea pode importar no seu normalmente.</p>"},{"location":"Python/python_3/#requirements","title":"Requirements","text":"<p>O <code>requirements.txt</code> \u00e9 um arquivo de texto usado para listar as bibliotecas que seu projeto precisa.</p> <p>Ele permite que outras pessoas (ou servidores) instalem todas as depend\u00eancias de um projeto de uma vez s\u00f3, facilitando a instala\u00e7\u00e3o de pacotes.</p> <pre><code>requests==2.31.0\nflask&gt;=2.0\npandas\n</code></pre> <p>Ap\u00f3s instalar todas as depend\u00eancias de um projeto voc\u00ea pode gerar um requirements.txt de forma autom\u00e1tica:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>E para instalar as depend\u00eancias de um projeto com requirements voc\u00ea pode usar o comando <code>pip install -r requirements.txt</code></p>"},{"location":"Python/python_3/#funcao-main","title":"Fun\u00e7\u00e3o Main","text":"<p>Fun\u00e7\u00e3o <code>main()</code> \u00e9 utilizada na organiza\u00e7\u00e3o do c\u00f3digo e embora n\u00e3o seja obrigat\u00f3ria, \u00e9 comum definir uma fun\u00e7\u00e3o chamada main() para organizar a l\u00f3gica principal de um programa:</p> <pre><code>def main():\n    print(\"Executando o programa principal\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Em um script Python existe uma vari\u00e1vel especial chamada <code>__name__</code>, quando o script \u00e9 executado diretamente, <code>__name__</code> \u00e9 igual a <code>__main__</code>.</p> <pre><code># arquivo: saudacoes.py\ndef ola():\n    print(\"Ol\u00e1, mundo!\")\n\nif __name__ == \"__main__\":\n    ola()\n</code></pre> <p>Se voc\u00ea executar python saudacoes.py diretamente, o resultado ser\u00e1 <code>Ol\u00e1, mundo!</code> Mas se importar esse arquivo em outro script:</p> <pre><code># arquivo: outro.py\nimport saudacoes\n</code></pre> <p>Nada ser\u00e1 impresso, pois name ser\u00e1 \"saudacoes\", e o bloco if name == \"main\" n\u00e3o ser\u00e1 executado pois Quando o script \u00e9 importado como um m\u00f3dulo em outro script, name passa a ser o nome do m\u00f3dulo.</p>"},{"location":"Python/python_3/#modulos","title":"M\u00f3dulos","text":"<p>Um m\u00f3dulo \u00e9 um arquivo Python (.py) que cont\u00e9m defini\u00e7\u00f5es de fun\u00e7\u00f5es, classes, vari\u00e1veis e at\u00e9 mesmo c\u00f3digo execut\u00e1vel.</p> <pre><code># arquivo: saudacao.py\n\ndef ola(nome):\n  return f\"Ol\u00e1, {nome}!\"\n</code></pre> <p>Esse arquivo <code>saudacao.py</code> \u00e9 um m\u00f3dulo. Ele pode ser importado e usado assim</p> <pre><code># outro arquivo: main.py\n\nimport saudacao\n\nprint(saudacao.ola(\"Prof\"))\n</code></pre> <p>M\u00f3dulos podem servir v\u00e1rias fun\u00e7\u00f5es como reutiliza\u00e7\u00e3o, organiza\u00e7\u00e3o do c\u00f3digo, separar funcionalidades em arquivos diferentes ajuda a manter o c\u00f3digo limpo e modular.</p> <ul> <li>database.py \u2192 fun\u00e7\u00f5es de acesso ao banco de dados</li> <li>utils.py \u2192 fun\u00e7\u00f5es utilit\u00e1rias</li> <li>main.py \u2192 l\u00f3gica principal do programa</li> </ul> Tipo Exemplo Descri\u00e7\u00e3o M\u00f3dulo padr\u00e3o <code>math</code>, <code>os</code>, <code>sys</code> V\u00eam com a instala\u00e7\u00e3o do Python M\u00f3dulo externo <code>numpy</code>, <code>requests</code> Precisam ser instalados via <code>pip</code> M\u00f3dulo personalizado <code>meumodulo.py</code> Criados por voc\u00ea, geralmente em seu pr\u00f3prio projeto <p>\u00c9 comum encontrar erros durante a importa\u00e7\u00e3o de arquivos ou bibliotecas dentre eles os mais comuns s\u00e3o:</p> <ul> <li><code>ModuleNotFoundError</code>: quando o arquivo/m\u00f3dulo n\u00e3o \u00e9 encontrado</li> <li><code>ImportError</code>: quando a fun\u00e7\u00e3o/classe n\u00e3o pode ser importada</li> <li>Arquivo com nome conflitante com m\u00f3dulos padr\u00e3o (<code>math.py</code>, <code>json.py</code>)</li> </ul> <p>Dos modelos padr\u00f5es podemos citar  os m\u00f3dulos padr\u00e3o que fazem parte da biblioteca do python.</p> <pre><code>import math\n\nprint(math.sqrt(25))  # Sa\u00edda: 5.0\n</code></pre> <p>Tamb\u00e9m podemos importar uma \"parte\" da biblioteca como no exemplo abaixo</p> <pre><code>from math import sqrt\n\nprint(sqrt(36))  # Sa\u00edda: 6.0\n</code></pre> <p>E tamb\u00e9m criar \"alias\" ou apelidos para as importa\u00e7\u00f5es</p> <pre><code>import numpy as np\n\narray = np.array([1, 2, 3])\nprint(array)\n</code></pre>"},{"location":"Python/python_3/#como-o-python-encontra-os-arquivos","title":"Como o Python encontra os arquivos?","text":"<p>O Python procura os m\u00f3dulos na seguinte ordem:</p> <ol> <li>Diret\u00f3rio atual do script</li> <li>Vari\u00e1veis de ambiente (<code>PYTHONPATH</code>)</li> <li>Diret\u00f3rios padr\u00e3o da instala\u00e7\u00e3o do Python</li> </ol> <p>Voc\u00ea pode ver os caminhos onde o Python procura por m\u00f3dulos assim:</p> <pre><code>import sys\nprint(sys.path)\n</code></pre>"},{"location":"Python/python_3/#criando-um-pacote","title":"Criando um Pacote","text":"<p>Quando voc\u00ea tem muitos m\u00f3dulos relacionados ou faz sentido organizar alguns arquivos pode cirar um pacote.</p> <pre><code>meu_projeto/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 saudacao.py\n\u2502   \u2514\u2500\u2500 calculadora.py\n</code></pre> <p>Uso:</p> <pre><code>from utils.saudacao import ola\n</code></pre> <p>O arquivo init.py transforma a pasta em um pacote Python, em vers\u00f5es mais antigas do Python, sem o init.py, a pasta n\u00e3o era reconhecida como pacote. Mesmo que hoje em dia isso n\u00e3o seja mais obrigat\u00f3rio no Python 3.3+, a pr\u00e1tica ainda \u00e9 recomendada.</p> <p>Ele tende a ser um arquivo vazio, por\u00e9m pode ser utilizado para inicializa\u00e7\u00e3o, quando o pacote for importado o arquivo <code>init</code> \u00e9 executado.</p> Fun\u00e7\u00e3o do <code>__init__.py</code> Descri\u00e7\u00e3o Declarar pacote Torna uma pasta um pacote reconhecido pelo Python C\u00f3digo de inicializa\u00e7\u00e3o Pode conter l\u00f3gica executada na importa\u00e7\u00e3o do pacote Expor API p\u00fablica do pacote Permite facilitar a importa\u00e7\u00e3o direta de fun\u00e7\u00f5es/classes"},{"location":"Python/python_3/#modulo-datetime","title":"M\u00f3dulo datetime","text":"<p>O Python fornece m\u00f3dulos poderosos para manipular datas e horas, facilitando a manipula\u00e7\u00e3o e opera\u00e7\u00f5es com esse formato.</p> <ul> <li>datetime (mais usado)</li> <li>time</li> <li>calendar</li> </ul> <pre><code>import datetime\n\n#ou\n\nfrom datetime import datetime\n\nagora = datetime.now()\nprint(agora)  # Ex: 2025-06-02 16:45:30.123456\n\nprint(agora.date())  # Ex: 2025-06-02\nprint(agora.time())  # Ex: 16:45:30.123456\n</code></pre> <p>Podemos criar uma vari\u00e1vel com um datetime especifico</p> <pre><code>from datetime import datetime\n\n# Ano: 2000\n# M\u00eas: 1\n# Dia: 1\n# Hora: 12\n# Minuto: 0\n# Segundo: 0\n# datetime(ano, m\u00eas, dia, hora, minuto, segundo)\nnascimento = datetime(2000, 1, 1, 12, 0, 0)\nprint(nascimento)\n</code></pre> <p>Esse tipo de objeto \u00e9 \u00fatil para</p> <ul> <li>Comparar datas (ex: anivers\u00e1rios, validade)</li> <li>Calcular tempo decorrido</li> <li>Armazenar e manipular registros temporais em sistemas</li> </ul> <pre><code>from datetime import datetime\n\nagora = datetime.now()\nnascimento = datetime(2000, 1, 1, 12, 0, 0)\nidade = agora - nascimento\nprint(f\"Voc\u00ea nasceu h\u00e1 {idade.days} dias!\")\n</code></pre>"},{"location":"Python/python_3/#diferenca-entre-datas-timedelta","title":"Diferen\u00e7a entre datas <code>timedelta</code>","text":"<p>A fun\u00e7\u00e3o <code>timedelta</code> \u00e9 \u00fatil para encontrar a diferen\u00e7a entre as datas</p> <pre><code>from datetime import timedelta\n\n# timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\n\namanha = agora + timedelta(days=1)\nontem = agora - timedelta(days=1)\n\nprint(\"Amanh\u00e3:\", amanha)\nprint(\"Ontem:\", ontem)\n\ndiferenca = timedelta(days=7, hours=5)\n\nprint(\"Dias:\", diferenca.days)  # 7\nprint(\"Segundos:\", diferenca.seconds)  # 18000 (5 horas * 3600)\nprint(\"Total em segundos:\", diferenca.total_seconds())  # 630000.0\n</code></pre> Opera\u00e7\u00e3o Resultado <code>datetime + timedelta</code> Nova data/hora no futuro <code>datetime - timedelta</code> Nova data/hora no passado <code>datetime - datetime</code> Objeto <code>timedelta</code> <code>.days</code>, <code>.seconds</code> Acessa partes do <code>timedelta</code> <code>.total_seconds()</code> Converte tudo para segundos"},{"location":"Python/python_3/#funcao-strftime","title":"Fun\u00e7\u00e3o <code>strftime</code>","text":"<p>E para formatar as datas podemos usar a fun\u00e7\u00e3o <code>.strftime()</code></p> <pre><code>print(agora.strftime(\"%d/%m/%Y\"))  # Ex: 02/06/2025\nprint(agora.strftime(\"%H:%M:%S\"))  # Ex: 16:45:30\n</code></pre> C\u00f3digo Significado Exemplo <code>%Y</code> Ano com 4 d\u00edgitos 2025 <code>%m</code> M\u00eas (01-12) 06 <code>%d</code> Dia do m\u00eas 02 <code>%H</code> Hora (00-23) 16 <code>%M</code> Minuto 45 <code>%S</code> Segundo 30"},{"location":"Python/python_3/#conversao-de-datas-strptime","title":"Convers\u00e3o de datas <code>strptime</code>","text":"<p>Podemos utilizar essa fun\u00e7\u00e3o para converter uma string para uma data</p> <pre><code>data_str = \"02/06/2025\"\ndata_obj = datetime.strptime(data_str, \"%d/%m/%Y\")\nprint(data_obj)\n</code></pre>"},{"location":"Python/python_3/#timezones","title":"Timezones","text":"<pre><code>from datetime import datetime, timezone, timedelta\n\nutc = datetime.now(timezone.utc)\nprint(\"UTC:\", utc)\n\nbrasil = utc.astimezone(timezone(timedelta(hours=-3)))\nprint(\"Hor\u00e1rio de Bras\u00edlia:\", brasil)\n</code></pre>"},{"location":"Python/python_3/#medindo-tempo-decorrido","title":"Medindo tempo decorrido","text":"<p>Podemos usar o tempo para medir o tempo decorrido de uma execu\u00e7\u00e3o</p> <pre><code>import time\n\ninicio = time.time()\n\n# opera\u00e7\u00e3o demorada\ntime.sleep(2)\n\nfim = time.time()\nprint(f\"Tempo decorrido: {fim - inicio:.2f} segundos\")\n</code></pre>"},{"location":"Python/python_3/#captura-e-tratamento-de-excecoes","title":"Captura e tratamento de exce\u00e7\u00f5es","text":"<p>Exce\u00e7\u00f5es s\u00e3o eventos que ocorrem durante a execu\u00e7\u00e3o de um programa e interrompem seu fluxo normal devido a situa\u00e7\u00f5es inesperadas ou erros. Elas s\u00e3o usadas para lidar com condi\u00e7\u00f5es an\u00f4malas, como entrada inv\u00e1lida do usu\u00e1rio, falhas na rede, falta de mem\u00f3ria ou tentativa de acesso a um arquivo inexistente. O desenvolvedor pode criar tamb\u00e9m exce\u00e7\u00f5es customizadas que representam estados inv\u00e1lidos de neg\u00f3cio, como saldo negativo, limite de transfer\u00eancia excedido, entre outras situa\u00e7\u00f5es.</p> <p>Na maioria das linguagens de programa\u00e7\u00e3o, as exce\u00e7\u00f5es s\u00e3o tratadas por meio de blocos de tratamento que capturam e lidam com os erros de maneira controlada. O fluxo t\u00edpico envolve:</p> <ol> <li>Lan\u00e7amento da Exce\u00e7\u00e3o (Throwing an Exception): Quando um erro ocorre, a linguagem gera uma exce\u00e7\u00e3o automaticamente, ou o programador pode lan\u00e7\u00e1-la explicitamente.</li> <li>Captura da Exce\u00e7\u00e3o (Catching an Exception): Um bloco de c\u00f3digo tenta capturar e tratar a exce\u00e7\u00e3o para evitar que o programa falhe inesperadamente (termine abruptamente).</li> <li>Finaliza\u00e7\u00e3o (Finally Block - opcional): Algumas linguagens como o Python permitem executar um bloco de c\u00f3digo independentemente de ter ocorrido ou n\u00e3o uma exce\u00e7\u00e3o.</li> </ol> <pre><code>try:\n    # bloco com c\u00f3digo que pode gerar exce\u00e7\u00e3o\n    ...\nexcept TipoDeErro:\n    # bloco executado se ocorrer esse tipo de erro\n    ...\nelse:\n    # bloco executado se n\u00e3o houver erro\n    ...\nfinally:\n    # sempre executado (com ou sem erro)\n    ...\n</code></pre> <p>O <code>try</code>, <code>except</code>, <code>finally</code> \u00e9 a estrutura em Python que permite lidar com exce\u00e7\u00f5es de forma controlada e garantir que determinadas a\u00e7\u00f5es sejam executadas independentemente de ocorrer uma exce\u00e7\u00e3o ou n\u00e3o.</p> <pre><code>try:\n    arquivo = open(\"arquivo.txt\", \"r\")\n    conteudo = arquivo.read()\n    print(conteudo)\nexcept FileNotFoundError:\n    print(\"O arquivo n\u00e3o foi encontrado.\")\nelse:\n    print(\"O arquivo foi lido com sucesso.\")\nfinally:\n    arquivo.close()  # Garante que o arquivo seja fechado, mesmo se ocorrer uma exce\u00e7\u00e3o\n</code></pre> <p>Detalhando a estrutura try/except/finally</p> Bloco try`Bloco <code>except</code>Bloco <code>else</code>Bloco <code>finally</code> <p>Corresponde ao c\u00f3digo do fluxo normal de execu\u00e7\u00e3o que se deseja monitorar a ocorr\u00eancia de exce\u00e7\u00f5es. Sua presen\u00e7a \u00e9 obrigat\u00f3ria.</p> <p>Este bloco captura exce\u00e7\u00f5es espec\u00edficas que podem ocorrer dentro do bloco <code>try</code>. \u00c9 poss\u00edvel ter v\u00e1rios blocos <code>except</code> para diferentes tipos de exce\u00e7\u00f5es. Isso permite tornar o tratamento de cada tipo de situa\u00e7\u00e3o espec\u00edfico.</p> <p>\u00c9 opcional e executado apenas se nenhuma exce\u00e7\u00e3o ocorrer dentro do bloco <code>try</code>. \u00c9 \u00fatil para c\u00f3digo que deve ser executado apenas em caso de n\u00e3o ter ocorrido exce\u00e7\u00f5es.</p> <p>Se declarado, o bloco <code>finally</code> ser\u00e1 sempre executado, independentemente de ocorrer uma exce\u00e7\u00e3o ou n\u00e3o dentro do bloco <code>try</code>. \u00c9 usado para garantir que determinadas a\u00e7\u00f5es, como a libera\u00e7\u00e3o de recursos, sejam executadas mesmo em caso de exce\u00e7\u00e3o.</p> Exce\u00e7\u00e3o Quando ocorre <code>ZeroDivisionError</code> Divis\u00e3o por zero <code>ValueError</code> Valor inv\u00e1lido para uma opera\u00e7\u00e3o <code>TypeError</code> Tipo de dado incorreto para a opera\u00e7\u00e3o <code>IndexError</code> Acesso a \u00edndice inv\u00e1lido em listas/tuplas <code>KeyError</code> Chave inexistente em dicion\u00e1rios <code>FileNotFoundError</code> Arquivo n\u00e3o encontrado <code>ImportError</code> Erro ao importar m\u00f3dulos <pre><code>from datetime import datetime\n\nentrada = input(\"Digite uma data no formato DD/MM/AAAA: \")\n\ntry:\n    data = datetime.strptime(entrada, \"%d/%m/%Y\")\n    print(\"Data v\u00e1lida:\", data.strftime(\"%A, %d de %B de %Y\"))\nexcept ValueError:\n    print(\"Formato inv\u00e1lido. Use DD/MM/AAAA.\")\n</code></pre> <p>ou tentando capturar m\u00faltiplos tipos de erros</p> <pre><code>try:\n    ...\nexcept (ValueError, TypeError) as e:\n    print(f\"Ocorreu um erro: {e}\")\n</code></pre> <p>A biblioteca padr\u00e3o do Python oferece diversos tipos de exce\u00e7\u00e3o nativas. A lista completa pode ser encontrada na documenta\u00e7\u00e3o oficial.</p>"},{"location":"Ubiquitous%20Computing/ainfraestrutura/","title":"Infraestrutura em Sistemas Distribu\u00eddos","text":"<p>Com o avan\u00e7o dos modelos de computa\u00e7\u00e3o distribu\u00edda, desde os sistemas primitivos at\u00e9 os contempor\u00e2neos, houve uma mudan\u00e7a significativa na forma como os recursos computacionais s\u00e3o utilizados. Inicialmente, sistemas utilizavam m\u00e1quinas f\u00edsicas dedicadas, exigindo configura\u00e7\u00f5es manuais e alto custo de manuten\u00e7\u00e3o.</p> <p>\u00c0 medida que os sistemas se tornaram mais heterog\u00eaneos e din\u00e2micos \u2014 impulsionados por paradigmas como a computa\u00e7\u00e3o em nuvem, pervasiva e ub\u00edqua emergiu a necessidade de abstrair ainda mais a infraestrutura subjacente.</p>"},{"location":"Ubiquitous%20Computing/ainfraestrutura/#virtualizacao","title":"Virtualiza\u00e7\u00e3o","text":"<p>Em vez de usar um \u00fanico sistema f\u00edsico para cada tarefa, a tecnologia de virtualiza\u00e7\u00e3o permite dividir o hardware em v\u00e1rias m\u00e1quinas virtuais (VMs) que operam como sistemas independentes, com seu pr\u00f3prio sistema operacional e aplica\u00e7\u00f5es. Cada VM compartilha os recursos do hardware f\u00edsico, mas opera de forma isolada das demais.</p> <p>Para ger\u00eanciar v\u00e1rias m\u00e1quinas virtuais existe uma camada chamada <code>hypervisor</code>, como por exemplo, VirtualBox, VMwere, KVM. O Hipervisor \u00e9 respons\u00e1vel dimensionar a m\u00e1quina virtual, fornecer acesso, iniciar e desligar vms... entre outras tarefas.</p> <p>Existem dois tipos principais de Hypervisors:</p> <ul> <li>Hosted: s\u00e3o softwares instalados na m\u00e1quina, e dependem de um sistema operacional, como VMWare e VirtualBox.</li> <li>BareMetal: esses softwares rodam diretamente no hardware do host, tendo um controle do host em mais baixo n\u00edvel... VMware ESXi, Microsoft Hyper-V, and Citrix XenServer.</li> </ul>"},{"location":"Ubiquitous%20Computing/ainfraestrutura/#vantagens-da-virtualizacao","title":"Vantagens da Virtualiza\u00e7\u00e3o","text":"<ul> <li>Isolamento total: Cada VM opera de forma independente, com seu pr\u00f3prio sistema operacional, garantindo seguran\u00e7a e isolamento total.</li> <li>Compatibilidade: Permite rodar m\u00faltiplos sistemas operacionais no mesmo hardware, como Windows e Linux.</li> <li>Facilidade de migra\u00e7\u00e3o: As VMs podem ser facilmente migradas entre servidores f\u00edsicos, facilitando o balanceamento de carga e a recupera\u00e7\u00e3o de desastres.</li> <li>Ambientes robustos e est\u00e1veis: Cada VM possui seus pr\u00f3prios recursos alocados, tornando-as adequadas para aplica\u00e7\u00f5es pesadas.   </li> </ul>"},{"location":"Ubiquitous%20Computing/ainfraestrutura/#desvantagens-da-virtualizacao","title":"Desvantagens da Virtualiza\u00e7\u00e3o","text":"<ul> <li>Consumo de recursos: Cada VM carrega um sistema operacional completo, o que consome mais mem\u00f3ria e processamento.</li> <li>Inicializa\u00e7\u00e3o mais lenta: Devido ao sistema operacional independente, o tempo de inicializa\u00e7\u00e3o das VMs tende a ser mais lento.</li> <li>Overhead do hypervisor: O hypervisor consome recursos do sistema f\u00edsico, o que pode reduzir a efici\u00eancia em compara\u00e7\u00e3o com cont\u00eaineres.   </li> </ul>"},{"location":"Ubiquitous%20Computing/ainfraestrutura/#conteinerizacao","title":"Conteineriza\u00e7\u00e3o","text":"<p>A conteineriza\u00e7\u00e3o \u00e9 uma tecnologia que permite empacotar um aplicativo e suas depend\u00eancias em um \"container\", que \u00e9 um ambiente isolado, mais leve e que roda em cima do sistema operacional.</p> <p>A conteineriza\u00e7\u00e3o compartilha o kernel do sistema operacional do host com m\u00faltiplos containers, usando recursos nativos. Cada container \u00e9 uma inst\u00e2ncia isolada do ambiente necess\u00e1rio para o aplicativo, incluindo depend\u00eancias e bibliotecas, mas sem precisar de um sistema operacional completo sendo mais leve que a virtualiza\u00e7\u00e3o.</p> Aspecto Virtualiza\u00e7\u00e3o Containeriza\u00e7\u00e3o Isolamento Completo com SO pr\u00f3prio Compartilhamento do kernel do host Consumo de Recursos Alto, devido ao SO completo Baixo, devido ao compartilhamento do kernel Inicializa\u00e7\u00e3o Mais lento Mais r\u00e1pido Portabilidade Boa, depende dos hypervisors Muito alta, independente de infraestrutura Escalabilidade Escal\u00e1vel, mas com overhead maior Facilmente escal\u00e1vel, ideal para microsservi\u00e7os Seguran\u00e7a Maior isolamento Isolamento limitado Uso ideal Aplica\u00e7\u00f5es pesadas, m\u00faltiplos SOs Microsservi\u00e7os, aplica\u00e7\u00f5es leves e port\u00e1veis <p>CANONICAL. Containerization vs. Virtualization. Dispon\u00edvel em: https://ubuntu.com/blog/containerization-vs-virtualization. Acesso em: 1 fev. 2025.</p>"},{"location":"Ubiquitous%20Computing/ainfraestrutura/#vantagens-da-conteinerizacao","title":"Vantagens da Conteineriza\u00e7\u00e3o","text":"<ul> <li>Portabilidade: Aplica\u00e7\u00f5es podem ser executadas de forma consistente em diferentes ambientes.</li> <li>Isolamento: Cont\u00eaineres s\u00e3o isolados, reduzindo conflitos entre depend\u00eancias.</li> <li>Efici\u00eancia: Cont\u00eaineres s\u00e3o leves em compara\u00e7\u00e3o com m\u00e1quinas virtuais, economizando recursos.</li> <li>Escalabilidade: F\u00e1cil replica\u00e7\u00e3o e escalabilidade horizontal.   </li> </ul>"},{"location":"Ubiquitous%20Computing/ainfraestrutura/#desvantagens-da-conteinerizacao","title":"Desvantagens da Conteineriza\u00e7\u00e3o","text":"<ul> <li>Complexidade: Configura\u00e7\u00f5es complexas podem ser desafiadoras para iniciantes.</li> <li>Persist\u00eancia de Dados: Cont\u00eaineres s\u00e3o ef\u00eameros por padr\u00e3o; gerenciar dados persistentes requer configura\u00e7\u00e3o adicional.</li> <li>Seguran\u00e7a: Embora isolados, cont\u00eaineres compartilham o mesmo kernel do sistema operacional host, o que pode representar um risco de seguran\u00e7a em algumas situa\u00e7\u00f5es.   </li> </ul>"},{"location":"Ubiquitous%20Computing/bdocker_1/","title":"Docker","text":"<p>Docker \u00e9 uma plataforma open source que automatiza a implanta\u00e7\u00e3o, escalabilidade e execu\u00e7\u00e3o de aplica\u00e7\u00f5es dentro de cont\u00eaineres.</p> <p>Cont\u00eaineres s\u00e3o ambientes isolados e port\u00e1teis que cont\u00eam tudo o que uma aplica\u00e7\u00e3o precisa para funcionar, incluindo bibliotecas, depend\u00eancias e configura\u00e7\u00f5es.</p> <p></p>"},{"location":"Ubiquitous%20Computing/bdocker_1/#arquitetura","title":"Arquitetura","text":"<p>A arquitetura do docker pode ser dividida em tr\u00eas componentes principais mostrados na imagem  abaixo.</p> <p>Arquitetura</p> ClienteHostRegistry <p>O cliente \u00e9 o ponto de intera\u00e7\u00e3o do usu\u00e1rio com o Docker, geralmente por meio da linha de comando. Esses comandos s\u00e3o enviados ao Docker Daemon via API, os comandos s\u00e3o convertidos para chamadas da api.</p> <ul> <li>docker run: Executa um container com base em uma imagem.</li> <li>docker build: Cria uma nova imagem a partir de um Dockerfile.</li> <li>docker pull: Baixa uma imagem de um reposit\u00f3rio (Registry).</li> </ul> <p>O docker host \u00e9 o ambiente de execu\u00e7\u00e3o do docker sendo o Daemon um servi\u00e7o que ger\u00eancia as <code>imagens</code> e <code>containers</code>. Quando uma imagem \u00e9 \"executada\", o Docker a transforma em um container em uma inst\u00e2ncia isolada para execu\u00e7\u00e3o.</p> <p>O Docker Registry \u00e9 um reposit\u00f3rio de imagens podendo ser p\u00fablico ou privado</p>"},{"location":"Ubiquitous%20Computing/bdocker_1/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>O <code>Docker</code> est\u00e1 dispon\u00edvel para v\u00e1rios SO's, entre os principais sistemas operacionais da atualidade o Docker fornece uma forma de instala\u00e7\u00e3o. Para linux as principais distros possuem o reposit\u00f3rio oficial dispon\u00edvel para instala\u00e7\u00e3o.</p>"},{"location":"Ubiquitous%20Computing/bdocker_1/#primeiro-container","title":"Primeiro Container","text":"<p>Execute o seguinte comando:</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"Ubiquitous%20Computing/bdocker_1/#docker-hub","title":"Docker Hub","text":"<p>Docker Hub \u00e9 um registro de containers (container registry) hospedado pela pr\u00f3pria Docker Inc. \u00c9 o ponto de partida padr\u00e3o quando voc\u00ea executa comandos como <code>docker pull</code> ou <code>docker run</code>.</p> Funcionalidade Descri\u00e7\u00e3o Imagens oficiais Reposit\u00f3rios mantidos por empresas ou pela pr\u00f3pria Docker (ex: <code>nginx</code>, <code>mysql</code>) Reposit\u00f3rios p\u00fablicos Qualquer usu\u00e1rio pode criar e compartilhar uma imagem abertamente. Reposit\u00f3rios privados Para projetos privados ou internos. Contas gratuitas t\u00eam limite. Tags e vers\u00f5es Cada imagem pode ter v\u00e1rias vers\u00f5es (<code>latest</code>, <code>v1.0</code>, etc.) Automated Builds Integra com GitHub/GitLab para build autom\u00e1tico de imagens. Webhooks Aciona a\u00e7\u00f5es externas ap\u00f3s o push de uma imagem."},{"location":"Ubiquitous%20Computing/bdocker_1/#programa-ascii-text","title":"Programa ASCII text","text":"<p>Para exemplificar vamos criar um programa que converte texto para ASCII text, usando o figlet. Crie um arquivo chamado <code>ascii.sh</code></p> <pre><code>#!/bin/bash\n\nTEXTO=(\"Arise, arise, riders of Rohan!\nFell deeds awake, fire and slaughter!\nSpear shall be shaken, shield be splintered!\nA sword-day, a red day, ere the sun rises!\nRide now, ride now, ride to Gondor!\")\n\nfiglet -w 200 -f big \"$TEXTO\"\n</code></pre> <p>Esse \u00e9 nosso programa, um arquivo simples <code>.sh</code> que usa o programa <code>figlet</code>. Para executar localmente \u00e9 necess\u00e1rio instalar esse programa manualmente. Pensando no contexto de utiliza\u00e7\u00e3o, um programa pode conter diversas bibliotecas e configura\u00e7\u00f5es para seu funcionamento. Para isso criamos um <code>Dockerfile</code>.</p>"},{"location":"Ubiquitous%20Computing/bdocker_1/#dockerfile","title":"Dockerfile","text":"<p>O <code>Dockerfile</code> \u00e9 o ponto de entrada de um container docker, \u00e9 onde a imagem e toda a l\u00f3gica do container s\u00e3o definidos. Neste arquivo definimos as etapas para cria\u00e7\u00e3o de um container.</p> <ul> <li>FROM: define a imagem base do container.</li> <li>WORKDIR: define o diret\u00f3rio de trabalho dentro do container.</li> <li>COPY: copia arquivos do sistema de arquivos host para o sistema de arquivos do container.</li> <li>RUN: executa comandos no container durante o processo de build.</li> <li>EXPOSE: informa qual porta o servi\u00e7o do container vai escutar</li> <li>CMD: define o comando padr\u00e3o que ser\u00e1 executado quando o cont\u00eainer for iniciado. Diferente de RUN, que \u00e9 executado durante o build, CMD \u00e9 executado quando o cont\u00eainer j\u00e1 est\u00e1 rodando.</li> </ul> <pre><code>FROM ubuntu:latest\nRUN apt update &amp;&amp; apt install -y figlet wget\nRUN wget -P /usr/share/figlet http://www.jave.de/figlet/fonts/details/big.flf\nCOPY ascii.sh /ascii.sh\nRUN chmod +x /ascii.sh\nCMD [\"/ascii.sh\"]\n</code></pre> <p>Com esse arquivo pronto vamos montar essa imagem.</p>"},{"location":"Ubiquitous%20Computing/bdocker_1/#build-image","title":"Build image","text":"<p>O comando <code>docker build</code> \u00e9 usado para criar uma imagem Docker a partir de um Dockerfile. A imagem \u00e9 uma representa\u00e7\u00e3o em camadas do sistema de arquivos que ser\u00e1 utilizado pelos containers. A nomenclatura do comando <code>docker build</code> \u00e9 a seguinte</p> <pre><code>docker build [op\u00e7\u00f5es] &lt;contexto&gt;\n</code></pre> <p>O contexto \u00e9 o diret\u00f3rio no qual o Docker ir\u00e1 buscar o Dockerfile e os arquivos referenciados por ele. Pode ser . (diret\u00f3rio atual) ou um caminho relativo/absoluto.</p> <p>Em op\u00e7\u00f5es temos uma lista de par\u00e2metros que podem ser utilizados</p> Par\u00e2metro Descri\u00e7\u00e3o <code>-t</code> ou <code>--tag</code> Define uma tag(nome) para a imagem. Ex: <code>-t myapp:latest</code> -f Especifica o caminho do Dockerfile se ele n\u00e3o estiver no diret\u00f3rio padr\u00e3o. Ex: -f Dockerfile.dev <code>--no-cache</code> Ignora o cache e for\u00e7a a reconstru\u00e7\u00e3o de todas as camadas <code>--build-arg</code> Permite passar argumentos de build definidos via <code>ARG</code> no Dockerfile <code>--target</code> Define o alvo de uma multi-stage build <code>--progress</code> Controla a exibi\u00e7\u00e3o do progresso (<code>auto</code>, <code>plain</code>, <code>tty</code>) <code>--platform</code> Define a plataforma (arquitetura) para a imagem: <code>linux/amd64</code>, <code>linux/arm64</code>, etc. <p>Por exemplo o comando abaixo cria uma imagem com a tag ascii e o arquivo <code>Dockerfile</code> e demais arquivos necess\u00e1rios se encontram na pasta atual.</p> <pre><code>docker build -t \"ascii\" .\n</code></pre> <p>Ou trabalhar com vers\u00f5es (melhor pr\u00e1tica)</p> <pre><code>docker build -t \"ascii:v0.0.2\" .\n</code></pre>"},{"location":"Ubiquitous%20Computing/bdocker_1/#dockerfile-camadas","title":"Dockerfile Camadas","text":"<p>O Docker divide o Dockerfile em camadas. Cada instru\u00e7\u00e3o (FROM, RUN, COPY, etc.) gera uma nova camada e essas camadas utilizam cache para acelerar builds futuras.</p> <p>Sempre que uma das camadas \u00e9 alterada as camadas subsequentes s\u00e3o reconstru\u00eddas. Durante o docker build, o Docker:</p> <ul> <li>Avalia se a instru\u00e7\u00e3o j\u00e1 foi executada antes com os mesmos inputs, se sim, ele reutiliza a camada anterior do cache.</li> <li>O Docker detecta mudan\u00e7as nos arquivos e invalida o cache das camadas afetadas, quando isso ocorre ele executa essa instru\u00e7\u00e3o novamente e todas as seguintes.</li> </ul> <p>Uso de <code>.dockerignore</code>, melhora performance e impede que arquivos desnecess\u00e1rios entrem no contexto. Devemos organizar comandos que s\u00e3o modificados com pouca frequ\u00eancia no come\u00e7o do arquivo quando poss\u00edvel.</p> <pre><code># Ignora a pasta node_modules (depend\u00eancias locais)\nnode_modules/\nvenv/\n\n# Ignora arquivos de log\n*.log\n\n# Ignora arquivos tempor\u00e1rios do sistema\n*.swp\n*.tmp\n\n# Ignora diret\u00f3rios de testes\ntests/\n__pycache__/\n\n# Ignora arquivos de configura\u00e7\u00e3o e IDEs\n.vscode/\n.idea/\n.env\n\n# Ignora o pr\u00f3prio .dockerignore e Dockerfile se necess\u00e1rio (opcional)\n.dockerignore\nDockerfile.dev\nDockerfile.prod\nDockerfile.test\n\n# Ignora arquivos de build locais\ndist/\nbuild/\n</code></pre>"},{"location":"Ubiquitous%20Computing/bdocker_1/#docker-run","title":"Docker run","text":"<p>O comando docker run \u00e9 usado para executar um container a partir de uma imagem Docker.</p> <pre><code>docker run [op\u00e7\u00f5es] &lt;imagem&gt; [comando]\n</code></pre> Op\u00e7\u00e3o Descri\u00e7\u00e3o <code>-d</code> Executa o container em modo background (detached) <code>-it</code> Interativo com terminal (\u00fatil para bash, etc.) <code>--rm</code> Remove o container automaticamente ao final <code>--name</code> Define um nome personalizado para o container <code>-p</code> Faz o mapeamento de portas (ex: <code>-p 8080:80</code>) <code>-v</code> Faz o mapeamento de volumes (ex: <code>-v $(pwd):/app</code>) <code>-e</code> Define vari\u00e1veis de ambiente (ex: <code>-e NODE_ENV=prod</code>) <code>--network</code> Define a rede a ser usada pelo container <code>--restart</code> Pol\u00edtica de rein\u00edcio (<code>no</code>, <code>always</code>, <code>on-failure</code>) <p>N\u00e3o precisamos executar o <code>run</code> toda vez... quando temos um container podemos iniciar usando <code>docker start</code>:</p> Comando Descri\u00e7\u00e3o <code>docker run</code> Cria e inicia um novo container baseado em uma imagem <code>docker start</code> Inicia um container existente parado <p>Vamos usar a imagem que criamos anteriormente</p> <pre><code>docker run ascii:latest\n</code></pre>"},{"location":"Ubiquitous%20Computing/bdocker_1/#postgresql","title":"Postgresql","text":"<p>Imagine poder trabalhar com uma instala\u00e7\u00e3o isolada do banco de dados, seja para testes ou desenvolvimento. O PostgreSQL pode ser executado como um docker container, assim como diversos outros servi\u00e7os existe uma imagem oficial do docker dispon\u00edvel para download no docker hub.</p> <pre><code>docker run -d \\\n  --name postgres-container \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -e POSTGRES_DB=meubanco \\\n  -p 5432:5432 \\\n  postgres:latest\n</code></pre> Par\u00e2metro Fun\u00e7\u00e3o <code>-d</code> Executa em segundo plano <code>--name</code> Nome do container <code>-e</code> Define vari\u00e1veis de ambiente <code>-p</code> Mapeia a porta 5432 para o host <code>postgres:latest</code> Imagem oficial com a vers\u00e3o desejada <p>Podemos conectar ao banco de dados utilizando</p> <pre><code>docker exec -it postgres-container psql -U postgres -d meubanco\n</code></pre>"},{"location":"Ubiquitous%20Computing/bdocker_1/#volumes","title":"Volumes","text":"<p>O docker permite criar volumes de dados, imagine como se fosse uma unidade de disco para os containers, (na verdade \u00e9 s\u00f3 uma pasta). Essa unidade \u00e9 persistente e mesmo que o container seja removido ela continua a existir e pode ser mapeada por outros containers.</p> <pre><code>docker volume create pgdata\n</code></pre> <p>Para usar um volume utilizamos</p> <pre><code>docker run -d \\\n  --name postgres-container \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -e POSTGRES_DB=meubanco \\\n  -v pgdata:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:latest\n</code></pre> <p>Podemos fazer e restaurar backups diretamente do host</p> <pre><code>docker exec -t postgres-container pg_dump -U meuusuario meubanco &gt; backup.sql\n</code></pre> <pre><code>cat backup.sql | docker exec -i postgres-container psql -U meuusuario -d meubanco\n</code></pre>"},{"location":"Ubiquitous%20Computing/bdocker_1/#redes-no-docker","title":"Redes no Docker","text":"<p>O Docker cria automaticamente algumas redes padr\u00e3o, mas voc\u00ea tamb\u00e9m pode criar redes personalizadas para maior controle.</p> Tipo de Rede Descri\u00e7\u00e3o <code>bridge</code> Padr\u00e3o para containers standalone. Cada container recebe um IP interno. Comunica\u00e7\u00e3o entre containers na mesma rede \u00e9 poss\u00edvel. <code>host</code> O container compartilha a pilha de rede do host. Sem isolamento de IP. <code>none</code> O container n\u00e3o tem acesso \u00e0 rede. \u00datil para seguran\u00e7a ou teste. <code>overlay</code> Permite comunica\u00e7\u00e3o entre containers em hosts diferentes, geralmente usado com Docker Swarm. <code>macvlan</code> Atribui um endere\u00e7o MAC diretamente ao container. Ele se comporta como um dispositivo f\u00edsico na rede. <p>Quando voc\u00ea cria um container, ele \u00e9 conectado por padr\u00e3o a uma rede bridge chamada bridge: - Docker cria uma interface de rede virtual (veth) conectando o container ao host. - O container recebe um IP interno, roteado por NAT. - Voc\u00ea pode expor portas com <code>-p</code> ou <code>--publish</code> para acesso externo.</p> <pre><code>docker run -d --name meu_app -p 8080:80 nginx\n</code></pre> <p>Importante</p> <p>O container meu_app escuta na porta 80 internamente, enquanto o host escuta na porta 8080 e redireciona para o container. Os containers podem se comunicar pelo nome (DNS interno do Docker resolve container1).</p>"},{"location":"Ubiquitous%20Computing/bdocker_1/#docker-compose","title":"Docker Compose","text":"<p>O Docker Compose \u00e9 uma ferramenta que facilita a defini\u00e7\u00e3o e o gerenciamento de aplica\u00e7\u00f5es multi-container no Docker. Ele permite que voc\u00ea defina todos os servi\u00e7os, redes e volumes de sua aplica\u00e7\u00e3o em um arquivo YAML <code>docker-compose.yml</code>.</p> <p>Vamos utilizar nossa api e criar um <code>docker-compose.yaml</code> na pasta raiz da api junto ao Dockerfile.</p> <pre><code>docker compose up --build // ou down\n</code></pre> <p>Exemplo de um <code>docker-compose.yaml</code></p> <pre><code>version: '3.8'\nservices:\n  api:\n    build: .\n    container_name: api\n    ports:\n      - \"3000:3000\"\n    environment:\n      - DB_HOST=postgres\n      - DB_PORT=5432\n      - DB_USER=postgres\n      - DB_PASSWORD=${POSTGRES_PASSWORD}\n      - DB_NAME=api\n    depends_on:\n      - postgres\n    networks:\n      - api-network\n\n  postgres:\n    image: postgres:16\n    container_name: postgres-db\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n      POSTGRES_DB: api\n    ports:\n      - \"5000:5432\"\n    volumes:\n  - postgres-data:/var/lib/postgresql/data\n    networks:\n      - api-network\n\nnetworks:\n  api-network:\n    driver: bridge\nvolumes:\n  postgres-data:\n</code></pre> Se\u00e7\u00e3o Campo Valor / Descri\u00e7\u00e3o Explica\u00e7\u00e3o <code>version</code> <code>'3.8'</code> Formato da vers\u00e3o do Compose Compat\u00edvel com Docker moderno, usado para definir sintaxe e recursos dispon\u00edveis <code>services</code> <code>api</code> Servi\u00e7o da aplica\u00e7\u00e3o (container da API) Define a aplica\u00e7\u00e3o principal que ser\u00e1 constru\u00edda localmente <code>build</code> <code>.</code> Usa o <code>Dockerfile</code> no diret\u00f3rio atual para construir a imagem da API <code>container_name</code> <code>api</code> Nome fixo do container da API <code>ports</code> <code>\"3000:3000\"</code> Mapeia a porta 3000 do host para a porta 3000 do container (acesso \u00e0 API via navegador ou cliente HTTP) <code>environment</code> Define vari\u00e1veis de ambiente consumidas pela API (credenciais de acesso ao banco) <code>DB_HOST=postgres</code> A API se conecta ao banco com o nome do servi\u00e7o <code>postgres</code> <code>DB_PORT=5432</code> Porta padr\u00e3o do PostgreSQL <code>DB_USER=postgres</code> Usu\u00e1rio do banco <code>DB_PASSWORD=${POSTGRES_PASSWORD}</code> Senha vinda do arquivo <code>.env</code> <code>DB_NAME=api</code> Nome do banco <code>depends_on</code> <code>postgres</code> Garante que o container do banco suba antes da API (mas n\u00e3o espera o banco estar pronto) <code>networks</code> <code>api-network</code> Conecta a API \u00e0 rede privada do Compose para comunica\u00e7\u00e3o entre containers <code>services</code> <code>postgres</code> Servi\u00e7o do banco de dados PostgreSQL <code>image</code> <code>postgres:16</code> Usa a imagem oficial do PostgreSQL vers\u00e3o 16 <code>container_name</code> <code>postgres-db</code> Nome fixo do container do banco <code>environment</code> Define vari\u00e1veis internas do PostgreSQL para criar o usu\u00e1rio, banco e senha <code>ports</code> <code>\"5000:5432\"</code> Mapeia a porta 5432 do banco para a porta 5000 do host <code>volumes</code> <code>postgres-data:/var/lib/postgresql/data</code> Volume persistente para armazenar os dados do banco <code>networks</code> <code>api-network</code> Mesmo que a API: permite comunica\u00e7\u00e3o privada entre containers <code>networks</code> <code>api-network</code> <code>driver: bridge</code> Cria uma rede virtual isolada para os servi\u00e7os <code>volumes</code> <code>postgres-data</code> Volume nomeado Armazena os dados do banco de forma persistente no host, mesmo que o container seja recriado"},{"location":"Ubiquitous%20Computing/bdocker_1/#env","title":".env","text":"<p>N\u00e3o \u00e9 seguro deixar credenciais expostas em um dockerfile ou docker-compose, para isso podemos utilizar um arquivo <code>.env</code> (na mesma pasta do docker-compose.yml) que pode ser criado de forma segura utilizando secrets por exemplo.</p> <pre><code># .env\nPOSTGRES_USER=meuusuario\nPOSTGRES_PASSWORD=senha123\nPOSTGRES_DB=meubanco\n</code></pre> Comando A\u00e7\u00e3o <code>docker compose up</code> Sobe todos os containers <code>docker compose up -d</code> Sobe em background <code>docker compose down</code> Derruba e remove containers, redes e volumes an\u00f4nimos <code>docker compose down -v</code> Derruba e remove containers <code>docker compose logs</code> Mostra os logs dos servi\u00e7os <code>docker compose exec &lt;servi\u00e7o&gt; bash</code> Acessa o terminal de um container <code>docker compose ps</code> Lista containers em execu\u00e7\u00e3o <code>docker compose stop/start</code> Para ou inicia servi\u00e7os j\u00e1 criados"},{"location":"Ubiquitous%20Computing/bdocker_1/#outros-commandos","title":"Outros Commandos","text":"<p>Segue uma lista de comandos do docker para refer\u00eancia.</p> <p>Comandos \u00fateis</p> HelpLogsAcessar containerDocker cpListar ImagensListar Containers <p>Lista comandos do docker e outras informa\u00e7\u00f5es <pre><code>docker --help\n</code></pre></p> <p>Logs do container <pre><code>docker logs &lt;container-id&gt;\n</code></pre></p> <p>Logs do container <pre><code>docker exec -it &lt;container-id&gt; /bin/bash\n</code></pre></p> <p>Copiar arquivos de dentro do container <pre><code>docker cp &lt;origem&gt; &lt;destino&gt;\n\n#Container para Host\ndocker cp postgres-container:/var/log/postgresql/postgresql.log ./meus-logs/\n\n#Host para container\ndocker cp ./backup.sql postgres-container:/tmp/backup.sql\n</code></pre></p> <p>Listar imagens <pre><code>docker images\n</code></pre></p> <p>Listar Containers <pre><code>docker ps\n</code></pre></p> <p>Comandos \u00fateis pt 2</p> docker daemonReiniciar o composeDeletar ContainersDeletar os volumes: <p>Iniciar, reiniciar e Parar o service do Docker <pre><code>sudo systemctl start docker\nsudo systemctl restar docker\nsudo systemctl stop docker\n</code></pre></p> <p>Reinicia todos os containers de um docker-compose <pre><code>docker-compose restart\n</code></pre></p> <p>Deletar os containers <pre><code>docker stop &lt;container-id&gt;\ndocker rm &lt;container-id&gt;\n\ndocker rm -f $(docker ps -a -q)\n</code></pre></p> <p>Deletar todos os volumes: <pre><code>docker volume rm $(docker volume ls -q)\n</code></pre></p>"},{"location":"Ubiquitous%20Computing/bdocker_1/#ferramentas-graficas","title":"Ferramentas Gr\u00e1ficas","text":"<p>O docker fornece uma ferramenta gr\u00e1fica chamada Docker Desktop para facilitar o gerenciamento do docker.</p> <p></p> <p>Outra ferramenta interessante \u00e9 o Lazydocker, uma TUI(terminal user interface) para facilitar o gerenciamento do docker.</p> <p></p> <p>E por \u00faltimo mas n\u00e3o menos importante o Portainer, \u00e9 uma ferramenta para gerenciamento de containers e orquestradores, oferecendo uma interface gr\u00e1fica(GUI) para administrar ambientes Docker, Docker Swarm, Kubernetes, e Azure ACI.</p>"}]}